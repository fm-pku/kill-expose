class org.gjt.sp.jedit.bsh.BSHForStatement extends org.gjt.sp.jedit.bsh.SimpleNode implements org.gjt.sp.jedit.bsh.ParserConstants
{
    public boolean hasForInit;
    public boolean hasExpression;
    public boolean hasForUpdate;
    private org.gjt.sp.jedit.bsh.SimpleNode forInit;
    private org.gjt.sp.jedit.bsh.SimpleNode expression;
    private org.gjt.sp.jedit.bsh.SimpleNode forUpdate;
    private org.gjt.sp.jedit.bsh.SimpleNode statement;
    private boolean parsed;

    void <init>(int)
    {
        org.gjt.sp.jedit.bsh.BSHForStatement r0;
        int i0;

        r0 := @this;

        i0 := @parameter0;

        specialinvoke r0.<init>(i0);

        return;
    }

    public java.lang.Object eval(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHForStatement r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        org.gjt.sp.jedit.bsh.NameSpace r3;
        org.gjt.sp.jedit.bsh.BlockNameSpace r4, $r6;
        java.lang.Object r5, r25;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, z7, z8;
        int $i0, $i1, $i2, $i3, $i4, i5, i5_1, i5_2, i5_3, i5_4, i5_5, i5_6;
        org.gjt.sp.jedit.bsh.SimpleNode $r8, $r9, $r12, $r14, $r15, $r18, $r20, $r22, $r24;
        org.gjt.sp.jedit.bsh.ReturnControl $r13;
        org.gjt.sp.jedit.bsh.Node $r17, $r19, $r21, $r23;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        i5 = 0;

        $z0 = r0.hasForInit;

(0)     if $z0 == 0 goto label01;

        $i4 = i5;

        i5_1 = i5 + 1;

        $r23 = r0.jjtGetChild($i4);

        $r24 = (org.gjt.sp.jedit.bsh.SimpleNode) $r23;

(1)     r0.forInit = $r24;

     label01:
        i5_2 = Phi(i5 #0, i5_1 #1);

        $z1 = r0.hasExpression;

(2)     if $z1 == 0 goto label02;

        $i3 = i5_2;

        i5_3 = i5_2 + 1;

        $r21 = r0.jjtGetChild($i3);

        $r22 = (org.gjt.sp.jedit.bsh.SimpleNode) $r21;

(3)     r0.expression = $r22;

     label02:
        i5_4 = Phi(i5_2 #2, i5_3 #3);

        $z2 = r0.hasForUpdate;

(4)     if $z2 == 0 goto label03;

        $i2 = i5_4;

        i5_5 = i5_4 + 1;

        $r19 = r0.jjtGetChild($i2);

        $r20 = (org.gjt.sp.jedit.bsh.SimpleNode) $r19;

(5)     r0.forUpdate = $r20;

     label03:
        i5_6 = Phi(i5_4 #4, i5_5 #5);

        $i0 = r0.jjtGetNumChildren();

        if i5_6 >= $i0 goto label04;

        $r17 = r0.jjtGetChild(i5_6);

        $r18 = (org.gjt.sp.jedit.bsh.SimpleNode) $r17;

        r0.statement = $r18;

     label04:
        r3 = r1.top();

        $r6 = new org.gjt.sp.jedit.bsh.BlockNameSpace;

        specialinvoke $r6.<init>(r3);

        r4 = $r6;

        r1.swap(r4);

        $z3 = r0.hasForInit;

        if $z3 == 0 goto label05;

        $r15 = r0.forInit;

        $r15.eval(r1, r2);

     label05:
(6)     r25 = org.gjt.sp.jedit.bsh.Primitive.VOID;

     label06:
        i5 = Phi(i5_6 #6, i5 #15);

        z8 = Phi(z8 #6, z8 #15);

        r25 = Phi(r25 #6, r25 #15);

        $z4 = r0.hasExpression;

        if $z4 == 0 goto label07;

        $r14 = r0.expression;

        z7 = org.gjt.sp.jedit.bsh.BSHIfStatement.evaluateCondition($r14, r1, r2);

        if z7 != 0 goto label07;

(7)     goto label14;

     label07:
        z8 = 0;

        $r8 = r0.statement;

(8)     if $r8 == null goto label11;

        $r12 = r0.statement;

        r5 = $r12.eval(r1, r2);

        $z6 = r5 instanceof org.gjt.sp.jedit.bsh.ReturnControl;

(9)     if $z6 == 0 goto label11;

        $r13 = (org.gjt.sp.jedit.bsh.ReturnControl) r5;

        $i1 = $r13.kind;

(10)    lookupswitch($i1)
        {
            case 12: goto label10;
            case 19: goto label09;
            case 46: goto label08;
            default: goto label11;
        };

     label08:
        r25 = r5;

        z8 = 1;

(11)    goto label11;

     label09:
(12)    goto label11;

     label10:
(13)    z8 = 1;

     label11:
        z8 = Phi(z8 #8, z8 #9, z8 #10, z8 #11, z8 #12, z8 #13);

        r25 = Phi(r25 #8, r25 #9, r25 #10, r25 #11, r25 #12, r25 #13);

        if z8 == 0 goto label12;

(14)    goto label14;

     label12:
        $z5 = r0.hasForUpdate;

        if $z5 == 0 goto label13;

        $r9 = r0.forUpdate;

        $r9.eval(r1, r2);

     label13:
(15)    goto label06;

     label14:
        z8 = Phi(z8 #7, z8 #14);

        r25 = Phi(r25 #7, r25 #14);

        r1.swap(r3);

        return r25;
    }
}
