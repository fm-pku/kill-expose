class org.gjt.sp.jedit.bsh.BSHAssignment extends org.gjt.sp.jedit.bsh.SimpleNode implements org.gjt.sp.jedit.bsh.ParserConstants
{
    public int operator;

    void <init>(int)
    {
        org.gjt.sp.jedit.bsh.BSHAssignment r0;
        int i0;

        r0 := @this;

        i0 := @parameter0;

        specialinvoke r0.<init>(i0);

        return;
    }

    public java.lang.Object eval(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHAssignment r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        org.gjt.sp.jedit.bsh.BSHPrimaryExpression r3;
        boolean z0;
        org.gjt.sp.jedit.bsh.LHS r4;
        java.lang.Object r5, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26, $r27, $r28, $r29, $r30, $r31, $r32, r41, r41_1, r41_2, r41_3;
        org.gjt.sp.jedit.bsh.UtilEvalError r6, $r37, $r39, r42;
        org.gjt.sp.jedit.bsh.Node $r7, $r8;
        int $i0, $i1;
        org.gjt.sp.jedit.bsh.Primitive $r9;
        org.gjt.sp.jedit.bsh.InterpreterError $r33, $r35, $r36;
        org.gjt.sp.jedit.bsh.EvalError $r34, $r38, $r40;
        org.gjt.sp.jedit.bsh.SimpleNode r43;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r7 = r0.jjtGetChild(0);

        r3 = (org.gjt.sp.jedit.bsh.BSHPrimaryExpression) $r7;

        if r3 != null goto label01;

        $r36 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r36.<init>("Error, null LHSnode");

        throw $r36;

     label01:
        z0 = r2.getStrictJava();

        r4 = r3.toLHS(r1, r2);

        if r4 != null goto label02;

        $r35 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r35.<init>("Error, null LHS");

        throw $r35;

     label02:
        r41 = null;

        $i0 = r0.operator;

(0)     if $i0 == 81 goto label06;

     label03:
(1)     r41_1 = r4.getValue();

     label04:
(2)     goto label06;

     label05:
        $r39 := @caughtexception;

        r41_2 = Phi(r41 #0, r41_1 #1);

        r42 = $r39;

        $r40 = r42.toEvalError(r0, r1);

        throw $r40;

     label06:
        r41_3 = Phi(r41 #0, r41_1 #2);

        $r8 = r0.jjtGetChild(1);

        r43 = (org.gjt.sp.jedit.bsh.SimpleNode) $r8;

        r5 = r43.eval(r1, r2);

        $r9 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r5 != $r9 goto label07;

        $r34 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r34.<init>("Void assignment.", r0, r1);

        throw $r34;

     label07:
        $i1 = r0.operator;

        tableswitch($i1)
        {
            case 81: goto label08;
            case 82: goto label32;
            case 83: goto label32;
            case 84: goto label32;
            case 85: goto label32;
            case 86: goto label32;
            case 87: goto label32;
            case 88: goto label32;
            case 89: goto label32;
            case 90: goto label32;
            case 91: goto label32;
            case 92: goto label32;
            case 93: goto label32;
            case 94: goto label32;
            case 95: goto label32;
            case 96: goto label32;
            case 97: goto label32;
            case 98: goto label32;
            case 99: goto label32;
            case 100: goto label32;
            case 101: goto label32;
            case 102: goto label32;
            case 103: goto label32;
            case 104: goto label32;
            case 105: goto label32;
            case 106: goto label32;
            case 107: goto label32;
            case 108: goto label32;
            case 109: goto label32;
            case 110: goto label32;
            case 111: goto label32;
            case 112: goto label32;
            case 113: goto label32;
            case 114: goto label32;
            case 115: goto label32;
            case 116: goto label32;
            case 117: goto label32;
            case 118: goto label10;
            case 119: goto label12;
            case 120: goto label14;
            case 121: goto label16;
            case 122: goto label18;
            case 123: goto label18;
            case 124: goto label20;
            case 125: goto label20;
            case 126: goto label22;
            case 127: goto label24;
            case 128: goto label26;
            case 129: goto label26;
            case 130: goto label28;
            case 131: goto label28;
            case 132: goto label30;
            case 133: goto label30;
            default: goto label32;
        };

     label08:
        $r10 = r4.assign(r5, z0);

     label09:
        return $r10;

     label10:
        $r31 = specialinvoke r0.operation(r41_3, r5, 102);

        $r32 = r4.assign($r31, z0);

     label11:
        return $r32;

     label12:
        $r29 = specialinvoke r0.operation(r41_3, r5, 103);

        $r30 = r4.assign($r29, z0);

     label13:
        return $r30;

     label14:
        $r27 = specialinvoke r0.operation(r41_3, r5, 104);

        $r28 = r4.assign($r27, z0);

     label15:
        return $r28;

     label16:
        $r25 = specialinvoke r0.operation(r41_3, r5, 105);

        $r26 = r4.assign($r25, z0);

     label17:
        return $r26;

     label18:
        $r23 = specialinvoke r0.operation(r41_3, r5, 106);

        $r24 = r4.assign($r23, z0);

     label19:
        return $r24;

     label20:
        $r21 = specialinvoke r0.operation(r41_3, r5, 108);

        $r22 = r4.assign($r21, z0);

     label21:
        return $r22;

     label22:
        $r19 = specialinvoke r0.operation(r41_3, r5, 110);

        $r20 = r4.assign($r19, z0);

     label23:
        return $r20;

     label24:
        $r17 = specialinvoke r0.operation(r41_3, r5, 111);

        $r18 = r4.assign($r17, z0);

     label25:
        return $r18;

     label26:
        $r15 = specialinvoke r0.operation(r41_3, r5, 112);

        $r16 = r4.assign($r15, z0);

     label27:
        return $r16;

     label28:
        $r13 = specialinvoke r0.operation(r41_3, r5, 114);

        $r14 = r4.assign($r13, z0);

     label29:
        return $r14;

     label30:
        $r11 = specialinvoke r0.operation(r41_3, r5, 116);

        $r12 = r4.assign($r11, z0);

     label31:
        return $r12;

     label32:
        $r33 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r33.<init>("unimplemented operator in assignment BSH");

        throw $r33;

     label33:
        $r37 := @caughtexception;

        r6 = $r37;

        $r38 = r6.toEvalError(r0, r1);

        throw $r38;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label03 to label04 with label05;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label07 to label09 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label10 to label11 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label12 to label13 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label14 to label15 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label16 to label17 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label18 to label19 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label20 to label21 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label22 to label23 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label24 to label25 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label26 to label27 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label28 to label29 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label30 to label31 with label33;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label32 to label33 with label33;
    }

    private java.lang.Object operation(java.lang.Object, java.lang.Object, int) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.BSHAssignment r0;
        java.lang.Object r1, r2, $r9;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10;
        org.gjt.sp.jedit.bsh.Primitive $r3, $r5, $r6, $r8, $r23;
        org.gjt.sp.jedit.bsh.UtilEvalError $r4, $r7, $r10, $r29;
        java.lang.StringBuilder $r11, $r12, $r14, $r15, $r18, $r19, $r21, $r24, $r26, $r27;
        java.lang.Class $r13, $r20;
        java.lang.String[] $r16;
        java.lang.String $r17, $r22, $r25, $r28;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        i0 := @parameter2;

        $z0 = r1 instanceof java.lang.String;

        if $z0 == 0 goto label02;

        $r23 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r2 == $r23 goto label02;

        if i0 == 102 goto label01;

        $r29 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r29.<init>("Use of non + operator with String LHS");

        throw $r29;

     label01:
        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<init>();

        $r25 = (java.lang.String) r1;

        $r26 = $r24.append($r25);

        $r27 = $r26.append(r2);

        $r28 = $r27.toString();

        return $r28;

     label02:
        $z1 = r1 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z1 != 0 goto label03;

        $z10 = r2 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z10 == 0 goto label07;

     label03:
        $r3 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r1 == $r3 goto label04;

        $r5 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r2 != $r5 goto label05;

     label04:
        $r4 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r4.<init>("Illegal use of undefined object or \'void\' literal");

        throw $r4;

     label05:
        $r6 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r1 == $r6 goto label06;

        $r8 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r2 != $r8 goto label07;

     label06:
        $r7 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r7.<init>("Illegal use of null object or \'null\' literal");

        throw $r7;

     label07:
        $z2 = r1 instanceof java.lang.Boolean;

        if $z2 != 0 goto label08;

        $z7 = r1 instanceof java.lang.Character;

        if $z7 != 0 goto label08;

        $z8 = r1 instanceof java.lang.Number;

        if $z8 != 0 goto label08;

        $z9 = r1 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z9 == 0 goto label10;

     label08:
        $z3 = r2 instanceof java.lang.Boolean;

        if $z3 != 0 goto label09;

        $z4 = r2 instanceof java.lang.Character;

        if $z4 != 0 goto label09;

        $z5 = r2 instanceof java.lang.Number;

        if $z5 != 0 goto label09;

        $z6 = r2 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z6 == 0 goto label10;

     label09:
        $r9 = org.gjt.sp.jedit.bsh.Primitive.binaryOperation(r1, r2, i0);

        return $r9;

     label10:
        $r10 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<init>();

        $r12 = $r11.append("Non primitive value in operator: ");

        $r13 = r1.getClass();

        $r14 = $r12.append($r13);

        $r15 = $r14.append(" ");

        $r16 = org.gjt.sp.jedit.bsh.BSHAssignment.tokenImage;

        $r17 = $r16[i0];

        $r18 = $r15.append($r17);

        $r19 = $r18.append(" ");

        $r20 = r2.getClass();

        $r21 = $r19.append($r20);

        $r22 = $r21.toString();

        specialinvoke $r10.<init>($r22);

        throw $r10;
    }
}
