class org.gjt.sp.jedit.bsh.BSHEnhancedForStatement extends org.gjt.sp.jedit.bsh.SimpleNode implements org.gjt.sp.jedit.bsh.ParserConstants
{
    java.lang.String varName;

    void <init>(int)
    {
        org.gjt.sp.jedit.bsh.BSHEnhancedForStatement r0;
        int i0;

        r0 := @this;

        i0 := @parameter0;

        specialinvoke r0.<init>(i0);

        return;
    }

    public java.lang.Object eval(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHEnhancedForStatement r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        org.gjt.sp.jedit.bsh.NameSpace r3;
        org.gjt.sp.jedit.bsh.SimpleNode r4, r40, r41, r40_1, r41_1, r40_2, r40_3, r41_2;
        int i0, $i1;
        org.gjt.sp.jedit.bsh.BlockNameSpace r5, $r11;
        java.lang.Object r6, r9, $r16, $r19, r42;
        org.gjt.sp.jedit.bsh.CollectionManager r7;
        org.gjt.sp.jedit.bsh.BshIterator r8;
        org.gjt.sp.jedit.bsh.Node $r10, $r28, $r30, $r31;
        boolean $z0, $z1, $z2, $z3, z4;
        org.gjt.sp.jedit.bsh.Primitive $r13;
        java.lang.String $r15, $r18, $r26, $r35, $r37;
        org.gjt.sp.jedit.bsh.ReturnControl $r17;
        org.gjt.sp.jedit.bsh.Modifiers $r20;
        org.gjt.sp.jedit.bsh.EvalError $r21, $r27, $r38;
        java.lang.StringBuilder $r22, $r23, $r25, $r33, $r34, $r36;
        java.lang.Class $r24, r39, r39_1, r39_2;
        org.gjt.sp.jedit.bsh.BSHType $r29;
        org.gjt.sp.jedit.bsh.UtilEvalError $r32, r43;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r39 = null;

        r40 = null;

        r3 = r1.top();

        $r10 = r0.jjtGetChild(0);

        r4 = (org.gjt.sp.jedit.bsh.SimpleNode) $r10;

        i0 = r0.jjtGetNumChildren();

        $z0 = r4 instanceof org.gjt.sp.jedit.bsh.BSHType;

        if $z0 == 0 goto label01;

        $r29 = (org.gjt.sp.jedit.bsh.BSHType) r4;

        r39_1 = $r29.getType(r1, r2);

        $r30 = r0.jjtGetChild(1);

        r41 = (org.gjt.sp.jedit.bsh.SimpleNode) $r30;

(0)     if i0 <= 2 goto label02;

        $r31 = r0.jjtGetChild(2);

        r40_1 = (org.gjt.sp.jedit.bsh.SimpleNode) $r31;

(1)     goto label02;

     label01:
        r41_1 = r4;

(2)     if i0 <= 1 goto label02;

        $r28 = r0.jjtGetChild(1);

(3)     r40_2 = (org.gjt.sp.jedit.bsh.SimpleNode) $r28;

     label02:
        r40_3 = Phi(r40 #0, r40_1 #1, r40 #2, r40_2 #3);

        r39_2 = Phi(r39_1 #0, r39_1 #1, r39 #2, r39 #3);

        r41_2 = Phi(r41 #0, r41 #1, r41_1 #2, r41_1 #3);

        $r11 = new org.gjt.sp.jedit.bsh.BlockNameSpace;

        specialinvoke $r11.<init>(r3);

        r5 = $r11;

        r1.swap(r5);

        r6 = r41_2.eval(r1, r2);

        $r13 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r6 != $r13 goto label03;

        $r27 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r27.<init>("The collection, array, map, iterator, or enumeration portion of a for statement cannot be null.", r0, r1);

        throw $r27;

     label03:
        r7 = org.gjt.sp.jedit.bsh.CollectionManager.getCollectionManager();

        $z1 = r7.isBshIterable(r6);

        if $z1 != 0 goto label04;

        $r21 = new org.gjt.sp.jedit.bsh.EvalError;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<init>();

        $r23 = $r22.append("Can\'t iterate over type: ");

        $r24 = r6.getClass();

        $r25 = $r23.append($r24);

        $r26 = $r25.toString();

        specialinvoke $r21.<init>($r26, r0, r1);

        throw $r21;

     label04:
        r8 = r7.getBshIterator(r6);

(4)     r42 = org.gjt.sp.jedit.bsh.Primitive.VOID;

     label05:
        r40 = Phi(r40_3 #4, r40 #13);

        z4 = Phi(z4 #4, z4 #13);

        r39 = Phi(r39_2 #4, r39 #13);

        r42 = Phi(r42 #4, r42 #13);

        r41 = Phi(r41_2 #4, r41 #13);

        $z2 = r8.hasNext();

(5)     if $z2 == 0 goto label16;

     label06:
        if r39 == null goto label07;

        $r18 = r0.varName;

        $r19 = r8.next();

        $r20 = new org.gjt.sp.jedit.bsh.Modifiers;

        specialinvoke $r20.<init>();

        r5.setTypedVariable($r18, r39, $r19, $r20);

        goto label08;

     label07:
        $r15 = r0.varName;

        $r16 = r8.next();

        r5.setVariable($r15, $r16, 0);

     label08:
        goto label10;

     label09:
        $r32 := @caughtexception;

        r43 = $r32;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<init>();

        $r34 = $r33.append("for loop iterator variable:");

        $r35 = r0.varName;

        $r36 = $r34.append($r35);

        $r37 = $r36.toString();

        $r38 = r43.toEvalError($r37, r0, r1);

        throw $r38;

     label10:
        z4 = 0;

(6)     if r40 == null goto label14;

        r9 = r40.eval(r1, r2);

        $z3 = r9 instanceof org.gjt.sp.jedit.bsh.ReturnControl;

(7)     if $z3 == 0 goto label14;

        $r17 = (org.gjt.sp.jedit.bsh.ReturnControl) r9;

        $i1 = $r17.kind;

(8)     lookupswitch($i1)
        {
            case 12: goto label13;
            case 19: goto label12;
            case 46: goto label11;
            default: goto label14;
        };

     label11:
        r42 = r9;

        z4 = 1;

(9)     goto label14;

     label12:
(10)    goto label14;

     label13:
(11)    z4 = 1;

     label14:
        z4 = Phi(z4 #6, z4 #7, z4 #8, z4 #9, z4 #10, z4 #11);

        r42 = Phi(r42 #6, r42 #7, r42 #8, r42 #9, r42 #10, r42 #11);

        if z4 == 0 goto label15;

(12)    goto label16;

     label15:
(13)    goto label05;

     label16:
        z4 = Phi(z4 #5, z4 #12);

        r42 = Phi(r42 #5, r42 #12);

        r1.swap(r3);

        return r42;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label06 to label08 with label09;
    }
}
