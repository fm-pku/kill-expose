public class org.gjt.sp.jedit.Macros extends java.lang.Object
{
    private static java.lang.String systemMacroPath;
    private static java.lang.String userMacroPath;
    private static java.util.List macroHandlers;
    private static org.gjt.sp.jedit.ActionSet macroActionSet;
    private static java.util.Vector macroHierarchy;
    private static java.util.Map macroHash;
    private static org.gjt.sp.jedit.Macros$Macro lastMacro;

    public void <init>()
    {
        org.gjt.sp.jedit.Macros r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    public static void showRunScriptDialog(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.View r0;
        java.lang.String[] r1, r3;
        org.gjt.sp.jedit.Buffer r2;
        int i0, i1;
        java.lang.String r4;
        java.lang.Throwable r5, $r6;

        r0 := @parameter0;

        r1 = org.gjt.sp.jedit.GUIUtilities.showVFSFileDialog(r0, null, 0, 1);

(0)     if r1 == null goto label6;

(1)     r2 = r0.getBuffer();

     label1:
        r2.beginCompoundEdit();

        r3 = r1;

        i0 = lengthof r3;

(2)     i1 = 0;

     label2:
        i1 = Phi(i1 #2, i1 #4);

(3)     if i1 >= i0 goto label3;

        r4 = r3[i1];

        org.gjt.sp.jedit.Macros.runScript(r0, r4, 0);

        i1 = i1 + 1;

(4)     goto label2;

     label3:
        r2.endCompoundEdit();

(5)     goto label6;

     label4:
        $r6 := @caughtexception;

(6)     i1 = Phi(i1 #1, i1 #3, i1 #6);

        r5 = $r6;

     label5:
        r2.endCompoundEdit();

        throw r5;

     label6:
        i1 = Phi(i1 #0, i1 #5);

        return;

        catch java.lang.Throwable from label1 to label3 with label4;
        catch java.lang.Throwable from label4 to label5 with label4;
    }

    public static void runScript(org.gjt.sp.jedit.View, java.lang.String, boolean)
    {
        org.gjt.sp.jedit.View r0;
        java.lang.String r1, $r7, $r13, $r14;
        boolean z0;
        org.gjt.sp.jedit.Macros$Handler r2, $r8;
        java.lang.StringBuilder $r3, $r4, $r5, $r6, $r10, $r11, $r12;
        org.gjt.sp.jedit.Macros$Macro $r9, r16;
        java.lang.Exception $r15, r17;

        r0 := @parameter0;

        r1 := @parameter1;

        z0 := @parameter2;

        r2 = org.gjt.sp.jedit.Macros.getHandlerForPathName(r1);

        if r2 == null goto label5;

     label1:
        $r14 = org.gjt.sp.jedit.MiscUtilities.getFileName(r1);

        r16 = r2.createMacro($r14, r1);

        r16.invoke(r0);

     label2:
        goto label4;

     label3:
        $r15 := @caughtexception;

        r17 = $r15;

        org.gjt.sp.util.Log.log(9, class "org/gjt/sp/jedit/Macros", r17);

        return;

     label4:
        return;

     label5:
        if z0 == 0 goto label6;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<init>();

        $r11 = $r10.append(r1);

        $r12 = $r11.append(": Cannot find a suitable macro handler");

        $r13 = $r12.toString();

        org.gjt.sp.util.Log.log(5, class "org/gjt/sp/jedit/Macros", $r13);

        goto label7;

     label6:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r4 = $r3.append(r1);

        $r5 = $r4.append(": Cannot find a suitable macro handler, ");

        $r6 = $r5.append("assuming BeanShell");

        $r7 = $r6.toString();

        org.gjt.sp.util.Log.log(9, class "org/gjt/sp/jedit/Macros", $r7);

        $r8 = org.gjt.sp.jedit.Macros.getHandler("beanshell");

        $r9 = $r8.createMacro(r1, r1);

        $r9.invoke(r0);

     label7:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void message(java.awt.Component, java.lang.String)
    {
        java.awt.Component r0;
        java.lang.String r1, $r4;
        java.lang.Exception r2, $r5;
        boolean $z0;
        org.gjt.sp.jedit.Macros$1 $r3;

        r0 := @parameter0;

        r1 := @parameter1;

        $z0 = java.awt.EventQueue.isDispatchThread();

        if $z0 == 0 goto label1;

        org.gjt.sp.jedit.GUIUtilities.hideSplashScreen();

        $r4 = org.gjt.sp.jedit.jEdit.getProperty("macro-message.title");

        javax.swing.JOptionPane.showMessageDialog(r0, r1, $r4, 1);

        goto label4;

     label1:
        $r3 = new org.gjt.sp.jedit.Macros$1;

        specialinvoke $r3.<init>(r0, r1);

        java.awt.EventQueue.invokeAndWait($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static void error(java.awt.Component, java.lang.String)
    {
        java.awt.Component r0;
        java.lang.String r1, $r4;
        java.lang.Exception r2, $r5;
        boolean $z0;
        org.gjt.sp.jedit.Macros$2 $r3;

        r0 := @parameter0;

        r1 := @parameter1;

        $z0 = java.awt.EventQueue.isDispatchThread();

        if $z0 == 0 goto label1;

        org.gjt.sp.jedit.GUIUtilities.hideSplashScreen();

        $r4 = org.gjt.sp.jedit.jEdit.getProperty("macro-message.title");

        javax.swing.JOptionPane.showMessageDialog(r0, r1, $r4, 0);

        goto label4;

     label1:
        $r3 = new org.gjt.sp.jedit.Macros$2;

        specialinvoke $r3.<init>(r0, r1);

        java.awt.EventQueue.invokeAndWait($r3);

     label2:
        goto label4;

     label3:
        $r5 := @caughtexception;

        r2 = $r5;

     label4:
        return;

        catch java.lang.Exception from label1 to label2 with label3;
    }

    public static java.lang.String input(java.awt.Component, java.lang.String)
    {
        java.awt.Component r0;
        java.lang.String r1, $r2;

        r0 := @parameter0;

        r1 := @parameter1;

        org.gjt.sp.jedit.GUIUtilities.hideSplashScreen();

        $r2 = org.gjt.sp.jedit.Macros.input(r0, r1, null);

        return $r2;
    }

    public static java.lang.String input(java.awt.Component, java.lang.String, java.lang.String)
    {
        java.awt.Component r0;
        java.lang.String r1, r2, $r6, $r7, $r9;
        java.lang.String[] r3;
        java.lang.Exception r4, $r10;
        boolean $z0;
        org.gjt.sp.jedit.Macros$3 $r5;
        java.lang.Object $r8;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        $z0 = java.awt.EventQueue.isDispatchThread();

        if $z0 == 0 goto label1;

        org.gjt.sp.jedit.GUIUtilities.hideSplashScreen();

        $r7 = org.gjt.sp.jedit.jEdit.getProperty("macro-input.title");

        $r8 = javax.swing.JOptionPane.showInputDialog(r0, r1, $r7, 3, null, null, r2);

        $r9 = (java.lang.String) $r8;

        return $r9;

     label1:
        r3 = newarray (java.lang.String)[1];

     label2:
        $r5 = new org.gjt.sp.jedit.Macros$3;

        specialinvoke $r5.<init>(r3, r0, r1, r2);

        java.awt.EventQueue.invokeAndWait($r5);

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r4 = $r10;

        return null;

     label5:
        $r6 = r3[0];

        return $r6;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static int confirm(java.awt.Component, java.lang.String, int)
    {
        java.awt.Component r0;
        java.lang.String r1, $r5;
        int i0, $i1, $i2;
        int[] r2;
        java.lang.Exception r3, $r6;
        boolean $z0;
        org.gjt.sp.jedit.Macros$4 $r4;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        $z0 = java.awt.EventQueue.isDispatchThread();

        if $z0 == 0 goto label1;

        org.gjt.sp.jedit.GUIUtilities.hideSplashScreen();

        $r5 = org.gjt.sp.jedit.jEdit.getProperty("macro-confirm.title");

        $i2 = javax.swing.JOptionPane.showConfirmDialog(r0, r1, $r5, i0, 3);

        return $i2;

     label1:
        r2 = newarray (int)[1];

     label2:
        $r4 = new org.gjt.sp.jedit.Macros$4;

        specialinvoke $r4.<init>(r2, r0, r1, i0);

        java.awt.EventQueue.invokeAndWait($r4);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        return 2;

     label5:
        $i1 = r2[0];

        return $i1;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static int confirm(java.awt.Component, java.lang.String, int, int)
    {
        java.awt.Component r0;
        java.lang.String r1, $r5;
        int i0, i1, $i2, $i3;
        int[] r2;
        java.lang.Exception r3, $r6;
        boolean $z0;
        org.gjt.sp.jedit.Macros$5 $r4;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        i1 := @parameter3;

        $z0 = java.awt.EventQueue.isDispatchThread();

        if $z0 == 0 goto label1;

        org.gjt.sp.jedit.GUIUtilities.hideSplashScreen();

        $r5 = org.gjt.sp.jedit.jEdit.getProperty("macro-confirm.title");

        $i3 = javax.swing.JOptionPane.showConfirmDialog(r0, r1, $r5, i0, i1);

        return $i3;

     label1:
        r2 = newarray (int)[1];

     label2:
        $r4 = new org.gjt.sp.jedit.Macros$5;

        specialinvoke $r4.<init>(r2, r0, r1, i0, i1);

        java.awt.EventQueue.invokeAndWait($r4);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        return 2;

     label5:
        $i2 = r2[0];

        return $i2;

        catch java.lang.Exception from label2 to label3 with label4;
    }

    public static void loadMacros()
    {
        java.lang.String r0, $r5, $r8, $r9, $r11, $r13, $r15;
        org.gjt.sp.jedit.ActionSet $r1, $r2, $r6;
        java.util.Vector $r3, $r12, $r16;
        java.util.Map $r4;
        org.gjt.sp.jedit.msg.DynamicMenuChanged $r7;
        java.io.File $r10, $r14;

        $r1 = org.gjt.sp.jedit.Macros.macroActionSet;

        org.gjt.sp.jedit.jEdit.removeActionSet($r1);

        $r2 = org.gjt.sp.jedit.Macros.macroActionSet;

        $r2.removeAllActions();

        $r3 = org.gjt.sp.jedit.Macros.macroHierarchy;

        $r3.removeAllElements();

        $r4 = org.gjt.sp.jedit.Macros.macroHash;

        $r4.clear();

        r0 = org.gjt.sp.jedit.jEdit.getSettingsDirectory();

        if r0 == null goto label1;

        $r13 = org.gjt.sp.jedit.MiscUtilities.constructPath(r0, "macros");

        org.gjt.sp.jedit.Macros.userMacroPath = $r13;

        $r16 = org.gjt.sp.jedit.Macros.macroHierarchy;

        $r14 = new java.io.File;

        $r15 = org.gjt.sp.jedit.Macros.userMacroPath;

        specialinvoke $r14.<init>($r15);

        org.gjt.sp.jedit.Macros.loadMacros($r16, "", $r14);

     label1:
        $r5 = org.gjt.sp.jedit.jEdit.getJEditHome();

        if $r5 == null goto label2;

        $r8 = org.gjt.sp.jedit.jEdit.getJEditHome();

        $r9 = org.gjt.sp.jedit.MiscUtilities.constructPath($r8, "macros");

        org.gjt.sp.jedit.Macros.systemMacroPath = $r9;

        $r12 = org.gjt.sp.jedit.Macros.macroHierarchy;

        $r10 = new java.io.File;

        $r11 = org.gjt.sp.jedit.Macros.systemMacroPath;

        specialinvoke $r10.<init>($r11);

        org.gjt.sp.jedit.Macros.loadMacros($r12, "", $r10);

     label2:
        $r6 = org.gjt.sp.jedit.Macros.macroActionSet;

        org.gjt.sp.jedit.jEdit.addActionSet($r6);

        $r7 = new org.gjt.sp.jedit.msg.DynamicMenuChanged;

        specialinvoke $r7.<init>("macros");

        org.gjt.sp.jedit.EditBus.send($r7);

        return;
    }

    public static void registerHandler(org.gjt.sp.jedit.Macros$Handler)
    {
        org.gjt.sp.jedit.Macros$Handler r0, $r2;
        java.lang.String $r1, $r5, $r8;
        java.lang.StringBuilder $r3, $r4, $r6, $r7;
        java.util.List $r9;

        r0 := @parameter0;

        $r1 = r0.getName();

        $r2 = org.gjt.sp.jedit.Macros.getHandler($r1);

        if $r2 == null goto label1;

        org.gjt.sp.util.Log.log(9, class "org/gjt/sp/jedit/Macros", "Cannot register more than one macro handler with the same name");

        return;

     label1:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r4 = $r3.append("Registered ");

        $r5 = r0.getName();

        $r6 = $r4.append($r5);

        $r7 = $r6.append(" macro handler");

        $r8 = $r7.toString();

        org.gjt.sp.util.Log.log(1, class "org/gjt/sp/jedit/Macros", $r8);

        $r9 = org.gjt.sp.jedit.Macros.macroHandlers;

        $r9.add(r0);

        return;
    }

    public static void unregisterHandler(org.gjt.sp.jedit.Macros$Handler)
    {
        org.gjt.sp.jedit.Macros$Handler r0;
        java.util.List $r1;
        boolean $z0;
        java.lang.StringBuilder $r2, $r3, $r5, $r6, $r8, $r9, $r11, $r12;
        java.lang.String $r4, $r7, $r10, $r13;

        r0 := @parameter0;

        $r1 = org.gjt.sp.jedit.Macros.macroHandlers;

        $z0 = $r1.remove(r0);

        if $z0 == 0 goto label1;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<init>();

        $r9 = $r8.append("Unregistered ");

        $r10 = r0.getName();

        $r11 = $r9.append($r10);

        $r12 = $r11.append(" macro handler");

        $r13 = $r12.toString();

        org.gjt.sp.util.Log.log(1, class "org/gjt/sp/jedit/Macros", $r13);

        goto label2;

     label1:
        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<init>();

        $r3 = $r2.append("Cannot unregister ");

        $r4 = r0.getName();

        $r5 = $r3.append($r4);

        $r6 = $r5.append(" macro handler - it is not registered.");

        $r7 = $r6.toString();

        org.gjt.sp.util.Log.log(9, class "org/gjt/sp/jedit/Macros", $r7);

     label2:
        return;
    }

    public static org.gjt.sp.jedit.Macros$Handler[] getHandlers()
    {
        org.gjt.sp.jedit.Macros$Handler[] r0, $r4;
        java.util.List $r1, $r2;
        int $i0;
        java.lang.Object[] $r3;

        $r1 = org.gjt.sp.jedit.Macros.macroHandlers;

        $i0 = $r1.size();

        r0 = newarray (org.gjt.sp.jedit.Macros$Handler)[$i0];

        $r2 = org.gjt.sp.jedit.Macros.macroHandlers;

        $r3 = $r2.toArray(r0);

        $r4 = (org.gjt.sp.jedit.Macros$Handler[]) $r3;

        return $r4;
    }

    public static org.gjt.sp.jedit.Macros$Handler getHandlerForPathName(java.lang.String)
    {
        java.lang.String r0;
        java.util.Iterator r1;
        org.gjt.sp.jedit.Macros$Handler r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @parameter0;

        $r3 = org.gjt.sp.jedit.Macros.macroHandlers;

        r1 = $r3.iterator();

     label1:
        $z0 = r1.hasNext();

        if $z0 == 0 goto label3;

        $r4 = r1.next();

        r2 = (org.gjt.sp.jedit.Macros$Handler) $r4;

        $z1 = r2.accept(r0);

        if $z1 == 0 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static org.gjt.sp.jedit.Macros$Handler getHandler(java.lang.String)
    {
        java.lang.String r0, $r5;
        java.util.Iterator r1;
        org.gjt.sp.jedit.Macros$Handler r2;
        java.util.List $r3;
        boolean $z0, $z1;
        java.lang.Object $r4;

        r0 := @parameter0;

        $r3 = org.gjt.sp.jedit.Macros.macroHandlers;

        r1 = $r3.iterator();

     label1:
        $z0 = r1.hasNext();

        if $z0 == 0 goto label3;

        $r4 = r1.next();

        r2 = (org.gjt.sp.jedit.Macros$Handler) $r4;

        $r5 = r2.getName();

        $z1 = $r5.equals(r0);

        if $z1 == 0 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static java.util.Vector getMacroHierarchy()
    {
        java.util.Vector $r0;

        $r0 = org.gjt.sp.jedit.Macros.macroHierarchy;

        return $r0;
    }

    public static org.gjt.sp.jedit.ActionSet getMacroActionSet()
    {
        org.gjt.sp.jedit.ActionSet $r0;

        $r0 = org.gjt.sp.jedit.Macros.macroActionSet;

        return $r0;
    }

    public static org.gjt.sp.jedit.Macros$Macro getMacro(java.lang.String)
    {
        java.lang.String r0;
        java.util.Map $r1;
        java.lang.Object $r2;
        org.gjt.sp.jedit.Macros$Macro $r3;

        r0 := @parameter0;

        $r1 = org.gjt.sp.jedit.Macros.macroHash;

        $r2 = $r1.get(r0);

        $r3 = (org.gjt.sp.jedit.Macros$Macro) $r2;

        return $r3;
    }

    public static org.gjt.sp.jedit.Macros$Macro getLastMacro()
    {
        org.gjt.sp.jedit.Macros$Macro $r0;

        $r0 = org.gjt.sp.jedit.Macros.lastMacro;

        return $r0;
    }

    public static void setLastMacro(org.gjt.sp.jedit.Macros$Macro)
    {
        org.gjt.sp.jedit.Macros$Macro r0;

        r0 := @parameter0;

        org.gjt.sp.jedit.Macros.lastMacro = r0;

        return;
    }

    public static void recordTemporaryMacro(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.View r0, $r5;
        java.lang.String r1, $r7, $r10, $r11;
        org.gjt.sp.jedit.Buffer r2;
        org.gjt.sp.jedit.Macros$Recorder $r3;
        java.lang.StringBuilder $r4, $r6, $r8, $r9;
        int $i0;
        java.lang.String[] $r12, $r13;

        r0 := @parameter0;

        r1 = org.gjt.sp.jedit.jEdit.getSettingsDirectory();

        if r1 != null goto label1;

        $r13 = newarray (java.lang.String)[0];

        org.gjt.sp.jedit.GUIUtilities.error(r0, "no-settings", $r13);

        return;

     label1:
        $r3 = r0.getMacroRecorder();

        if $r3 == null goto label2;

        $r12 = newarray (java.lang.String)[0];

        org.gjt.sp.jedit.GUIUtilities.error(r0, "already-recording", $r12);

        return;

     label2:
        $r5 = (org.gjt.sp.jedit.View) null;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r6 = $r4.append(r1);

        $r7 = java.io.File.separator;

        $r8 = $r6.append($r7);

        $r9 = $r8.append("macros");

        $r10 = $r9.toString();

        r2 = org.gjt.sp.jedit.jEdit.openFile($r5, $r10, "Temporary_Macro.bsh", 1, null);

        if r2 != null goto label3;

        return;

     label3:
        $i0 = r2.getLength();

        r2.remove(0, $i0);

        $r11 = org.gjt.sp.jedit.jEdit.getProperty("macro.temp.header");

        r2.insert(0, $r11);

        org.gjt.sp.jedit.Macros.recordMacro(r0, r2, 1);

        return;
    }

    public static void recordMacro(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.View r0, $r5;
        java.lang.String r1, $r8, $r9, $r10, r13, r14;
        org.gjt.sp.jedit.Buffer r2;
        org.gjt.sp.jedit.Macros$Recorder $r3;
        java.lang.StringBuilder $r4, $r6, $r7;
        int $i0;
        java.lang.String[] $r11, $r12;

        r0 := @parameter0;

        r1 = org.gjt.sp.jedit.jEdit.getSettingsDirectory();

        if r1 != null goto label1;

        $r12 = newarray (java.lang.String)[0];

        org.gjt.sp.jedit.GUIUtilities.error(r0, "no-settings", $r12);

        return;

     label1:
        $r3 = r0.getMacroRecorder();

        if $r3 == null goto label2;

        $r11 = newarray (java.lang.String)[0];

        org.gjt.sp.jedit.GUIUtilities.error(r0, "already-recording", $r11);

        return;

     label2:
        r13 = org.gjt.sp.jedit.GUIUtilities.input(r0, "record", null);

        if r13 != null goto label3;

        return;

     label3:
        r14 = r13.replace(32, 95);

        $r5 = (org.gjt.sp.jedit.View) null;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r6 = $r4.append(r14);

        $r7 = $r6.append(".bsh");

        $r8 = $r7.toString();

        $r9 = org.gjt.sp.jedit.MiscUtilities.constructPath(r1, "macros", $r8);

        r2 = org.gjt.sp.jedit.jEdit.openFile($r5, null, $r9, 1, null);

        if r2 != null goto label4;

        return;

     label4:
        $i0 = r2.getLength();

        r2.remove(0, $i0);

        $r10 = org.gjt.sp.jedit.jEdit.getProperty("macro.header");

        r2.insert(0, $r10);

        org.gjt.sp.jedit.Macros.recordMacro(r0, r2, 0);

        return;
    }

    public static void stopRecording(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.View r0;
        org.gjt.sp.jedit.Macros$Recorder r1;
        boolean $z0;
        org.gjt.sp.jedit.Buffer $r2;

        r0 := @parameter0;

        r1 = r0.getMacroRecorder();

        if r1 != null goto label1;

        org.gjt.sp.jedit.GUIUtilities.error(r0, "macro-not-recording", null);

        goto label3;

     label1:
        r0.setMacroRecorder(null);

        $z0 = r1.temporary;

        if $z0 != 0 goto label2;

        $r2 = r1.buffer;

        r0.setBuffer($r2);

     label2:
        org.gjt.sp.jedit.Macros$Recorder.access$000(r1);

     label3:
        return;
    }

    public static void runTemporaryMacro(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.View r0;
        java.lang.String r1, r2, $r7;
        org.gjt.sp.jedit.Macros$Handler r3;
        org.gjt.sp.jedit.Macros$Macro r4;
        org.gjt.sp.jedit.Buffer r5, $r8;
        java.lang.Throwable r6, $r9;
        boolean $z0, $z1;

        r0 := @parameter0;

        r1 = org.gjt.sp.jedit.jEdit.getSettingsDirectory();

        if r1 != null goto label1;

        org.gjt.sp.jedit.GUIUtilities.error(r0, "no-settings", null);

        return;

     label1:
        $r7 = org.gjt.sp.jedit.jEdit.getSettingsDirectory();

        r2 = org.gjt.sp.jedit.MiscUtilities.constructPath($r7, "macros", "Temporary_Macro.bsh");

        $r8 = org.gjt.sp.jedit.jEdit.getBuffer(r2);

        if $r8 != null goto label2;

        org.gjt.sp.jedit.GUIUtilities.error(r0, "no-temp-macro", null);

        return;

     label2:
        r3 = org.gjt.sp.jedit.Macros.getHandler("beanshell");

        r4 = r3.createMacro(r2, r2);

        r5 = r0.getBuffer();

     label3:
        r5.beginCompoundEdit();

        r4.invoke(r0);

     label4:
        $z0 = r5.insideCompoundEdit();

        if $z0 == 0 goto label8;

        r5.endCompoundEdit();

        goto label8;

     label5:
        $r9 := @caughtexception;

        r6 = $r9;

     label6:
        $z1 = r5.insideCompoundEdit();

        if $z1 == 0 goto label7;

        r5.endCompoundEdit();

     label7:
        throw r6;

     label8:
        return;

        catch java.lang.Throwable from label3 to label4 with label5;
        catch java.lang.Throwable from label5 to label6 with label5;
    }

    private static void loadMacros(java.util.List, java.lang.String, java.io.File)
    {
        java.util.List r0, r10, r18;
        java.lang.String r1, r6, r7, $r15;
        java.io.File r2, r5;
        java.io.File[] r3, r4;
        int i0, $i1, i2;
        java.util.Iterator r8;
        java.lang.Object r9, $r17;
        boolean $z0, $z1, $z2, $z5, $z6;
        java.lang.StringBuilder $r11, $r12, $r13, $r14;
        java.util.Vector $r16;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        org.gjt.sp.jedit.Macros.lastMacro = null;

        r3 = r2.listFiles();

        if r3 == null goto label01;

        $i1 = lengthof r3;

        if $i1 != 0 goto label02;

     label01:
        return;

     label02:
        r4 = r3;

        i0 = lengthof r4;

(0)     i2 = 0;

     label03:
        r18 = Phi(r18 #0, r18 #10);

        i2 = Phi(i2 #0, i2 #10);

        if i2 >= i0 goto label11;

        r5 = r4[i2];

        r6 = r5.getName();

        $z0 = r5.isHidden();

        if $z0 == 0 goto label04;

(1)     goto label10;

     label04:
        $z1 = r5.isDirectory();

        if $z1 == 0 goto label09;

        r7 = r6.replace(95, 32);

        r18 = null;

(2)     r8 = r0.iterator();

     label05:
        r18 = Phi(r18 #2, r18 #5);

        i2 = Phi(i2 #2, i2 #5);

        $z2 = r8.hasNext();

(3)     if $z2 == 0 goto label07;

        r9 = r8.next();

        $z5 = r9 instanceof java.util.List;

        if $z5 == 0 goto label06;

        r10 = (java.util.List) r9;

        $r17 = r10.get(0);

        $z6 = r7.equals($r17);

        if $z6 == 0 goto label06;

        r18 = r10;

(4)     goto label07;

     label06:
(5)     goto label05;

     label07:
        r18 = Phi(r18 #3, r18 #4);

(6)     if r18 != null goto label08;

        $r16 = new java.util.Vector;

        specialinvoke $r16.<init>();

        r18 = $r16;

        r18.add(r7);

(7)     r0.add(r18);

     label08:
        r18 = Phi(r18 #6, r18 #7);

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<init>();

        $r12 = $r11.append(r1);

        $r13 = $r12.append(r6);

        $r14 = $r13.append(47);

        $r15 = $r14.toString();

        org.gjt.sp.jedit.Macros.loadMacros(r18, $r15, r5);

(8)     goto label10;

     label09:
(9)     org.gjt.sp.jedit.Macros.addMacro(r5, r1, r0);

     label10:
        r18 = Phi(r18 #1, r18 #8, r18 #9);

        i2 = Phi(i2 #1, i2 #8, i2 #9);

        i2 = i2 + 1;

(10)    goto label03;

     label11:
        return;
    }

    private static void addMacro(java.io.File, java.lang.String, java.util.List)
    {
        java.io.File r0;
        java.lang.String r1, r3, $r6, $r10, $r11, $r13, $r15, $r17, $r20, $r21, $r23, $r26, $r28, $r31, $r33, $r36, r40;
        java.util.List r2, $r39;
        org.gjt.sp.jedit.Macros$Handler r4;
        org.gjt.sp.jedit.Macros$Macro r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r16, $r18, $r19, $r22, $r24, $r25, $r27, $r29, $r30, $r32;
        java.util.Map $r12, $r35;
        java.lang.Object $r14;
        org.gjt.sp.jedit.ActionSet $r34;
        java.lang.Exception $r38, r41;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        r3 = r0.getName();

        $r6 = r0.getPath();

        r4 = org.gjt.sp.jedit.Macros.getHandlerForPathName($r6);

        if r4 != null goto label1;

        return;

     label1:
        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<init>();

        $r8 = $r7.append(r1);

        $r9 = $r8.append(r3);

        $r10 = $r9.toString();

        r40 = $r10.replace(32, 95);

        $r11 = r0.getPath();

        r5 = r4.createMacro(r40, $r11);

        $r12 = org.gjt.sp.jedit.Macros.macroHash;

        $r13 = r5.getName();

        $r14 = $r12.get($r13);

        if $r14 == null goto label3;

     label2:
        return;

     label3:
        $r15 = r5.getName();

        r2.add($r15);

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<init>();

        $r17 = r5.getName();

        $r18 = $r16.append($r17);

        $r19 = $r18.append(".label");

        $r20 = $r19.toString();

        $r21 = r5.label;

        org.gjt.sp.jedit.jEdit.setTemporaryProperty($r20, $r21);

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<init>();

        $r23 = r5.getName();

        $r24 = $r22.append($r23);

        $r25 = $r24.append(".mouse-over");

        $r26 = $r25.toString();

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<init>();

        $r28 = r4.getLabel();

        $r29 = $r27.append($r28);

        $r30 = $r29.append(" - ");

        $r31 = r0.getPath();

        $r32 = $r30.append($r31);

        $r33 = $r32.toString();

        org.gjt.sp.jedit.jEdit.setTemporaryProperty($r26, $r33);

        $r34 = org.gjt.sp.jedit.Macros.macroActionSet;

        $r34.addAction(r5);

        $r35 = org.gjt.sp.jedit.Macros.macroHash;

        $r36 = r5.getName();

        $r35.put($r36, r5);

     label4:
        goto label6;

     label5:
        $r38 := @caughtexception;

        r41 = $r38;

        org.gjt.sp.util.Log.log(9, class "org/gjt/sp/jedit/Macros", r41);

        $r39 = org.gjt.sp.jedit.Macros.macroHandlers;

        $r39.remove(r4);

     label6:
        return;

        catch java.lang.Exception from label1 to label2 with label5;
        catch java.lang.Exception from label3 to label4 with label5;
    }

    private static void recordMacro(org.gjt.sp.jedit.View, org.gjt.sp.jedit.Buffer, boolean)
    {
        org.gjt.sp.jedit.View r0;
        org.gjt.sp.jedit.Buffer r1;
        boolean z0;
        org.gjt.sp.jedit.Macros$Recorder $r2;
        org.gjt.sp.jedit.gui.StatusBar $r3;

        r0 := @parameter0;

        r1 := @parameter1;

        z0 := @parameter2;

        $r2 = new org.gjt.sp.jedit.Macros$Recorder;

        specialinvoke $r2.<init>(r0, r1, z0);

        r0.setMacroRecorder($r2);

        $r3 = r0.getStatus();

        $r3.setMessage(null);

        return;
    }

    static void <clinit>()
    {
        java.util.ArrayList $r0;
        org.gjt.sp.jedit.Macros$BeanShellHandler $r1;
        org.gjt.sp.jedit.ActionSet $r2, $r4;
        java.lang.String $r3;
        java.util.Vector $r5;
        java.util.Hashtable $r6;

        $r0 = new java.util.ArrayList;

        specialinvoke $r0.<init>();

        org.gjt.sp.jedit.Macros.macroHandlers = $r0;

        $r1 = new org.gjt.sp.jedit.Macros$BeanShellHandler;

        specialinvoke $r1.<init>();

        org.gjt.sp.jedit.Macros.registerHandler($r1);

        $r2 = new org.gjt.sp.jedit.ActionSet;

        $r3 = org.gjt.sp.jedit.jEdit.getProperty("action-set.macros");

        specialinvoke $r2.<init>($r3);

        org.gjt.sp.jedit.Macros.macroActionSet = $r2;

        $r4 = org.gjt.sp.jedit.Macros.macroActionSet;

        org.gjt.sp.jedit.jEdit.addActionSet($r4);

        $r5 = new java.util.Vector;

        specialinvoke $r5.<init>();

        org.gjt.sp.jedit.Macros.macroHierarchy = $r5;

        $r6 = new java.util.Hashtable;

        specialinvoke $r6.<init>();

        org.gjt.sp.jedit.Macros.macroHash = $r6;

        return;
    }
}
