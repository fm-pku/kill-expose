public class org.gjt.sp.jedit.bsh.classpath.BshClassPath extends java.lang.Object implements org.gjt.sp.jedit.bsh.classpath.ClassPathListener, org.gjt.sp.jedit.bsh.NameSource
{
    java.lang.String name;
    private java.util.List path;
    private java.util.List compPaths;
    private java.util.Map packageMap;
    private java.util.Map classSource;
    private boolean mapsInitialized;
    private org.gjt.sp.jedit.bsh.classpath.BshClassPath$UnqualifiedNameTable unqNameTable;
    private boolean nameCompletionIncludesUnqNames;
    java.util.Vector listeners;
    static java.net.URL[] userClassPathComp;
    static org.gjt.sp.jedit.bsh.classpath.BshClassPath userClassPath;
    static org.gjt.sp.jedit.bsh.classpath.BshClassPath bootClassPath;
    java.util.List nameSourceListeners;
    static org.gjt.sp.jedit.bsh.classpath.BshClassPath$MappingFeedback mappingFeedbackListener;

    public void <init>(java.lang.String)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.lang.String r1;
        java.util.Vector $r2;

        r0 := @this;

        r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.nameCompletionIncludesUnqNames = 1;

        $r2 = new java.util.Vector;

        specialinvoke $r2.<init>();

        r0.listeners = $r2;

        r0.name = r1;

        specialinvoke r0.reset();

        return;
    }

    public void <init>(java.lang.String, java.net.URL[])
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.lang.String r1;
        java.net.URL[] r2;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        specialinvoke r0.<init>(r1);

        r0.add(r2);

        return;
    }

    public void setPath(java.net.URL[])
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.net.URL[] r1;

        r0 := @this;

        r1 := @parameter0;

        specialinvoke r0.reset();

        r0.add(r1);

        return;
    }

    public void addComponent(org.gjt.sp.jedit.bsh.classpath.BshClassPath)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0, r1;
        java.util.List $r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.compPaths;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<init>();

        r0.compPaths = $r4;

     label1:
        $r3 = r0.compPaths;

        $r3.add(r1);

        r1.addListener(r0);

        return;
    }

    public void add(java.net.URL[])
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.net.URL[] r1;
        java.util.List $r2, $r3;
        boolean $z1;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.path;

        $r3 = java.util.Arrays.asList(r1);

        $r2.addAll($r3);

        $z1 = r0.mapsInitialized;

        if $z1 == 0 goto label1;

        r0.map(r1);

     label1:
        return;
    }

    public void add(java.net.URL) throws java.io.IOException
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.net.URL r1;
        java.util.List $r2;
        boolean $z1;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.path;

        $r2.add(r1);

        $z1 = r0.mapsInitialized;

        if $z1 == 0 goto label1;

        r0.map(r1);

     label1:
        return;
    }

    public java.net.URL[] getPathComponents()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.util.List $r1;
        java.net.URL[] $r2, $r4, $r5;
        java.lang.Object[] $r3;

        r0 := @this;

        $r1 = r0.getFullPath();

        $r2 = newarray (java.net.URL)[0];

        $r3 = $r1.toArray($r2);

        $r4 = (java.net.URL[]) $r3;

        $r5 = (java.net.URL[]) $r4;

        return $r5;
    }

    public synchronized java.util.Set getClassesForPackage(java.lang.String)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0, $r10;
        java.lang.String r1;
        java.util.HashSet r2, $r3;
        java.util.Map $r4;
        java.lang.Object $r5, $r9;
        java.util.List $r6, $r7, $r8;
        int $i0, i1;
        java.util.Collection r11;
        java.util.Set r12;

        r0 := @this;

        r1 := @parameter0;

        r0.insureInitialized();

        $r3 = new java.util.HashSet;

        specialinvoke $r3.<init>();

        r2 = $r3;

        $r4 = r0.packageMap;

        $r5 = $r4.get(r1);

        r11 = (java.util.Collection) $r5;

        if r11 == null goto label1;

        r2.addAll(r11);

     label1:
        $r6 = r0.compPaths;

(0)     if $r6 == null goto label4;

(1)     i1 = 0;

     label2:
        i1 = Phi(i1 #1, i1 #3);

        $r7 = r0.compPaths;

        $i0 = $r7.size();

(2)     if i1 >= $i0 goto label4;

        $r8 = r0.compPaths;

        $r9 = $r8.get(i1);

        $r10 = (org.gjt.sp.jedit.bsh.classpath.BshClassPath) $r9;

        r12 = $r10.getClassesForPackage(r1);

        if r12 == null goto label3;

        r2.addAll(r12);

     label3:
        i1 = i1 + 1;

(3)     goto label2;

     label4:
        i1 = Phi(i1 #0, i1 #2);

        return r2;
    }

    public synchronized org.gjt.sp.jedit.bsh.classpath.BshClassPath$ClassSource getClassSource(java.lang.String)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0, $r10;
        java.lang.String r1;
        java.util.Map $r2, $r4;
        java.lang.Object $r3, $r5, $r9;
        java.util.List $r6, $r7, $r8;
        int $i0, i1;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$ClassSource r11, r12;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.classSource;

        $r3 = $r2.get(r1);

        r11 = (org.gjt.sp.jedit.bsh.classpath.BshClassPath$ClassSource) $r3;

        if r11 == null goto label1;

        return r11;

     label1:
        r0.insureInitialized();

        $r4 = r0.classSource;

        $r5 = $r4.get(r1);

        r12 = (org.gjt.sp.jedit.bsh.classpath.BshClassPath$ClassSource) $r5;

(0)     if r12 != null goto label3;

        $r6 = r0.compPaths;

(1)     if $r6 == null goto label3;

(2)     i1 = 0;

     label2:
        i1 = Phi(i1 #2, i1 #5);

        r12 = Phi(r12 #2, r12 #5);

        $r7 = r0.compPaths;

        $i0 = $r7.size();

(3)     if i1 >= $i0 goto label3;

(4)     if r12 != null goto label3;

        $r8 = r0.compPaths;

        $r9 = $r8.get(i1);

        $r10 = (org.gjt.sp.jedit.bsh.classpath.BshClassPath) $r9;

        r12 = $r10.getClassSource(r1);

        i1 = i1 + 1;

(5)     goto label2;

     label3:
        i1 = Phi(i1 #0, i1 #1, i1 #3, i1 #4);

        r12 = Phi(r12 #0, r12 #1, r12 #3, r12 #4);

        return r12;
    }

    public synchronized void setClassSource(java.lang.String, org.gjt.sp.jedit.bsh.classpath.BshClassPath$ClassSource)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.lang.String r1;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$ClassSource r2;
        java.util.Map $r3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r3 = r0.classSource;

        $r3.put(r1, r2);

        return;
    }

    public void insureInitialized()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;

        r0 := @this;

        r0.insureInitialized(1);

        return;
    }

    protected synchronized void insureInitialized(boolean)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0, $r10;
        boolean z0, $z1, $z2, $z3;
        java.util.List $r1, $r3, $r7, $r8;
        java.net.URL[] $r2, $r5, $r6;
        java.lang.Object[] $r4;
        int $i0, i1;
        java.lang.Object $r9;

        r0 := @this;

        z0 := @parameter0;

        if z0 == 0 goto label1;

        $z3 = r0.mapsInitialized;

        if $z3 != 0 goto label1;

        r0.startClassMapping();

     label1:
        $r1 = r0.compPaths;

(0)     if $r1 == null goto label3;

(1)     i1 = 0;

     label2:
        i1 = Phi(i1 #1, i1 #3);

        $r7 = r0.compPaths;

        $i0 = $r7.size();

(2)     if i1 >= $i0 goto label3;

        $r8 = r0.compPaths;

        $r9 = $r8.get(i1);

        $r10 = (org.gjt.sp.jedit.bsh.classpath.BshClassPath) $r9;

        $r10.insureInitialized(0);

        i1 = i1 + 1;

(3)     goto label2;

     label3:
        i1 = Phi(i1 #0, i1 #2);

        $z1 = r0.mapsInitialized;

        if $z1 != 0 goto label4;

        $r3 = r0.path;

        $r2 = newarray (java.net.URL)[0];

        $r4 = $r3.toArray($r2);

        $r5 = (java.net.URL[]) $r4;

        $r6 = (java.net.URL[]) $r5;

        r0.map($r6);

     label4:
        if z0 == 0 goto label5;

        $z2 = r0.mapsInitialized;

        if $z2 != 0 goto label5;

        r0.endClassMapping();

     label5:
        r0.mapsInitialized = 1;

        return;
    }

    protected java.util.List getFullPath()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0, $r11;
        java.util.ArrayList r1, $r5;
        java.util.List r2, $r6, $r7, $r8, $r9;
        java.util.Iterator r3;
        java.lang.Object r4, $r10;
        int $i0, i1;
        boolean $z1, $z2;

        r0 := @this;

        $r5 = new java.util.ArrayList;

        specialinvoke $r5.<init>();

        r1 = $r5;

        $r6 = r0.compPaths;

(0)     if $r6 == null goto label5;

(1)     i1 = 0;

     label1:
        i1 = Phi(i1 #1, i1 #5);

        $r8 = r0.compPaths;

        $i0 = $r8.size();

(2)     if i1 >= $i0 goto label5;

        $r9 = r0.compPaths;

        $r10 = $r9.get(i1);

        $r11 = (org.gjt.sp.jedit.bsh.classpath.BshClassPath) $r10;

        r2 = $r11.getFullPath();

(3)     r3 = r2.iterator();

     label2:
        i1 = Phi(i1 #3, i1 #4);

        $z1 = r3.hasNext();

        if $z1 == 0 goto label4;

        r4 = r3.next();

        $z2 = r1.contains(r4);

        if $z2 != 0 goto label3;

        r1.add(r4);

     label3:
(4)     goto label2;

     label4:
        i1 = i1 + 1;

(5)     goto label1;

     label5:
        i1 = Phi(i1 #0, i1 #2);

        $r7 = r0.path;

        r1.addAll($r7);

        return r1;
    }

    public java.lang.String getClassNameByUnqName(java.lang.String) throws org.gjt.sp.jedit.bsh.ClassPathException
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.lang.String r1, $r4, $r11;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$UnqualifiedNameTable r2;
        java.lang.Object r3;
        boolean $z0;
        org.gjt.sp.jedit.bsh.ClassPathException $r5;
        java.lang.StringBuilder $r6, $r7, $r10;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$AmbiguousName $r8;
        java.util.List $r9;

        r0 := @this;

        r1 := @parameter0;

        r0.insureInitialized();

        r2 = specialinvoke r0.getUnqualifiedNameTable();

        r3 = r2.get(r1);

        $z0 = r3 instanceof org.gjt.sp.jedit.bsh.classpath.BshClassPath$AmbiguousName;

        if $z0 == 0 goto label1;

        $r5 = new org.gjt.sp.jedit.bsh.ClassPathException;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<init>();

        $r7 = $r6.append("Ambigous class names: ");

        $r8 = (org.gjt.sp.jedit.bsh.classpath.BshClassPath$AmbiguousName) r3;

        $r9 = $r8.get();

        $r10 = $r7.append($r9);

        $r11 = $r10.toString();

        specialinvoke $r5.<init>($r11);

        throw $r5;

     label1:
        $r4 = (java.lang.String) r3;

        return $r4;
    }

    private org.gjt.sp.jedit.bsh.classpath.BshClassPath$UnqualifiedNameTable getUnqualifiedNameTable()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$UnqualifiedNameTable $r1, $r2, $r3;

        r0 := @this;

        $r1 = r0.unqNameTable;

        if $r1 != null goto label1;

        $r3 = specialinvoke r0.buildUnqualifiedNameTable();

        r0.unqNameTable = $r3;

     label1:
        $r2 = r0.unqNameTable;

        return $r2;
    }

    private org.gjt.sp.jedit.bsh.classpath.BshClassPath$UnqualifiedNameTable buildUnqualifiedNameTable()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0, $r13;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$UnqualifiedNameTable r1, $r4;
        java.util.Set r2, $r7;
        java.util.Iterator r3, r17;
        java.util.List $r5, $r10, $r11;
        java.util.Map $r6, $r14;
        boolean $z0, $z1;
        java.lang.Object $r8, $r12, $r15;
        java.lang.String $r9, $r16;
        int $i0, i1;

        r0 := @this;

        $r4 = new org.gjt.sp.jedit.bsh.classpath.BshClassPath$UnqualifiedNameTable;

        specialinvoke $r4.<init>();

        r1 = $r4;

        $r5 = r0.compPaths;

(0)     if $r5 == null goto label4;

(1)     i1 = 0;

     label1:
        i1 = Phi(i1 #1, i1 #5);

        $r10 = r0.compPaths;

        $i0 = $r10.size();

(2)     if i1 >= $i0 goto label4;

        $r11 = r0.compPaths;

        $r12 = $r11.get(i1);

        $r13 = (org.gjt.sp.jedit.bsh.classpath.BshClassPath) $r12;

        $r14 = $r13.classSource;

        r2 = $r14.keySet();

(3)     r3 = r2.iterator();

     label2:
        i1 = Phi(i1 #3, i1 #4);

        $z1 = r3.hasNext();

        if $z1 == 0 goto label3;

        $r15 = r3.next();

        $r16 = (java.lang.String) $r15;

        r1.add($r16);

(4)     goto label2;

     label3:
        i1 = i1 + 1;

(5)     goto label1;

     label4:
        i1 = Phi(i1 #0, i1 #2);

        $r6 = r0.classSource;

        $r7 = $r6.keySet();

(6)     r17 = $r7.iterator();

     label5:
        i1 = Phi(i1 #6, i1 #7);

        $z0 = r17.hasNext();

        if $z0 == 0 goto label6;

        $r8 = r17.next();

        $r9 = (java.lang.String) $r8;

        r1.add($r9);

(7)     goto label5;

     label6:
        return r1;
    }

    public java.lang.String[] getAllNames()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        java.lang.String r3;
        java.util.Set $r5, $r11, $r13;
        boolean $z0, $z1;
        java.lang.String[] $r6, $r8, $r9;
        java.lang.Object[] $r7;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$UnqualifiedNameTable $r10;
        java.lang.Object $r12;
        java.util.Collection $r14;

        r0 := @this;

        r0.insureInitialized();

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<init>();

        r1 = $r4;

        $r5 = r0.getPackagesSet();

        r2 = $r5.iterator();

     label1:
        $z0 = r2.hasNext();

        if $z0 == 0 goto label2;

        $r12 = r2.next();

        r3 = (java.lang.String) $r12;

        $r13 = r0.getClassesForPackage(r3);

        $r14 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.removeInnerClassNames($r13);

        r1.addAll($r14);

        goto label1;

     label2:
        $z1 = r0.nameCompletionIncludesUnqNames;

        if $z1 == 0 goto label3;

        $r10 = specialinvoke r0.getUnqualifiedNameTable();

        $r11 = $r10.keySet();

        r1.addAll($r11);

     label3:
        $r6 = newarray (java.lang.String)[0];

        $r7 = r1.toArray($r6);

        $r8 = (java.lang.String[]) $r7;

        $r9 = (java.lang.String[]) $r8;

        return $r9;
    }

    synchronized void map(java.net.URL[])
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.net.URL[] r1;
        java.io.IOException r2, $r5;
        java.lang.String r3;
        int $i0, i1;
        java.net.URL $r4, $r8;
        java.lang.StringBuilder $r6, $r7, $r9, $r10, $r11;

        r0 := @this;

        r1 := @parameter0;

(0)     i1 = 0;

     label1:
        i1 = Phi(i1 #0, i1 #1);

        $i0 = lengthof r1;

        if i1 >= $i0 goto label6;

     label2:
        $r4 = r1[i1];

        r0.map($r4);

     label3:
        goto label5;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<init>();

        $r7 = $r6.append("Error constructing classpath: ");

        $r8 = r1[i1];

        $r9 = $r7.append($r8);

        $r10 = $r9.append(": ");

        $r11 = $r10.append(r2);

        r3 = $r11.toString();

        r0.errorWhileMapping(r3);

     label5:
        i1 = i1 + 1;

(1)     goto label1;

     label6:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    synchronized void map(java.net.URL) throws java.io.IOException
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.net.URL r1;
        java.lang.String r2, r4, $r12, $r17, $r19;
        java.io.File r3, $r5;
        boolean $z0, $z1;
        java.lang.StringBuilder $r6, $r7, $r8, $r9, $r10, $r11, $r15, $r16, $r18;
        java.lang.String[] $r13, $r20;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$JarClassSource $r14;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$DirClassSource $r21;

        r0 := @this;

        r1 := @parameter0;

        r2 = r1.getFile();

        $r5 = new java.io.File;

        specialinvoke $r5.<init>(r2);

        r3 = $r5;

        $z0 = r3.isDirectory();

        if $z0 == 0 goto label1;

        $r15 = new java.lang.StringBuilder;

        specialinvoke $r15.<init>();

        $r16 = $r15.append("Directory ");

        $r17 = r3.toString();

        $r18 = $r16.append($r17);

        $r19 = $r18.toString();

        r0.classMapping($r19);

        $r20 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.traverseDirForClasses(r3);

        $r21 = new org.gjt.sp.jedit.bsh.classpath.BshClassPath$DirClassSource;

        specialinvoke $r21.<init>(r3);

        specialinvoke r0.map($r20, $r21);

        goto label3;

     label1:
        $z1 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.isArchiveFileName(r2);

        if $z1 == 0 goto label2;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<init>();

        $r10 = $r9.append("Archive: ");

        $r11 = $r10.append(r1);

        $r12 = $r11.toString();

        r0.classMapping($r12);

        $r13 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.searchJarForClasses(r1);

        $r14 = new org.gjt.sp.jedit.bsh.classpath.BshClassPath$JarClassSource;

        specialinvoke $r14.<init>(r1);

        specialinvoke r0.map($r13, $r14);

        goto label3;

     label2:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<init>();

        $r7 = $r6.append("Not a classpath component: ");

        $r8 = $r7.append(r2);

        r4 = $r8.toString();

        r0.errorWhileMapping(r4);

     label3:
        return;
    }

    private void map(java.lang.String[], java.lang.Object)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.lang.String[] r1;
        java.lang.Object r2;
        int $i0, i1;
        java.lang.String $r3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

(0)     i1 = 0;

     label1:
        i1 = Phi(i1 #0, i1 #1);

        $i0 = lengthof r1;

        if i1 >= $i0 goto label2;

        $r3 = r1[i1];

        specialinvoke r0.mapClass($r3, r2);

        i1 = i1 + 1;

(1)     goto label1;

     label2:
        return;
    }

    private void mapClass(java.lang.String, java.lang.Object)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.lang.String r1, r4, r5;
        java.lang.Object r2, r6, $r8;
        java.lang.String[] r3;
        java.util.Map $r7, $r9, $r10, $r13;
        java.util.HashSet $r12;
        java.util.Set r15, r15_1, r15_2;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.splitClassname(r1);

        r4 = r3[0];

        r5 = r3[1];

        $r7 = r0.packageMap;

        $r8 = $r7.get(r4);

        r15 = (java.util.Set) $r8;

(0)     if r15 != null goto label1;

        $r12 = new java.util.HashSet;

        specialinvoke $r12.<init>();

        r15_1 = $r12;

        $r13 = r0.packageMap;

(1)     $r13.put(r4, r15_1);

     label1:
        r15_2 = Phi(r15 #0, r15_1 #1);

        r15_2.add(r1);

        $r9 = r0.classSource;

        r6 = $r9.get(r1);

        if r6 != null goto label2;

        $r10 = r0.classSource;

        $r10.put(r1, r2);

     label2:
        return;
    }

    private synchronized void reset()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.util.ArrayList $r1;

        r0 := @this;

        $r1 = new java.util.ArrayList;

        specialinvoke $r1.<init>();

        r0.path = $r1;

        r0.compPaths = null;

        specialinvoke r0.clearCachedStructures();

        return;
    }

    private synchronized void clearCachedStructures()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.util.HashMap $r1, $r2;

        r0 := @this;

        r0.mapsInitialized = 0;

        $r1 = new java.util.HashMap;

        specialinvoke $r1.<init>();

        r0.packageMap = $r1;

        $r2 = new java.util.HashMap;

        specialinvoke $r2.<init>();

        r0.classSource = $r2;

        r0.unqNameTable = null;

        r0.nameSpaceChanged();

        return;
    }

    public void classPathChanged()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;

        r0 := @this;

        specialinvoke r0.clearCachedStructures();

        r0.notifyListeners();

        return;
    }

    static java.lang.String[] traverseDirForClasses(java.io.File) throws java.io.IOException
    {
        java.io.File r0;
        java.util.List r1;
        java.lang.String[] $r2, $r4, $r5;
        java.lang.Object[] $r3;

        r0 := @parameter0;

        r1 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.traverseDirForClassesAux(r0, r0);

        $r2 = newarray (java.lang.String)[0];

        $r3 = r1.toArray($r2);

        $r4 = (java.lang.String[]) $r3;

        $r5 = (java.lang.String[]) $r4;

        return $r5;
    }

    static java.util.List traverseDirForClassesAux(java.io.File, java.io.File) throws java.io.IOException
    {
        java.io.File r0, r1, r5;
        java.util.ArrayList r2, $r6;
        java.lang.String r3, r9, r10, r11;
        java.io.File[] r4;
        int $i0, $i1, $i2, i3;
        boolean $z0, $z1, $z2;
        java.io.IOException $r7;
        java.util.List $r8;

        r0 := @parameter0;

        r1 := @parameter1;

        $r6 = new java.util.ArrayList;

        specialinvoke $r6.<init>();

        r2 = $r6;

        r3 = r0.getAbsolutePath();

        r4 = r1.listFiles();

(0)     i3 = 0;

     label1:
        i3 = Phi(i3 #0, i3 #1);

        $i0 = lengthof r4;

        if i3 >= $i0 goto label6;

        r5 = r4[i3];

        $z0 = r5.isDirectory();

        if $z0 == 0 goto label2;

        $r8 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.traverseDirForClassesAux(r0, r5);

        r2.addAll($r8);

        goto label5;

     label2:
        r9 = r5.getAbsolutePath();

        $z1 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.isClassFileName(r9);

        if $z1 == 0 goto label5;

        $z2 = r9.startsWith(r3);

        if $z2 == 0 goto label3;

        $i1 = r3.length();

        $i2 = $i1 + 1;

        r10 = r9.substring($i2);

        goto label4;

     label3:
        $r7 = new java.io.IOException;

        specialinvoke $r7.<init>("problem parsing paths");

        throw $r7;

     label4:
        r11 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.canonicalizeClassName(r10);

        r2.add(r11);

     label5:
        i3 = i3 + 1;

(1)     goto label1;

     label6:
        return r2;
    }

    static java.lang.String[] searchJarForClasses(java.net.URL) throws java.io.IOException
    {
        java.net.URL r0;
        java.util.Vector r1, $r5;
        java.io.InputStream r2;
        java.util.zip.ZipInputStream r3, $r6;
        java.util.zip.ZipEntry r4, $r7;
        int $i0;
        boolean $z0;
        java.lang.String $r8, r9;
        java.lang.String[] r10;

        r0 := @parameter0;

        $r5 = new java.util.Vector;

        specialinvoke $r5.<init>();

        r1 = $r5;

        r2 = r0.openStream();

        $r6 = new java.util.zip.ZipInputStream;

        specialinvoke $r6.<init>(r2);

        r3 = $r6;

     label1:
        $r7 = r3.getNextEntry();

        r4 = $r7;

        if $r7 == null goto label3;

        r9 = r4.getName();

        $z0 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.isClassFileName(r9);

        if $z0 == 0 goto label2;

        $r8 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.canonicalizeClassName(r9);

        r1.addElement($r8);

     label2:
        goto label1;

     label3:
        r3.close();

        $i0 = r1.size();

        r10 = newarray (java.lang.String)[$i0];

        r1.copyInto(r10);

        return r10;
    }

    public static boolean isClassFileName(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;

        r0 := @parameter0;

        $r1 = r0.toLowerCase();

        $z0 = $r1.endsWith(".class");

        return $z0;
    }

    public static boolean isArchiveFileName(java.lang.String)
    {
        boolean $z0, $z1, $z2, $z2_1, $z2_2;
        java.lang.String r0, r1;

        r0 := @parameter0;

        r1 = r0.toLowerCase();

        $z0 = r1.endsWith(".jar");

        if $z0 != 0 goto label1;

        $z1 = r1.endsWith(".zip");

        if $z1 == 0 goto label2;

     label1:
        $z2_1 = 1;

(0)     goto label3;

     label2:
(1)     $z2 = 0;

     label3:
        $z2_2 = Phi($z2_1 #0, $z2 #1);

        return $z2_2;
    }

    public static java.lang.String canonicalizeClassName(java.lang.String)
    {
        java.lang.String r0, r1, r2, r2_1, r2_2, r2_3, r2_4;
        boolean $z0, $z1;
        int $i0, $i1;

        r0 := @parameter0;

        r1 = r0.replace(47, 46);

        r2 = r1.replace(92, 46);

        $z0 = r2.startsWith("class ");

(0)     if $z0 == 0 goto label1;

(1)     r2_1 = r2.substring(6);

     label1:
        r2_2 = Phi(r2 #0, r2_1 #1);

        $z1 = r2_2.endsWith(".class");

(2)     if $z1 == 0 goto label2;

        $i0 = r2_2.length();

        $i1 = $i0 - 6;

(3)     r2_3 = r2_2.substring(0, $i1);

     label2:
        r2_4 = Phi(r2_2 #2, r2_3 #3);

        return r2_4;
    }

    public static java.lang.String[] splitClassname(java.lang.String)
    {
        int i0, $i1;
        java.lang.String[] $r0;
        java.lang.String r1, r2, r3, r4, r4_1, r3_1, r4_2, r3_2;

        r1 := @parameter0;

        r2 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.canonicalizeClassName(r1);

        i0 = r2.lastIndexOf(".");

        if i0 != -1 goto label1;

        r3 = r2;

        r4 = "<unpackaged>";

(0)     goto label2;

     label1:
        r4_1 = r2.substring(0, i0);

        $i1 = i0 + 1;

(1)     r3_1 = r2.substring($i1);

     label2:
        r4_2 = Phi(r4 #0, r4_1 #1);

        r3_2 = Phi(r3 #0, r3_1 #1);

        $r0 = newarray (java.lang.String)[2];

        $r0[0] = r4_2;

        $r0[1] = r3_2;

        return $r0;
    }

    public static java.util.Collection removeInnerClassNames(java.util.Collection)
    {
        java.util.Collection r0;
        java.util.ArrayList r1, $r4;
        java.util.Iterator r2;
        java.lang.String r3;
        boolean $z1;
        java.lang.Object $r5;
        int $i0;

        r0 := @parameter0;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<init>();

        r1 = $r4;

        r1.addAll(r0);

        r2 = r1.iterator();

     label1:
        $z1 = r2.hasNext();

        if $z1 == 0 goto label3;

        $r5 = r2.next();

        r3 = (java.lang.String) $r5;

        $i0 = r3.indexOf("$");

        if $i0 == -1 goto label2;

        r2.remove();

     label2:
        goto label1;

     label3:
        return r1;
    }

    public static java.net.URL[] getUserClassPathComponents() throws org.gjt.sp.jedit.bsh.ClassPathException
    {
        java.lang.String r0, $r4, $r7, $r8, $r16;
        java.lang.String[] r1;
        java.net.URL[] r2, $r3, $r10;
        int $i0, $i1, i2;
        java.io.File $r5, $r6;
        java.net.URL $r9;
        java.io.IOException $r11, r17;
        org.gjt.sp.jedit.bsh.ClassPathException $r12;
        java.lang.StringBuilder $r13, $r14, $r15;

        $r3 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.userClassPathComp;

        if $r3 == null goto label1;

        $r10 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.userClassPathComp;

        return $r10;

     label1:
        r0 = java.lang.System.getProperty("java.class.path");

        $r4 = java.io.File.pathSeparator;

        r1 = org.gjt.sp.jedit.bsh.StringUtil.split(r0, $r4);

        $i0 = lengthof r1;

        r2 = newarray (java.net.URL)[$i0];

     label2:
(0)     i2 = 0;

     label3:
        i2 = Phi(i2 #0, i2 #1);

        $i1 = lengthof r1;

        if i2 >= $i1 goto label4;

        $r5 = new java.io.File;

        $r6 = new java.io.File;

        $r7 = r1[i2];

        specialinvoke $r6.<init>($r7);

        $r8 = $r6.getCanonicalPath();

        specialinvoke $r5.<init>($r8);

        $r9 = $r5.toURL();

        r2[i2] = $r9;

        i2 = i2 + 1;

(1)     goto label3;

     label4:
        goto label6;

     label5:
        $r11 := @caughtexception;

        r17 = $r11;

        $r12 = new org.gjt.sp.jedit.bsh.ClassPathException;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<init>();

        $r14 = $r13.append("can\'t parse class path: ");

        $r15 = $r14.append(r17);

        $r16 = $r15.toString();

        specialinvoke $r12.<init>($r16);

        throw $r12;

     label6:
        org.gjt.sp.jedit.bsh.classpath.BshClassPath.userClassPathComp = r2;

        return r2;

        catch java.io.IOException from label2 to label4 with label5;
    }

    public java.util.Set getPackagesSet()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0, $r9;
        java.util.HashSet r1, $r2;
        java.util.Map $r3, $r10;
        java.util.Set $r4, $r11;
        java.util.List $r5, $r6, $r7;
        int $i0, i1;
        java.lang.Object $r8;

        r0 := @this;

        r0.insureInitialized();

        $r2 = new java.util.HashSet;

        specialinvoke $r2.<init>();

        r1 = $r2;

        $r3 = r0.packageMap;

        $r4 = $r3.keySet();

        r1.addAll($r4);

        $r5 = r0.compPaths;

(0)     if $r5 == null goto label2;

(1)     i1 = 0;

     label1:
        i1 = Phi(i1 #1, i1 #3);

        $r6 = r0.compPaths;

        $i0 = $r6.size();

(2)     if i1 >= $i0 goto label2;

        $r7 = r0.compPaths;

        $r8 = $r7.get(i1);

        $r9 = (org.gjt.sp.jedit.bsh.classpath.BshClassPath) $r8;

        $r10 = $r9.packageMap;

        $r11 = $r10.keySet();

        r1.addAll($r11);

        i1 = i1 + 1;

(3)     goto label1;

     label2:
        i1 = Phi(i1 #0, i1 #2);

        return r1;
    }

    public void addListener(org.gjt.sp.jedit.bsh.classpath.ClassPathListener)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        org.gjt.sp.jedit.bsh.classpath.ClassPathListener r1;
        java.lang.ref.WeakReference $r2;
        java.util.Vector $r3;

        r0 := @this;

        r1 := @parameter0;

        $r3 = r0.listeners;

        $r2 = new java.lang.ref.WeakReference;

        specialinvoke $r2.<init>(r1);

        $r3.addElement($r2);

        return;
    }

    public void removeListener(org.gjt.sp.jedit.bsh.classpath.ClassPathListener)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        org.gjt.sp.jedit.bsh.classpath.ClassPathListener r1;
        java.util.Vector $r2;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.listeners;

        $r2.removeElement(r1);

        return;
    }

    void notifyListeners()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.util.Enumeration r1;
        java.lang.ref.WeakReference r2;
        org.gjt.sp.jedit.bsh.classpath.ClassPathListener r3;
        java.util.Vector $r4, $r7;
        boolean $z0;
        java.lang.Object $r5, $r6;

        r0 := @this;

        $r4 = r0.listeners;

        r1 = $r4.elements();

     label1:
        $z0 = r1.hasMoreElements();

        if $z0 == 0 goto label4;

        $r5 = r1.nextElement();

        r2 = (java.lang.ref.WeakReference) $r5;

        $r6 = r2.get();

        r3 = (org.gjt.sp.jedit.bsh.classpath.ClassPathListener) $r6;

        if r3 != null goto label2;

        $r7 = r0.listeners;

        $r7.removeElement(r2);

        goto label3;

     label2:
        r3.classPathChanged();

     label3:
        goto label1;

     label4:
        return;
    }

    public static org.gjt.sp.jedit.bsh.classpath.BshClassPath getUserClassPath() throws org.gjt.sp.jedit.bsh.ClassPathException
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath $r0, $r1, $r2;
        java.net.URL[] $r3;

        $r0 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.userClassPath;

        if $r0 != null goto label1;

        $r2 = new org.gjt.sp.jedit.bsh.classpath.BshClassPath;

        $r3 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.getUserClassPathComponents();

        specialinvoke $r2.<init>("User Class Path", $r3);

        org.gjt.sp.jedit.bsh.classpath.BshClassPath.userClassPath = $r2;

     label1:
        $r1 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.userClassPath;

        return $r1;
    }

    public static org.gjt.sp.jedit.bsh.classpath.BshClassPath getBootClassPath() throws org.gjt.sp.jedit.bsh.ClassPathException
    {
        java.net.URL r0;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath $r1, $r2, $r4;
        java.io.File $r3;
        java.net.URL[] $r5;
        java.net.MalformedURLException $r6, r13;
        org.gjt.sp.jedit.bsh.ClassPathException $r7;
        java.lang.StringBuilder $r8, $r9, $r10;
        java.lang.String $r11, r12;

        $r1 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.bootClassPath;

        if $r1 != null goto label4;

     label1:
        r12 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.getRTJarPath();

        $r3 = new java.io.File;

        specialinvoke $r3.<init>(r12);

        r0 = $r3.toURL();

        $r4 = new org.gjt.sp.jedit.bsh.classpath.BshClassPath;

        $r5 = newarray (java.net.URL)[1];

        $r5[0] = r0;

        specialinvoke $r4.<init>("Boot Class Path", $r5);

        org.gjt.sp.jedit.bsh.classpath.BshClassPath.bootClassPath = $r4;

     label2:
        goto label4;

     label3:
        $r6 := @caughtexception;

        r13 = $r6;

        $r7 = new org.gjt.sp.jedit.bsh.ClassPathException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<init>();

        $r9 = $r8.append(" can\'t find boot jar: ");

        $r10 = $r9.append(r13);

        $r11 = $r10.toString();

        specialinvoke $r7.<init>($r11);

        throw $r7;

     label4:
        $r2 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.bootClassPath;

        return $r2;

        catch java.net.MalformedURLException from label1 to label2 with label3;
    }

    private static java.lang.String getRTJarPath()
    {
        java.lang.String r0, $r3, $r4;
        int i0, $i1;
        java.lang.Class $r1;
        java.net.URL $r2;
        boolean $z0;

        $r1 = class "java/lang/Class";

        $r2 = $r1.getResource("/java/lang/String.class");

        r0 = $r2.toExternalForm();

        $z0 = r0.startsWith("jar:file:");

        if $z0 != 0 goto label1;

        return null;

     label1:
        i0 = r0.indexOf("!");

        if i0 != -1 goto label2;

        return null;

     label2:
        $r3 = "jar:file:";

        $i1 = $r3.length();

        $r4 = r0.substring($i1, i0);

        return $r4;
    }

    public static void main(java.lang.String[]) throws java.lang.Exception
    {
        java.lang.String[] r0;
        java.net.URL[] r1;
        int $i0, $i1, i2;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath $r2, r6;
        java.io.File $r3;
        java.lang.String $r4;
        java.net.URL $r5;

        r0 := @parameter0;

        $i0 = lengthof r0;

        r1 = newarray (java.net.URL)[$i0];

(0)     i2 = 0;

     label1:
        i2 = Phi(i2 #0, i2 #1);

        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r3 = new java.io.File;

        $r4 = r0[i2];

        specialinvoke $r3.<init>($r4);

        $r5 = $r3.toURL();

        r1[i2] = $r5;

        i2 = i2 + 1;

(1)     goto label1;

     label2:
        $r2 = new org.gjt.sp.jedit.bsh.classpath.BshClassPath;

        specialinvoke $r2.<init>("Test", r1);

        r6 = $r2;

        return;
    }

    public java.lang.String toString()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.lang.StringBuilder $r1, $r2, $r4, $r5, $r7, $r8, $r10, $r11, $r12, $r14, $r15;
        java.lang.String $r3, $r6, $r16;
        java.util.List $r9, $r13;

        r0 := @this;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<init>();

        $r2 = $r1.append("BshClassPath ");

        $r3 = r0.name;

        $r4 = $r2.append($r3);

        $r5 = $r4.append("(");

        $r6 = specialinvoke r0.toString();

        $r7 = $r5.append($r6);

        $r8 = $r7.append(") path= ");

        $r9 = r0.path;

        $r10 = $r8.append($r9);

        $r11 = $r10.append("\n");

        $r12 = $r11.append("compPaths = {");

        $r13 = r0.compPaths;

        $r14 = $r12.append($r13);

        $r15 = $r14.append(" }");

        $r16 = $r15.toString();

        return $r16;
    }

    void nameSpaceChanged()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.util.List $r1, $r2, $r3;
        int $i0, i1;
        java.lang.Object $r4;
        org.gjt.sp.jedit.bsh.NameSource$Listener $r5, $r6;

        r0 := @this;

        $r1 = r0.nameSourceListeners;

        if $r1 != null goto label1;

        return;

     label1:
(0)     i1 = 0;

     label2:
        i1 = Phi(i1 #0, i1 #1);

        $r2 = r0.nameSourceListeners;

        $i0 = $r2.size();

        if i1 >= $i0 goto label3;

        $r3 = r0.nameSourceListeners;

        $r4 = $r3.get(i1);

        $r5 = (org.gjt.sp.jedit.bsh.NameSource$Listener) $r4;

        $r6 = (org.gjt.sp.jedit.bsh.NameSource$Listener) $r5;

        $r6.nameSourceChanged(r0);

        i1 = i1 + 1;

(1)     goto label2;

     label3:
        return;
    }

    public void addNameSourceListener(org.gjt.sp.jedit.bsh.NameSource$Listener)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        org.gjt.sp.jedit.bsh.NameSource$Listener r1;
        java.util.List $r2, $r3;
        java.util.ArrayList $r4;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.nameSourceListeners;

        if $r2 != null goto label1;

        $r4 = new java.util.ArrayList;

        specialinvoke $r4.<init>();

        r0.nameSourceListeners = $r4;

     label1:
        $r3 = r0.nameSourceListeners;

        $r3.add(r1);

        return;
    }

    public static void addMappingFeedback(org.gjt.sp.jedit.bsh.classpath.BshClassPath$MappingFeedback)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$MappingFeedback r0, $r1;
        java.lang.RuntimeException $r2;

        r0 := @parameter0;

        $r1 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.mappingFeedbackListener;

        if $r1 == null goto label1;

        $r2 = new java.lang.RuntimeException;

        specialinvoke $r2.<init>("Unimplemented: already a listener");

        throw $r2;

     label1:
        org.gjt.sp.jedit.bsh.classpath.BshClassPath.mappingFeedbackListener = r0;

        return;
    }

    void startClassMapping()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$MappingFeedback $r1, $r3;
        java.io.PrintStream $r2;

        r0 := @this;

        $r1 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.mappingFeedbackListener;

        if $r1 == null goto label1;

        $r3 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.mappingFeedbackListener;

        $r3.startClassMapping();

        goto label2;

     label1:
        $r2 = java.lang.System.err;

        $r2.println("Start ClassPath Mapping");

     label2:
        return;
    }

    void classMapping(java.lang.String)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.lang.String r1, $r7;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$MappingFeedback $r2, $r8;
        java.lang.StringBuilder $r3, $r5, $r6;
        java.io.PrintStream $r4;

        r0 := @this;

        r1 := @parameter0;

        $r2 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.mappingFeedbackListener;

        if $r2 == null goto label1;

        $r8 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.mappingFeedbackListener;

        $r8.classMapping(r1);

        goto label2;

     label1:
        $r4 = java.lang.System.err;

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r5 = $r3.append("Mapping: ");

        $r6 = $r5.append(r1);

        $r7 = $r6.toString();

        $r4.println($r7);

     label2:
        return;
    }

    void errorWhileMapping(java.lang.String)
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        java.lang.String r1;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$MappingFeedback $r2, $r4;
        java.io.PrintStream $r3;

        r0 := @this;

        r1 := @parameter0;

        $r2 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.mappingFeedbackListener;

        if $r2 == null goto label1;

        $r4 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.mappingFeedbackListener;

        $r4.errorWhileMapping(r1);

        goto label2;

     label1:
        $r3 = java.lang.System.err;

        $r3.println(r1);

     label2:
        return;
    }

    void endClassMapping()
    {
        org.gjt.sp.jedit.bsh.classpath.BshClassPath r0;
        org.gjt.sp.jedit.bsh.classpath.BshClassPath$MappingFeedback $r1, $r3;
        java.io.PrintStream $r2;

        r0 := @this;

        $r1 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.mappingFeedbackListener;

        if $r1 == null goto label1;

        $r3 = org.gjt.sp.jedit.bsh.classpath.BshClassPath.mappingFeedbackListener;

        $r3.endClassMapping();

        goto label2;

     label1:
        $r2 = java.lang.System.err;

        $r2.println("End ClassPath Mapping");

     label2:
        return;
    }
}
