class org.gjt.sp.jedit.bsh.BSHClassDeclaration extends org.gjt.sp.jedit.bsh.SimpleNode
{
    static final java.lang.String CLASSINITNAME;
    java.lang.String name;
    org.gjt.sp.jedit.bsh.Modifiers modifiers;
    int numInterfaces;
    boolean extend;
    boolean isInterface;

    void <init>(int)
    {
        org.gjt.sp.jedit.bsh.BSHClassDeclaration r0;
        int i0;

        r0 := @this;

        i0 := @parameter0;

        specialinvoke r0.<init>(i0);

        return;
    }

    public java.lang.Object eval(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHClassDeclaration r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        boolean $z0, $z1, $z2;
        int $i0, $i1, $i2, $i3, $i4, i5, i6, i5_1, i5_2;
        org.gjt.sp.jedit.bsh.BSHBlock $r3, r26;
        org.gjt.sp.jedit.bsh.ClassGenerator $r4;
        org.gjt.sp.jedit.bsh.Modifiers $r5;
        java.lang.String $r6, $r15, $r18;
        java.lang.Class $r7, $r10, $r11, r22, r22_1, r22_2;
        org.gjt.sp.jedit.bsh.Node $r8, $r9, $r19;
        org.gjt.sp.jedit.bsh.EvalError $r12, $r21;
        java.lang.StringBuilder $r13, $r14, $r16, $r17;
        org.gjt.sp.jedit.bsh.UtilEvalError $r20, r27;
        org.gjt.sp.jedit.bsh.BSHAmbiguousName r23, r25;
        java.lang.Class[] r24;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        i5 = 0;

        r22 = null;

        $z0 = r0.extend;

(0)     if $z0 == 0 goto label1;

        $i4 = i5;

        i5_1 = i5 + 1;

        $r19 = r0.jjtGetChild($i4);

        r23 = (org.gjt.sp.jedit.bsh.BSHAmbiguousName) $r19;

(1)     r22_1 = r23.toClass(r1, r2);

     label1:
        i5_2 = Phi(i5 #0, i5_1 #1);

        r22_2 = Phi(r22 #0, r22_1 #1);

        $i0 = r0.numInterfaces;

        r24 = newarray (java.lang.Class)[$i0];

(2)     i6 = 0;

     label2:
        i5 = Phi(i5_2 #2, i5 #3);

        r22 = Phi(r22_2 #2, r22 #3);

        i6 = Phi(i6 #2, i6 #3);

        $i1 = r0.numInterfaces;

        if i6 >= $i1 goto label4;

        $i3 = i5;

        i5 = i5 + 1;

        $r9 = r0.jjtGetChild($i3);

        r25 = (org.gjt.sp.jedit.bsh.BSHAmbiguousName) $r9;

        $r10 = r25.toClass(r1, r2);

        r24[i6] = $r10;

        $r11 = r24[i6];

        $z2 = $r11.isInterface();

        if $z2 != 0 goto label3;

        $r12 = new org.gjt.sp.jedit.bsh.EvalError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<init>();

        $r14 = $r13.append("Type: ");

        $r15 = r25.text;

        Packer.Unpack(r25);

        $r16 = $r14.append($r15);

        Packer.Pack(r25);

        $r17 = $r16.append(" is not an interface!");

        $r18 = $r17.toString();

        specialinvoke $r12.<init>($r18, r0, r1);

        throw $r12;

     label3:
        i6 = i6 + 1;

(3)     goto label2;

     label4:
        $i2 = r0.jjtGetNumChildren();

        if i5 >= $i2 goto label5;

        $r8 = r0.jjtGetChild(i5);

        r26 = (org.gjt.sp.jedit.bsh.BSHBlock) $r8;

(4)     goto label6;

     label5:
        $r3 = new org.gjt.sp.jedit.bsh.BSHBlock;

        specialinvoke $r3.<init>(25);

(5)     r26 = $r3;

     label6:
        r26 = Phi(r26 #4, r26 #5);

(6)     $r4 = org.gjt.sp.jedit.bsh.ClassGenerator.getClassGenerator();

        $r6 = r0.name;

        $r5 = r0.modifiers;

        $z1 = r0.isInterface;

        $r7 = $r4.generateClass($r6, $r5, r24, r22, r26, $z1, r1, r2);

     label7:
        return $r7;

     label8:
        $r20 := @caughtexception;

        r26 = Phi(r26 #4, r26 #5, r26 #6);

        r27 = $r20;

        $r21 = r27.toEvalError(r0, r1);

        throw $r21;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label6 to label7 with label8;
    }

    public java.lang.String toString()
    {
        org.gjt.sp.jedit.bsh.BSHClassDeclaration r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.lang.String $r3, $r5;

        r0 := @this;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<init>();

        $r2 = $r1.append("ClassDeclaration: ");

        $r3 = r0.name;

        $r4 = $r2.append($r3);

        $r5 = $r4.toString();

        return $r5;
    }
}
