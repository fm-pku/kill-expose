class org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem extends javax.swing.JMenuItem
{
    private java.lang.String shortcutProp;
    private char shortcut;
    private static java.awt.Font acceleratorFont;
    private static java.awt.Color acceleratorForeground;
    private static java.awt.Color acceleratorSelectionForeground;

    void <init>(org.gjt.sp.jedit.Buffer, int, char)
    {
        org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem r0;
        org.gjt.sp.jedit.Buffer r1;
        int i0, $i2, $i3;
        char c1;
        java.lang.String $r2, $r7, r8, r8_1, r8_2;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @this;

        r1 := @parameter0;

        i0 := @parameter1;

        c1 := @parameter2;

        specialinvoke r0.<init>();

        $r2 = r1.getLineText(i0);

        r8 = $r2.trim();

        $i2 = r8.length();

(0)     if $i2 != 0 goto label1;

(1)     r8_1 = org.gjt.sp.jedit.jEdit.getProperty("markers.blank-line");

     label1:
        r8_2 = Phi(r8 #0, r8_1 #1);

        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $i3 = i0 + 1;

        $r4 = $r3.append($i3);

        $r5 = $r4.append(": ");

        $r6 = $r5.append(r8_2);

        $r7 = $r6.toString();

        r0.setText($r7);

        r0.shortcutProp = "goto-marker.shortcut";

        r0.shortcut = c1;

        return;
    }

    public java.awt.Dimension getPreferredSize()
    {
        org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem r0;
        java.awt.Dimension r1;
        java.lang.String r2;
        java.awt.FontMetrics r3;
        java.awt.Font $r4;
        int $i0, $i1, $i2, $i3, $i4;

        r0 := @this;

        r1 = specialinvoke r0.getPreferredSize();

        r2 = specialinvoke r0.getShortcut();

        if r2 == null goto label1;

        $r4 = org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem.acceleratorFont;

        r3 = r0.getFontMetrics($r4);

        $i0 = r1.width;

        $i1 = r3.stringWidth(r2);

        $i2 = r3.stringWidth("AAAA");

        $i3 = $i1 + $i2;

        $i4 = $i0 + $i3;

        r1.width = $i4;

     label1:
        return r1;
    }

    public void paint(java.awt.Graphics)
    {
        org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem r0;
        java.awt.Graphics r1;
        java.lang.String r2;
        java.awt.Graphics2D r3;
        java.awt.FontMetrics r4;
        java.awt.Insets r5;
        java.awt.Font $r6;
        java.lang.Object $r7;
        java.awt.RenderingHints$Key $r8;
        javax.swing.ButtonModel $r9;
        boolean $z0;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10;
        java.awt.Color $r10, $r10_1, $r10_2, $r10_3;

        r0 := @this;

        r1 := @parameter0;

        specialinvoke r0.paint(r1);

        r2 = specialinvoke r0.getShortcut();

(0)     if r2 == null goto label3;

        r3 = (java.awt.Graphics2D) r1;

        $r6 = org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem.acceleratorFont;

        r1.setFont($r6);

        $r8 = java.awt.RenderingHints.KEY_ANTIALIASING;

        $r7 = java.awt.RenderingHints.VALUE_ANTIALIAS_ON;

        r3.setRenderingHint($r8, $r7);

        $r9 = r0.getModel();

        $z0 = $r9.isArmed();

        if $z0 == 0 goto label1;

        $r10 = org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem.acceleratorSelectionForeground;

(1)     goto label2;

     label1:
(2)     $r10_1 = org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem.acceleratorForeground;

     label2:
        $r10_2 = Phi($r10 #1, $r10_1 #2);

        r1.setColor($r10_2);

        r4 = r1.getFontMetrics();

        r5 = r0.getInsets();

        $i0 = r0.getWidth();

        $i1 = r4.stringWidth(r2);

        $i2 = r5.right;

        $i4 = $i1 + $i2;

        $i3 = r5.left;

        $i5 = $i4 + $i3;

        $i6 = $i5 + 5;

        $i7 = $i0 - $i6;

        $i8 = r4.getAscent();

        $i9 = r5.top;

        $i10 = $i8 + $i9;

(3)     r1.drawString(r2, $i7, $i10);

     label3:
        $r10_3 = Phi($r10 #0, $r10_2 #3);

        return;
    }

    private java.lang.String getShortcut()
    {
        org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem r0;
        java.lang.String r1, $r2, $r7;
        char $c0, $c1;
        java.lang.StringBuilder $r3, $r4, $r5, $r6;

        r0 := @this;

        $c0 = r0.shortcut;

        if $c0 != 0 goto label1;

        return null;

     label1:
        $r2 = r0.shortcutProp;

        r1 = org.gjt.sp.jedit.jEdit.getProperty($r2);

        if r1 != null goto label2;

        return null;

     label2:
        $r3 = new java.lang.StringBuilder;

        specialinvoke $r3.<init>();

        $r4 = $r3.append(r1);

        $r5 = $r4.append(32);

        $c1 = r0.shortcut;

        $r6 = $r5.append($c1);

        $r7 = $r6.toString();

        return $r7;
    }

    static void <clinit>()
    {
        java.awt.Font $r0;
        java.awt.Color $r1, $r2;

        $r0 = org.gjt.sp.jedit.GUIUtilities.menuAcceleratorFont();

        org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem.acceleratorFont = $r0;

        $r1 = javax.swing.UIManager.getColor("MenuItem.acceleratorForeground");

        org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem.acceleratorForeground = $r1;

        $r2 = javax.swing.UIManager.getColor("MenuItem.acceleratorSelectionForeground");

        org.gjt.sp.jedit.menu.MarkersProvider$MarkersMenuItem.acceleratorSelectionForeground = $r2;

        return;
    }
}
