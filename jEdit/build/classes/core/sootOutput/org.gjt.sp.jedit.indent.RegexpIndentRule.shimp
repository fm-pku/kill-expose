public class org.gjt.sp.jedit.indent.RegexpIndentRule extends java.lang.Object implements org.gjt.sp.jedit.indent.IndentRule
{
    private org.gjt.sp.jedit.indent.IndentAction prevPrevAction;
    private org.gjt.sp.jedit.indent.IndentAction prevAction;
    private org.gjt.sp.jedit.indent.IndentAction thisAction;
    private java.util.regex.Pattern regexp;
    private boolean collapse;

    public void <init>(java.lang.String, org.gjt.sp.jedit.indent.IndentAction, org.gjt.sp.jedit.indent.IndentAction, org.gjt.sp.jedit.indent.IndentAction, boolean) throws java.util.regex.PatternSyntaxException
    {
        org.gjt.sp.jedit.indent.RegexpIndentRule r0;
        java.lang.String r1;
        org.gjt.sp.jedit.indent.IndentAction r2, r3, r4;
        boolean z0;
        java.util.regex.Pattern $r5;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        r4 := @parameter3;

        z0 := @parameter4;

        specialinvoke r0.<init>();

        r0.prevPrevAction = r2;

        r0.prevAction = r3;

        r0.thisAction = r4;

        $r5 = java.util.regex.Pattern.compile(r1, 2);

        r0.regexp = $r5;

        r0.collapse = z0;

        return;
    }

    public void apply(org.gjt.sp.jedit.buffer.JEditBuffer, int, int, int, java.util.List)
    {
        org.gjt.sp.jedit.indent.RegexpIndentRule r0;
        org.gjt.sp.jedit.buffer.JEditBuffer r1;
        int i0, i1, i2;
        java.util.List r2;
        org.gjt.sp.jedit.indent.IndentAction $r3, $r4, $r5, $r6, $r8, $r10;
        boolean $z0, $z2, $z4, $z6, $z8;
        org.gjt.sp.jedit.indent.IndentAction$Collapse $r7, $r9;

        r0 := @this;

        r1 := @parameter0;

        i0 := @parameter1;

        i1 := @parameter2;

        i2 := @parameter3;

        r2 := @parameter4;

        $r3 = r0.thisAction;

        if $r3 == null goto label1;

        $z8 = specialinvoke r0.lineMatches(r1, i0);

        if $z8 == 0 goto label1;

        $r10 = r0.thisAction;

        r2.add($r10);

     label1:
        $r4 = r0.prevAction;

        if $r4 == null goto label2;

        if i1 == -1 goto label2;

        $z4 = specialinvoke r0.lineMatches(r1, i1);

        if $z4 == 0 goto label2;

        $r8 = r0.prevAction;

        r2.add($r8);

        $z6 = r0.collapse;

        if $z6 == 0 goto label2;

        $r9 = org.gjt.sp.jedit.indent.IndentAction.PrevCollapse;

        r2.add($r9);

     label2:
        $r5 = r0.prevPrevAction;

        if $r5 == null goto label3;

        if i2 == -1 goto label3;

        $z0 = specialinvoke r0.lineMatches(r1, i2);

        if $z0 == 0 goto label3;

        $r6 = r0.prevPrevAction;

        r2.add($r6);

        $z2 = r0.collapse;

        if $z2 == 0 goto label3;

        $r7 = org.gjt.sp.jedit.indent.IndentAction.PrevPrevCollapse;

        r2.add($r7);

     label3:
        return;
    }

    public java.lang.String toString()
    {
        org.gjt.sp.jedit.indent.RegexpIndentRule r0;
        java.lang.StringBuilder $r1, $r4, $r5, $r7, $r8;
        java.lang.Class $r2;
        java.lang.String $r3, $r9;
        java.util.regex.Pattern $r6;

        r0 := @this;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<init>();

        $r2 = r0.getClass();

        $r3 = $r2.getName();

        $r4 = $r1.append($r3);

        $r5 = $r4.append(91);

        $r6 = r0.regexp;

        $r7 = $r5.append($r6);

        $r8 = $r7.append(93);

        $r9 = $r8.toString();

        return $r9;
    }

    private boolean lineMatches(org.gjt.sp.jedit.buffer.JEditBuffer, int)
    {
        org.gjt.sp.jedit.indent.RegexpIndentRule r0;
        org.gjt.sp.jedit.buffer.JEditBuffer r1;
        int i0, $i1;
        org.gjt.sp.jedit.indent.RegexpIndentRule$TokenFilter r2, $r3;
        java.lang.StringBuilder $r4;
        java.util.regex.Pattern $r5;
        java.util.regex.Matcher $r6;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        i0 := @parameter1;

        $r3 = new org.gjt.sp.jedit.indent.RegexpIndentRule$TokenFilter;

        $i1 = r1.getLineLength(i0);

        specialinvoke $r3.<init>($i1);

        r2 = $r3;

        r1.markTokens(i0, r2);

        $r5 = r0.regexp;

        $r4 = r2.result;

        $r6 = $r5.matcher($r4);

        $z0 = $r6.matches();

        return $z0;
    }
}
