class org.gjt.sp.jedit.bsh.Name extends java.lang.Object implements java.io.Serializable
{
    public org.gjt.sp.jedit.bsh.NameSpace namespace;
    java.lang.String value;
    private java.lang.String evalName;
    private java.lang.String lastEvalName;
    private static java.lang.String FINISHED;
    private java.lang.Object evalBaseObject;
    private int callstackDepth;
    java.lang.Class asClass;
    java.lang.Class classOfStaticMethod;

    private void reset()
    {
        org.gjt.sp.jedit.bsh.Name r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 = r0.value;

        r0.evalName = $r1;

        r0.evalBaseObject = null;

        r0.callstackDepth = 0;

        return;
    }

    void <init>(org.gjt.sp.jedit.bsh.NameSpace, java.lang.String)
    {
        org.gjt.sp.jedit.bsh.Name r0;
        org.gjt.sp.jedit.bsh.NameSpace r1;
        java.lang.String r2;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        specialinvoke r0.<init>();

        r0.value = null;

        r0.namespace = r1;

        r0.value = r2;

        return;
    }

    public java.lang.Object toObject(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Name r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        java.lang.Object $r3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r3 = r0.toObject(r1, r2, 0);

        return $r3;
    }

    public synchronized java.lang.Object toObject(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter, boolean) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Name r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        boolean z0;
        java.lang.String $r3;
        org.gjt.sp.jedit.bsh.InterpreterError $r4;
        java.lang.Object r5;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        z0 := @parameter2;

        specialinvoke r0.reset();

(0)     r5 = null;

     label1:
        r5 = Phi(r5 #0, r5 #1);

        $r3 = r0.evalName;

        if $r3 == null goto label2;

        r5 = specialinvoke r0.consumeNextObjectField(r1, r2, z0, 0);

(1)     goto label1;

     label2:
        if r5 != null goto label3;

        $r4 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r4.<init>("null value in toObject()");

        throw $r4;

     label3:
        return r5;
    }

    private java.lang.Object completeRound(java.lang.String, java.lang.String, java.lang.Object)
    {
        org.gjt.sp.jedit.bsh.Name r0;
        java.lang.String r1, r2, $r8;
        java.lang.Object r3;
        org.gjt.sp.jedit.bsh.InterpreterError $r4;
        java.lang.StringBuilder $r5, $r6, $r7;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        if r3 != null goto label1;

        $r4 = new org.gjt.sp.jedit.bsh.InterpreterError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<init>();

        $r6 = $r5.append("lastEvalName = ");

        $r7 = $r6.append(r1);

        $r8 = $r7.toString();

        specialinvoke $r4.<init>($r8);

        throw $r4;

     label1:
        r0.lastEvalName = r1;

        r0.evalName = r2;

        r0.evalBaseObject = r3;

        return r3;
    }

    private java.lang.Object consumeNextObjectField(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter, boolean, boolean) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Name r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15, $z16;
        java.lang.Class r3, $r22, $r67, $r127, r178, r183;
        java.lang.Object $r4, $r6, $r7, $r8, $r9, $r11, $r13, $r14, $r15, $r17, $r20, $r21, $r24, $r27, $r34, $r39, $r65, $r66, $r70, $r71, $r101, $r102, $r103, $r112, $r113, $r124, $r133, $r134, $r140, $r153, $r160, $r167, r175, r177, r186, r191, r177_1, r177_2, r177_3;
        java.lang.String $r5, $r16, $r18, $r19, $r25, $r26, $r30, $r33, $r36, $r37, $r38, $r46, $r48, $r59, $r64, $r68, $r69, $r75, $r77, $r81, $r83, $r88, $r90, $r91, $r95, $r97, $r99, $r100, $r109, $r110, $r111, $r114, $r117, $r119, $r120, $r121, $r122, $r125, $r130, $r132, $r138, $r139, $r147, $r152, $r154, $r155, $r158, $r159, $r169, $r174, r176, r179, r184, r188, r189;
        org.gjt.sp.jedit.bsh.Primitive $r10, $r12, $r23, $r98, $r137, $r157, r190;
        int $i0, $i1, $i2, $i3, i4;
        org.gjt.sp.jedit.bsh.UtilEvalError $r28, $r40, $r60, $r72, $r78, $r92, $r162;
        java.lang.StringBuilder $r29, $r31, $r32, $r41, $r42, $r43, $r44, $r45, $r47, $r49, $r50, $r51, $r54, $r55, $r56, $r57, $r58, $r61, $r62, $r63, $r73, $r74, $r76, $r79, $r80, $r82, $r86, $r87, $r89, $r93, $r94, $r96, $r106, $r107, $r108, $r115, $r116, $r118, $r128, $r129, $r131, $r141, $r142, $r143, $r144, $r146, $r149, $r150, $r151, $r163, $r164, $r165, $r166, $r168, $r171, $r172, $r173;
        org.gjt.sp.jedit.bsh.ClassIdentifier $r35, $r53, $r123;
        org.gjt.sp.jedit.bsh.NameSpace $r52, $r105, $r126, $r136, $r145, $r148, $r156, $r180, r181, r185;
        org.gjt.sp.jedit.bsh.UtilTargetError $r84;
        java.lang.NullPointerException $r85;
        org.gjt.sp.jedit.bsh.This $r104, $r135, r182;
        org.gjt.sp.jedit.bsh.ReflectError $r161, $r170, r187, r192;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        z0 := @parameter2;

        z1 := @parameter3;

        $r4 = r0.evalBaseObject;

        if $r4 != null goto label01;

        $r154 = r0.evalName;

        $z15 = org.gjt.sp.jedit.bsh.Name.isCompound($r154);

        if $z15 != 0 goto label01;

        if z0 != 0 goto label01;

        $r156 = r0.namespace;

        $r155 = r0.evalName;

        r175 = r0.resolveThisFieldReference(r1, $r156, r2, $r155, 0);

        $r157 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r175 == $r157 goto label01;

        $r159 = r0.evalName;

        $r158 = org.gjt.sp.jedit.bsh.Name.FINISHED;

        $r160 = specialinvoke r0.completeRound($r159, $r158, r175);

        return $r160;

     label01:
        $r5 = r0.evalName;

        r176 = org.gjt.sp.jedit.bsh.Name.prefix($r5, 1);

        $r6 = r0.evalBaseObject;

        if $r6 == null goto label02;

        $r153 = r0.evalBaseObject;

        $z14 = $r153 instanceof org.gjt.sp.jedit.bsh.This;

(0)     if $z14 == 0 goto label07;

     label02:
(1)     if z0 != 0 goto label07;

        $z12 = org.gjt.sp.jedit.bsh.Interpreter.DEBUG;

        if $z12 == 0 goto label03;

        $r149 = new java.lang.StringBuilder;

        specialinvoke $r149.<init>();

        $r150 = $r149.append("trying to resolve variable: ");

        $r151 = $r150.append(r176);

        $r152 = $r151.toString();

        org.gjt.sp.jedit.bsh.Interpreter.debug($r152);

     label03:
        $r133 = r0.evalBaseObject;

        if $r133 != null goto label04;

        $r148 = r0.namespace;

        r177 = r0.resolveThisFieldReference(r1, $r148, r2, r176, 0);

(2)     goto label05;

     label04:
        $r134 = r0.evalBaseObject;

        $r135 = (org.gjt.sp.jedit.bsh.This) $r134;

        $r136 = $r135.namespace;

(3)     r177_1 = r0.resolveThisFieldReference(r1, $r136, r2, r176, 1);

     label05:
        r177_2 = Phi(r177 #2, r177_1 #3);

        $r137 = org.gjt.sp.jedit.bsh.Primitive.VOID;

(4)     if r177_2 == $r137 goto label07;

        $z13 = org.gjt.sp.jedit.bsh.Interpreter.DEBUG;

        if $z13 == 0 goto label06;

        $r141 = new java.lang.StringBuilder;

        specialinvoke $r141.<init>();

        $r142 = $r141.append("resolved variable: ");

        $r143 = $r142.append(r176);

        $r144 = $r143.append(" in namespace: ");

        $r145 = r0.namespace;

        $r146 = $r144.append($r145);

        $r147 = $r146.toString();

        org.gjt.sp.jedit.bsh.Interpreter.debug($r147);

     label06:
        $r138 = r0.evalName;

        $r139 = org.gjt.sp.jedit.bsh.Name.suffix($r138);

        $r140 = specialinvoke r0.completeRound(r176, $r139, r177_2);

        return $r140;

     label07:
        r177_3 = Phi(r177 #0, r177 #1, r177_2 #4);

        $r7 = r0.evalBaseObject;

(5)     if $r7 != null goto label13;

        $z10 = org.gjt.sp.jedit.bsh.Interpreter.DEBUG;

        if $z10 == 0 goto label08;

        $r128 = new java.lang.StringBuilder;

        specialinvoke $r128.<init>();

        $r129 = $r128.append("trying class: ");

        $r130 = r0.evalName;

        $r131 = $r129.append($r130);

        $r132 = $r131.toString();

        org.gjt.sp.jedit.bsh.Interpreter.debug($r132);

     label08:
        r178 = null;

        i4 = 1;

(6)     r179 = null;

     label09:
        r178 = Phi(r178 #6, r178 #9);

        r177 = Phi(r177_3 #6, r177 #9);

        i4 = Phi(i4 #6, i4 #9);

        r179 = Phi(r179 #6, r179 #9);

        $r114 = r0.evalName;

        $i1 = org.gjt.sp.jedit.bsh.Name.countParts($r114);

(7)     if i4 > $i1 goto label11;

        $r125 = r0.evalName;

        r179 = org.gjt.sp.jedit.bsh.Name.prefix($r125, i4);

        $r126 = r0.namespace;

        $r127 = $r126.getClass(r179);

        r178 = $r127;

        if $r127 == null goto label10;

(8)     goto label11;

     label10:
        i4 = i4 + 1;

(9)     goto label09;

     label11:
        r178 = Phi(r178 #7, r178 #8);

        r179 = Phi(r179 #7, r179 #8);

        if r178 == null goto label12;

        $r121 = r0.evalName;

        $r120 = r0.evalName;

        $i2 = org.gjt.sp.jedit.bsh.Name.countParts($r120);

        $i3 = $i2 - i4;

        $r122 = org.gjt.sp.jedit.bsh.Name.suffix($r121, $i3);

        $r123 = new org.gjt.sp.jedit.bsh.ClassIdentifier;

        specialinvoke $r123.<init>(r178);

        $r124 = specialinvoke r0.completeRound(r179, $r122, $r123);

        return $r124;

     label12:
        $z11 = org.gjt.sp.jedit.bsh.Interpreter.DEBUG;

(10)    if $z11 == 0 goto label13;

        $r115 = new java.lang.StringBuilder;

        specialinvoke $r115.<init>();

        $r116 = $r115.append("not a class, trying var prefix ");

        $r117 = r0.evalName;

        $r118 = $r116.append($r117);

        $r119 = $r118.toString();

(11)    org.gjt.sp.jedit.bsh.Interpreter.debug($r119);

     label13:
        r178 = Phi(r178 #5, r178 #10, r178 #11);

        r177 = Phi(r177_3 #5, r177 #10, r177 #11);

        i4 = Phi(i4 #5, i4 #10, i4 #11);

        r179 = Phi(r179 #5, r179 #10, r179 #11);

        $r8 = r0.evalBaseObject;

        if $r8 == null goto label14;

        $r113 = r0.evalBaseObject;

        $z9 = $r113 instanceof org.gjt.sp.jedit.bsh.This;

        if $z9 == 0 goto label17;

     label14:
        if z0 != 0 goto label17;

        if z1 == 0 goto label17;

        $r102 = r0.evalBaseObject;

        if $r102 != null goto label15;

        $r180 = r0.namespace;

(12)    goto label16;

     label15:
        $r103 = r0.evalBaseObject;

        $r104 = (org.gjt.sp.jedit.bsh.This) $r103;

(13)    $r180 = $r104.namespace;

     label16:
        $r180 = Phi($r180 #12, $r180 #13);

        r181 = $r180;

        $r105 = new org.gjt.sp.jedit.bsh.NameSpace;

        $r106 = new java.lang.StringBuilder;

        specialinvoke $r106.<init>();

        $r107 = $r106.append("auto: ");

        $r108 = $r107.append(r176);

        $r109 = $r108.toString();

        specialinvoke $r105.<init>(r181, $r109);

        r182 = $r105.getThis(r2);

        r181.setVariable(r176, r182, 0);

        $r110 = r0.evalName;

        $r111 = org.gjt.sp.jedit.bsh.Name.suffix($r110);

        $r112 = specialinvoke r0.completeRound(r176, $r111, r182);

        return $r112;

     label17:
        $r9 = r0.evalBaseObject;

        if $r9 != null goto label19;

        $r91 = r0.evalName;

        $z8 = org.gjt.sp.jedit.bsh.Name.isCompound($r91);

        if $z8 != 0 goto label18;

        $r100 = r0.evalName;

        $r99 = org.gjt.sp.jedit.bsh.Name.FINISHED;

        $r98 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        $r101 = specialinvoke r0.completeRound($r100, $r99, $r98);

        return $r101;

     label18:
        $r92 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r93 = new java.lang.StringBuilder;

        specialinvoke $r93.<init>();

        $r94 = $r93.append("Class or variable not found: ");

        $r95 = r0.evalName;

        $r96 = $r94.append($r95);

        $r97 = $r96.toString();

        specialinvoke $r92.<init>($r97);

        throw $r92;

     label19:
        $r11 = r0.evalBaseObject;

        $r10 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if $r11 != $r10 goto label20;

        $r84 = new org.gjt.sp.jedit.bsh.UtilTargetError;

        $r85 = new java.lang.NullPointerException;

        $r86 = new java.lang.StringBuilder;

        specialinvoke $r86.<init>();

        $r87 = $r86.append("Null Pointer while evaluating: ");

        $r88 = r0.value;

        $r89 = $r87.append($r88);

        $r90 = $r89.toString();

        specialinvoke $r85.<init>($r90);

        specialinvoke $r84.<init>($r85);

        throw $r84;

     label20:
        $r13 = r0.evalBaseObject;

        $r12 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if $r13 != $r12 goto label21;

        $r78 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r79 = new java.lang.StringBuilder;

        specialinvoke $r79.<init>();

        $r80 = $r79.append("Undefined variable or class name while evaluating: ");

        $r81 = r0.value;

        $r82 = $r80.append($r81);

        $r83 = $r82.toString();

        specialinvoke $r78.<init>($r83);

        throw $r78;

     label21:
        $r14 = r0.evalBaseObject;

        $z2 = $r14 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z2 == 0 goto label22;

        $r72 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r73 = new java.lang.StringBuilder;

        specialinvoke $r73.<init>();

        $r74 = $r73.append("Can\'t treat primitive like an object. Error while evaluating: ");

        $r75 = r0.value;

        $r76 = $r74.append($r75);

        $r77 = $r76.toString();

        specialinvoke $r72.<init>($r77);

        throw $r72;

     label22:
        $r15 = r0.evalBaseObject;

        $z3 = $r15 instanceof org.gjt.sp.jedit.bsh.ClassIdentifier;

        if $z3 == 0 goto label34;

        $r34 = r0.evalBaseObject;

        $r35 = (org.gjt.sp.jedit.bsh.ClassIdentifier) $r34;

        r183 = $r35.getTargetClass();

        $r36 = r0.evalName;

        r184 = org.gjt.sp.jedit.bsh.Name.prefix($r36, 1);

        $z6 = r184.equals("this");

        if $z6 == 0 goto label26;

(14)    r185 = r0.namespace;

     label23:
        r178 = Phi(r178 #14, r178 #15);

        r177 = Phi(r177 #14, r177 #15);

        i4 = Phi(i4 #14, i4 #15);

        r179 = Phi(r179 #14, r179 #15);

        r185 = Phi(r185 #14, r185 #15);

        if r185 == null goto label25;

        $r65 = r185.classInstance;

        if $r65 == null goto label24;

        $r66 = r185.classInstance;

        $r67 = $r66.getClass();

        if $r67 != r183 goto label24;

        $r68 = r0.evalName;

        $r69 = org.gjt.sp.jedit.bsh.Name.suffix($r68);

        $r70 = r185.classInstance;

        $r71 = specialinvoke r0.completeRound(r184, $r69, $r70);

        return $r71;

     label24:
        r185 = r185.getParent();

(15)    goto label23;

     label25:
        $r60 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r61 = new java.lang.StringBuilder;

        specialinvoke $r61.<init>();

        $r62 = $r61.append("Can\'t find enclosing \'this\' instance of class: ");

        $r63 = $r62.append(r183);

        $r64 = $r63.toString();

        specialinvoke $r60.<init>($r64);

        throw $r60;

     label26:
        r186 = null;

     label27:
        $z7 = org.gjt.sp.jedit.bsh.Interpreter.DEBUG;

(16)    if $z7 == 0 goto label28;

        $r54 = new java.lang.StringBuilder;

        specialinvoke $r54.<init>();

        $r55 = $r54.append("Name call to getStaticFieldValue, class: ");

        $r56 = $r55.append(r183);

        $r57 = $r56.append(", field:");

        $r58 = $r57.append(r184);

        $r59 = $r58.toString();

        org.gjt.sp.jedit.bsh.Interpreter.debug($r59);

     label28:
        r186 = org.gjt.sp.jedit.bsh.Reflect.getStaticFieldValue(r183, r184);

     label29:
(17)    goto label31;

     label30:
        $r170 := @caughtexception;

        r186 = Phi(r186 #16);

        r187 = $r170;

        $z16 = org.gjt.sp.jedit.bsh.Interpreter.DEBUG;

(18)    if $z16 == 0 goto label31;

        $r171 = new java.lang.StringBuilder;

        specialinvoke $r171.<init>();

        $r172 = $r171.append("field reflect error: ");

        $r173 = $r172.append(r187);

        $r174 = $r173.toString();

(19)    org.gjt.sp.jedit.bsh.Interpreter.debug($r174);

     label31:
        r186 = Phi(r186 #17, r186 #18, r186 #19);

(20)    if r186 != null goto label32;

        $r47 = new java.lang.StringBuilder;

        specialinvoke $r47.<init>();

        $r48 = r183.getName();

        $r49 = $r47.append($r48);

        $r50 = $r49.append("$");

        $r51 = $r50.append(r184);

        r188 = $r51.toString();

        $r52 = r0.namespace;

        r3 = $r52.getClass(r188);

(21)    if r3 == null goto label32;

        $r53 = new org.gjt.sp.jedit.bsh.ClassIdentifier;

        specialinvoke $r53.<init>(r3);

(22)    r186 = $r53;

     label32:
        r186 = Phi(r186 #20, r186 #21, r186 #22);

        if r186 != null goto label33;

        $r40 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r41 = new java.lang.StringBuilder;

        specialinvoke $r41.<init>();

        $r42 = $r41.append("No static field or inner class: ");

        $r43 = $r42.append(r184);

        $r44 = $r43.append(" of ");

        $r45 = $r44.append(r183);

        $r46 = $r45.toString();

        specialinvoke $r40.<init>($r46);

        throw $r40;

     label33:
        $r37 = r0.evalName;

        $r38 = org.gjt.sp.jedit.bsh.Name.suffix($r37);

        $r39 = specialinvoke r0.completeRound(r184, $r38, r186);

        return $r39;

     label34:
        if z0 == 0 goto label35;

        $r28 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<init>();

        $r30 = r0.value;

        $r31 = $r29.append($r30);

        $r32 = $r31.append(" does not resolve to a class name.");

        $r33 = $r32.toString();

        specialinvoke $r28.<init>($r33);

        throw $r28;

     label35:
        $r16 = r0.evalName;

        r189 = org.gjt.sp.jedit.bsh.Name.prefix($r16, 1);

        $z4 = r189.equals("length");

        if $z4 == 0 goto label36;

        $r21 = r0.evalBaseObject;

        $r22 = $r21.getClass();

        $z5 = $r22.isArray();

        if $z5 == 0 goto label36;

        $r23 = new org.gjt.sp.jedit.bsh.Primitive;

        $r24 = r0.evalBaseObject;

        $i0 = java.lang.reflect.Array.getLength($r24);

        specialinvoke $r23.<init>($i0);

        r190 = $r23;

        $r25 = r0.evalName;

        $r26 = org.gjt.sp.jedit.bsh.Name.suffix($r25);

        $r27 = specialinvoke r0.completeRound(r189, $r26, r190);

        return $r27;

     label36:
        $r17 = r0.evalBaseObject;

        r191 = org.gjt.sp.jedit.bsh.Reflect.getObjectFieldValue($r17, r189);

        $r18 = r0.evalName;

        $r19 = org.gjt.sp.jedit.bsh.Name.suffix($r18);

        $r20 = specialinvoke r0.completeRound(r189, $r19, r191);

     label37:
        return $r20;

     label38:
        $r161 := @caughtexception;

        r192 = $r161;

        $r162 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r163 = new java.lang.StringBuilder;

        specialinvoke $r163.<init>();

        $r164 = $r163.append("Cannot access field: ");

        $r165 = $r164.append(r189);

        $r166 = $r165.append(", on object: ");

        $r167 = r0.evalBaseObject;

        $r168 = $r166.append($r167);

        $r169 = $r168.toString();

        specialinvoke $r162.<init>($r169);

        throw $r162;

        catch org.gjt.sp.jedit.bsh.ReflectError from label27 to label29 with label30;
        catch org.gjt.sp.jedit.bsh.ReflectError from label36 to label37 with label38;
    }

    java.lang.Object resolveThisFieldReference(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.NameSpace, org.gjt.sp.jedit.bsh.Interpreter, java.lang.String, boolean) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Name r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        java.lang.String r3, $r9, $r10, $r13, $r16, $r18, $r23;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, $z14, $z15;
        org.gjt.sp.jedit.bsh.NameSpace r4, $r14, $r20, $r21, $r22, r25, r27, r30;
        org.gjt.sp.jedit.bsh.InterpreterError $r5, $r12, $r15;
        java.lang.StringBuilder $r6, $r7, $r8;
        org.gjt.sp.jedit.bsh.UtilEvalError $r11, $r17, $r19, $r24;
        int $i0, $i1;
        org.gjt.sp.jedit.bsh.This r26, r29, r32, r29_1, r29_2;
        java.lang.Object r28, r31, r28_1, r28_2, r28_3, r31_1, r31_2, r31_3, r31_4, r31_5, r31_6, r31_7, r31_8, r31_9, r31_10, r31_11;

        r0 := @this;

        r1 := @parameter0;

        r25 := @parameter1;

        r2 := @parameter2;

        r3 := @parameter3;

        z0 := @parameter4;

        $z1 = r3.equals("this");

        if $z1 == 0 goto label04;

        if z0 == 0 goto label01;

        $r24 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r24.<init>("Redundant to call .this on This type");

        throw $r24;

     label01:
        r26 = r25.getThis(r2);

        r27 = r26.getNameSpace();

        r28 = r26;

        r4 = org.gjt.sp.jedit.bsh.Name.getClassNameSpace(r27);

(0)     if r4 == null goto label03;

        $r23 = r0.evalName;

        $z15 = org.gjt.sp.jedit.bsh.Name.isCompound($r23);

        if $z15 == 0 goto label02;

        r28_1 = r4.getThis(r2);

(1)     goto label03;

     label02:
(2)     r28_2 = r4.getClassInstance();

     label03:
        r28_3 = Phi(r28 #0, r28_1 #1, r28_2 #2);

        return r28_3;

     label04:
        $z2 = r3.equals("super");

        if $z2 == 0 goto label06;

        r29 = r25.getSuper(r2);

        r30 = r29.getNameSpace();

        $r20 = r30.getParent();

(3)     if $r20 == null goto label05;

        $r21 = r30.getParent();

        $z14 = $r21.isClass;

(4)     if $z14 == 0 goto label05;

        $r22 = r30.getParent();

(5)     r29_1 = $r22.getThis(r2);

     label05:
        r29_2 = Phi(r29 #3, r29 #4, r29_1 #5);

        return r29_2;

     label06:
        r31 = null;

        $z3 = r3.equals("global");

(6)     if $z3 == 0 goto label07;

(7)     r31_1 = r25.getGlobal(r2);

     label07:
        r31_2 = Phi(r31 #6, r31_1 #7);

(8)     if r31_2 != null goto label12;

(9)     if z0 == 0 goto label12;

        $z9 = r3.equals("namespace");

        if $z9 == 0 goto label08;

        r31_3 = r25;

(10)    goto label12;

     label08:
        $z10 = r3.equals("variables");

        if $z10 == 0 goto label09;

        r31_4 = r25.getVariableNames();

(11)    goto label12;

     label09:
        $z11 = r3.equals("methods");

        if $z11 == 0 goto label10;

        r31_5 = r25.getMethodNames();

(12)    goto label12;

     label10:
        $z12 = r3.equals("interpreter");

(13)    if $z12 == 0 goto label12;

        $r18 = r0.lastEvalName;

        $z13 = $r18.equals("this");

        if $z13 == 0 goto label11;

        r31_6 = r2;

(14)    goto label12;

     label11:
        $r19 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r19.<init>("Can only call .interpreter on literal \'this\'");

        throw $r19;

     label12:
        r31_7 = Phi(r31_2 #8, r31_2 #9, r31_3 #10, r31_4 #11, r31_5 #12, r31_2 #13, r31_6 #14);

        if r31_7 != null goto label17;

        if z0 == 0 goto label17;

        $z6 = r3.equals("caller");

        if $z6 == 0 goto label17;

        $r13 = r0.lastEvalName;

        $z7 = $r13.equals("this");

        if $z7 != 0 goto label13;

        $r16 = r0.lastEvalName;

        $z8 = $r16.equals("caller");

        if $z8 == 0 goto label15;

     label13:
        if r1 != null goto label14;

        $r15 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r15.<init>("no callstack");

        throw $r15;

     label14:
        $i0 = r0.callstackDepth;

        $i1 = $i0 + 1;

        r0.callstackDepth = $i1;

        $r14 = r1.get($i1);

        r32 = $r14.getThis(r2);

        goto label16;

     label15:
        $r17 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r17.<init>("Can only call .caller on literal \'this\' or literal \'.caller\'");

        throw $r17;

     label16:
        return r32;

     label17:
(15)    if r31_7 != null goto label20;

(16)    if z0 == 0 goto label20;

        $z4 = r3.equals("callstack");

(17)    if $z4 == 0 goto label20;

        $r10 = r0.lastEvalName;

        $z5 = $r10.equals("this");

        if $z5 == 0 goto label19;

        if r1 != null goto label18;

        $r12 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r12.<init>("no callstack");

        throw $r12;

     label18:
        r31_8 = r1;

(18)    goto label20;

     label19:
        $r11 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r11.<init>("Can only call .callstack on literal \'this\'");

        throw $r11;

     label20:
        r31_9 = Phi(r31_7 #15, r31_7 #16, r31_7 #17, r31_8 #18);

(19)    if r31_9 != null goto label21;

(20)    r31_10 = r25.getVariable(r3);

     label21:
        r31_11 = Phi(r31_9 #19, r31_10 #20);

        if r31_11 != null goto label22;

        $r5 = new org.gjt.sp.jedit.bsh.InterpreterError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<init>();

        $r7 = $r6.append("null this field ref:");

        $r8 = $r7.append(r3);

        $r9 = $r8.toString();

        specialinvoke $r5.<init>($r9);

        throw $r5;

     label22:
        return r31_11;
    }

    static org.gjt.sp.jedit.bsh.NameSpace getClassNameSpace(org.gjt.sp.jedit.bsh.NameSpace)
    {
        org.gjt.sp.jedit.bsh.NameSpace r0, $r1, $r2, $r3;
        boolean $z0, $z1, $z2;

        r0 := @parameter0;

        $z0 = r0.isClass;

        if $z0 == 0 goto label1;

        return r0;

     label1:
        $z1 = r0.isMethod;

        if $z1 == 0 goto label2;

        $r1 = r0.getParent();

        if $r1 == null goto label2;

        $r2 = r0.getParent();

        $z2 = $r2.isClass;

        if $z2 == 0 goto label2;

        $r3 = r0.getParent();

        return $r3;

     label2:
        return null;
    }

    public synchronized java.lang.Class toClass() throws java.lang.ClassNotFoundException, org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Name r0;
        java.lang.Class $r1, $r5, $r14, r16, r16_1, r16_2;
        java.lang.String $r2, $r3, $r9, $r12;
        boolean $z0, $z1;
        org.gjt.sp.jedit.bsh.NameSpace $r4;
        java.lang.ClassNotFoundException $r6;
        java.lang.StringBuilder $r7, $r8, $r10, $r11;
        org.gjt.sp.jedit.bsh.ClassIdentifier $r13;
        org.gjt.sp.jedit.bsh.UtilEvalError $r15;
        java.lang.Object r17, r17_1, r17_2, r17_3, r17_4;

        r0 := @this;

        $r1 = r0.asClass;

        if $r1 == null goto label1;

        $r14 = r0.asClass;

        return $r14;

     label1:
        specialinvoke r0.reset();

        $r2 = r0.evalName;

        $z0 = $r2.equals("var");

        if $z0 == 0 goto label2;

        r0.asClass = null;

        return null;

     label2:
        $r4 = r0.namespace;

        $r3 = r0.evalName;

        r16 = $r4.getClass($r3);

(0)     if r16 != null goto label7;

(1)     r17 = null;

     label3:
(2)     r17_1 = r0.toObject(null, null, 1);

     label4:
(3)     goto label6;

     label5:
        $r15 := @caughtexception;

(4)     r17_2 = Phi(r17 #1, r17_1 #2);

     label6:
        r17_3 = Phi(r17_1 #3, r17_2 #4);

        $z1 = r17_3 instanceof org.gjt.sp.jedit.bsh.ClassIdentifier;

(5)     if $z1 == 0 goto label7;

        $r13 = (org.gjt.sp.jedit.bsh.ClassIdentifier) r17_3;

(6)     r16_1 = $r13.getTargetClass();

     label7:
        r17_4 = Phi(r17 #0, r17_3 #5, r17_3 #6);

        r16_2 = Phi(r16 #0, r16 #5, r16_1 #6);

        if r16_2 != null goto label8;

        $r6 = new java.lang.ClassNotFoundException;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<init>();

        $r8 = $r7.append("Class: ");

        $r9 = r0.value;

        $r10 = $r8.append($r9);

        $r11 = $r10.append(" not found in namespace");

        $r12 = $r11.toString();

        specialinvoke $r6.<init>($r12);

        throw $r6;

     label8:
        r0.asClass = r16_2;

        $r5 = r0.asClass;

        return $r5;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label3 to label4 with label5;
    }

    public synchronized org.gjt.sp.jedit.bsh.LHS toLHS(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Name r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        java.lang.String $r3, $r4, $r5, $r6, $r8, $r10, $r11, $r15, $r17, $r18, $r19, $r20, $r21, $r24, $r29, $r31, $r35, $r37, $r38, $r39, $r41, $r48, $r50, $r56;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, z12;
        org.gjt.sp.jedit.bsh.InterpreterError $r7;
        org.gjt.sp.jedit.bsh.ClassIdentifier $r9;
        org.gjt.sp.jedit.bsh.UtilEvalError $r12, $r26, $r32, $r43, $r44, $r45, $r52, r59;
        java.lang.StringBuilder $r13, $r14, $r16, $r27, $r28, $r30, $r33, $r34, $r36, $r46, $r47, $r49, $r53, $r54, $r55;
        org.gjt.sp.jedit.bsh.LHS $r22, $r40, r57, r61, r62;
        org.gjt.sp.jedit.bsh.This $r23;
        org.gjt.sp.jedit.bsh.NameSpace $r25, $r42;
        org.gjt.sp.jedit.bsh.ReflectError $r51, r63;
        java.lang.Object r58;
        java.lang.Class r60;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        specialinvoke r0.reset();

        $r3 = r0.evalName;

        $z0 = org.gjt.sp.jedit.bsh.Name.isCompound($r3);

        if $z0 != 0 goto label02;

        $r39 = r0.evalName;

        $z10 = $r39.equals("this");

        if $z10 == 0 goto label01;

        $r43 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r43.<init>("Can\'t assign to \'this\'.");

        throw $r43;

     label01:
        $r40 = new org.gjt.sp.jedit.bsh.LHS;

        $r42 = r0.namespace;

        $r41 = r0.evalName;

        specialinvoke $r40.<init>($r42, $r41, 0);

        r57 = $r40;

        return r57;

     label02:
(0)     r58 = null;

     label03:
        r58 = Phi(r58 #0, r58 #2);

        $r4 = r0.evalName;

        if $r4 == null goto label04;

(1)     $r38 = r0.evalName;

        $z9 = org.gjt.sp.jedit.bsh.Name.isCompound($r38);

        if $z9 == 0 goto label04;

        r58 = specialinvoke r0.consumeNextObjectField(r1, r2, 0, 1);

(2)     goto label03;

     label04:
        goto label06;

     label05:
        $r44 := @caughtexception;

        r58 = Phi(r58 #1);

        r59 = $r44;

        $r45 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r46 = new java.lang.StringBuilder;

        specialinvoke $r46.<init>();

        $r47 = $r46.append("LHS evaluation: ");

        $r48 = r59.getMessage();

        $r49 = $r47.append($r48);

        $r50 = $r49.toString();

        specialinvoke $r45.<init>($r50);

        throw $r45;

     label06:
        $r5 = r0.evalName;

        if $r5 != null goto label07;

        $z8 = r58 instanceof org.gjt.sp.jedit.bsh.ClassIdentifier;

        if $z8 == 0 goto label07;

        $r32 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r33 = new java.lang.StringBuilder;

        specialinvoke $r33.<init>();

        $r34 = $r33.append("Can\'t assign to class: ");

        $r35 = r0.value;

        $r36 = $r34.append($r35);

        $r37 = $r36.toString();

        specialinvoke $r32.<init>($r37);

        throw $r32;

     label07:
        if r58 != null goto label08;

        $r26 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r27 = new java.lang.StringBuilder;

        specialinvoke $r27.<init>();

        $r28 = $r27.append("Error in LHS: ");

        $r29 = r0.value;

        $r30 = $r28.append($r29);

        $r31 = $r30.toString();

        specialinvoke $r26.<init>($r31);

        throw $r26;

     label08:
        $z1 = r58 instanceof org.gjt.sp.jedit.bsh.This;

        if $z1 == 0 goto label13;

        $r11 = r0.evalName;

        $z3 = $r11.equals("namespace");

        if $z3 != 0 goto label09;

        $r18 = r0.evalName;

        $z4 = $r18.equals("variables");

        if $z4 != 0 goto label09;

        $r19 = r0.evalName;

        $z5 = $r19.equals("methods");

        if $z5 != 0 goto label09;

        $r20 = r0.evalName;

        $z6 = $r20.equals("caller");

        if $z6 == 0 goto label10;

     label09:
        $r12 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r13 = new java.lang.StringBuilder;

        specialinvoke $r13.<init>();

        $r14 = $r13.append("Can\'t assign to special variable: ");

        $r15 = r0.evalName;

        $r16 = $r14.append($r15);

        $r17 = $r16.toString();

        specialinvoke $r12.<init>($r17);

        throw $r12;

     label10:
        org.gjt.sp.jedit.bsh.Interpreter.debug("found This reference evaluating LHS");

        $r21 = r0.lastEvalName;

        $z7 = $r21.equals("super");

        if $z7 != 0 goto label11;

        $z11 = 1;

(3)     goto label12;

     label11:
(4)     $z11 = 0;

     label12:
        $z11 = Phi($z11 #3, $z11 #4);

        z12 = $z11;

        $r22 = new org.gjt.sp.jedit.bsh.LHS;

        $r23 = (org.gjt.sp.jedit.bsh.This) r58;

        $r25 = $r23.namespace;

        $r24 = r0.evalName;

        specialinvoke $r22.<init>($r25, $r24, z12);

        return $r22;

     label13:
        $r6 = r0.evalName;

        if $r6 == null goto label19;

     label14:
        $z2 = r58 instanceof org.gjt.sp.jedit.bsh.ClassIdentifier;

        if $z2 == 0 goto label16;

        $r9 = (org.gjt.sp.jedit.bsh.ClassIdentifier) r58;

        r60 = $r9.getTargetClass();

        $r10 = r0.evalName;

        r61 = org.gjt.sp.jedit.bsh.Reflect.getLHSStaticField(r60, $r10);

     label15:
        return r61;

     label16:
        $r8 = r0.evalName;

        r62 = org.gjt.sp.jedit.bsh.Reflect.getLHSObjectField(r58, $r8);

     label17:
        return r62;

     label18:
        $r51 := @caughtexception;

        r63 = $r51;

        $r52 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r53 = new java.lang.StringBuilder;

        specialinvoke $r53.<init>();

        $r54 = $r53.append("Field access: ");

        $r55 = $r54.append(r63);

        $r56 = $r55.toString();

        specialinvoke $r52.<init>($r56);

        throw $r52;

     label19:
        $r7 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r7.<init>("Internal error in lhs...");

        throw $r7;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label03 to label04 with label05;
        catch org.gjt.sp.jedit.bsh.ReflectError from label14 to label15 with label18;
        catch org.gjt.sp.jedit.bsh.ReflectError from label16 to label17 with label18;
    }

    public java.lang.Object invokeMethod(org.gjt.sp.jedit.bsh.Interpreter, java.lang.Object[], org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.SimpleNode) throws org.gjt.sp.jedit.bsh.UtilEvalError, org.gjt.sp.jedit.bsh.EvalError, org.gjt.sp.jedit.bsh.ReflectError, java.lang.reflect.InvocationTargetException
    {
        org.gjt.sp.jedit.bsh.Name r0, r46;
        org.gjt.sp.jedit.bsh.Interpreter r1;
        java.lang.Object[] r2;
        org.gjt.sp.jedit.bsh.CallStack r3;
        org.gjt.sp.jedit.bsh.SimpleNode r4;
        java.lang.String r5, r8, $r10, $r12, $r13, $r20, $r25, $r36, $r37;
        org.gjt.sp.jedit.bsh.BshClassManager r6;
        org.gjt.sp.jedit.bsh.NameSpace r7, r44, r45;
        java.lang.Object r9, $r21, $r26, $r39, $r40, $r42, r47;
        java.lang.Class $r11, $r41, r48;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.gjt.sp.jedit.bsh.Primitive $r14, $r27;
        org.gjt.sp.jedit.bsh.ClassIdentifier $r15;
        org.gjt.sp.jedit.bsh.UtilEvalError $r16, $r30;
        java.lang.StringBuilder $r17, $r18, $r19, $r22, $r23, $r24, $r31, $r32, $r33, $r34, $r35;
        org.gjt.sp.jedit.bsh.UtilTargetError $r28;
        java.lang.NullPointerException $r29;
        int $i0;
        org.gjt.sp.jedit.bsh.ClassGenerator $r38;
        org.gjt.sp.jedit.bsh.This r43;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        r4 := @parameter3;

        $r10 = r0.value;

        r5 = org.gjt.sp.jedit.bsh.Name.suffix($r10, 1);

        r6 = r1.getClassManager();

        r7 = r3.top();

        $r11 = r0.classOfStaticMethod;

        if $r11 == null goto label1;

        $r41 = r0.classOfStaticMethod;

        $r42 = org.gjt.sp.jedit.bsh.Reflect.invokeStaticMethod(r6, $r41, r5, r2);

        return $r42;

     label1:
        $r12 = r0.value;

        $z0 = org.gjt.sp.jedit.bsh.Name.isCompound($r12);

        if $z0 != 0 goto label2;

        $r40 = specialinvoke r0.invokeLocalMethod(r1, r2, r3, r4);

        return $r40;

     label2:
        $r13 = r0.value;

        r8 = org.gjt.sp.jedit.bsh.Name.prefix($r13);

        $z1 = r8.equals("super");

        if $z1 == 0 goto label3;

        $r37 = r0.value;

        $i0 = org.gjt.sp.jedit.bsh.Name.countParts($r37);

        if $i0 != 2 goto label3;

        r43 = r7.getThis(r1);

        r44 = r43.getNameSpace();

        r45 = org.gjt.sp.jedit.bsh.Name.getClassNameSpace(r44);

        if r45 == null goto label3;

        r9 = r45.getClassInstance();

        $r38 = org.gjt.sp.jedit.bsh.ClassGenerator.getClassGenerator();

        $r39 = $r38.invokeSuperclassMethod(r6, r9, r5, r2);

        return $r39;

     label3:
        r46 = r7.getNameResolver(r8);

        r47 = r46.toObject(r3, r1);

        $r14 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r47 != $r14 goto label4;

        $r30 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r31 = new java.lang.StringBuilder;

        specialinvoke $r31.<init>();

        $r32 = $r31.append("Attempt to resolve method: ");

        $r33 = $r32.append(r5);

        $r34 = $r33.append("() on undefined variable or class name: ");

        $r35 = $r34.append(r46);

        $r36 = $r35.toString();

        specialinvoke $r30.<init>($r36);

        throw $r30;

     label4:
        $z2 = r47 instanceof org.gjt.sp.jedit.bsh.ClassIdentifier;

        if $z2 != 0 goto label7;

        $z4 = r47 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z4 == 0 goto label6;

        $r27 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r47 != $r27 goto label5;

        $r28 = new org.gjt.sp.jedit.bsh.UtilTargetError;

        $r29 = new java.lang.NullPointerException;

        specialinvoke $r29.<init>("Null Pointer in Method Invocation");

        specialinvoke $r28.<init>($r29);

        throw $r28;

     label5:
        $z5 = org.gjt.sp.jedit.bsh.Interpreter.DEBUG;

        if $z5 == 0 goto label6;

        org.gjt.sp.jedit.bsh.Interpreter.debug("Attempt to access method on primitive... allowing bsh.Primitive to peek through for debugging");

     label6:
        $r26 = org.gjt.sp.jedit.bsh.Reflect.invokeObjectMethod(r47, r5, r2, r1, r3, r4);

        return $r26;

     label7:
        $z3 = org.gjt.sp.jedit.bsh.Interpreter.DEBUG;

        if $z3 == 0 goto label8;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<init>();

        $r23 = $r22.append("invokeMethod: trying static - ");

        $r24 = $r23.append(r46);

        $r25 = $r24.toString();

        org.gjt.sp.jedit.bsh.Interpreter.debug($r25);

     label8:
        $r15 = (org.gjt.sp.jedit.bsh.ClassIdentifier) r47;

        r48 = $r15.getTargetClass();

        r0.classOfStaticMethod = r48;

        if r48 == null goto label9;

        $r21 = org.gjt.sp.jedit.bsh.Reflect.invokeStaticMethod(r6, r48, r5, r2);

        return $r21;

     label9:
        $r16 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<init>();

        $r18 = $r17.append("invokeMethod: unknown target: ");

        $r19 = $r18.append(r46);

        $r20 = $r19.toString();

        specialinvoke $r16.<init>($r20);

        throw $r16;
    }

    private java.lang.Object invokeLocalMethod(org.gjt.sp.jedit.bsh.Interpreter, java.lang.Object[], org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.SimpleNode) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.Name r0;
        org.gjt.sp.jedit.bsh.Interpreter r1;
        java.lang.Object[] r2, $r24;
        org.gjt.sp.jedit.bsh.CallStack r3;
        org.gjt.sp.jedit.bsh.SimpleNode r4;
        java.lang.String r5, $r21, $r23, $r30, $r32;
        java.lang.Class[] r6, $r16;
        java.lang.Object r7, $r13, $r15, $r25, $r26;
        org.gjt.sp.jedit.bsh.UtilEvalError r8, $r33, $r35, $r37, $r39, r42, r43, r45;
        boolean $z0, $z1, $z2;
        org.gjt.sp.jedit.bsh.NameSpace $r9, $r10, $r17;
        org.gjt.sp.jedit.bsh.InterpreterError $r11, $r27;
        java.lang.Class $r12;
        org.gjt.sp.jedit.bsh.BshMethod $r14, r41, r44;
        org.gjt.sp.jedit.bsh.EvalError $r18, $r34, $r36, $r38, $r40;
        java.lang.StringBuilder $r19, $r20, $r22, $r28, $r29, $r31;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        r4 := @parameter3;

        $z0 = org.gjt.sp.jedit.bsh.Interpreter.DEBUG;

        if $z0 == 0 goto label01;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<init>();

        $r29 = $r28.append("invokeLocalMethod: ");

        $r30 = r0.value;

        $r31 = $r29.append($r30);

        $r32 = $r31.toString();

        org.gjt.sp.jedit.bsh.Interpreter.debug($r32);

     label01:
        if r1 != null goto label02;

        $r27 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r27.<init>("invokeLocalMethod: interpreter = null");

        throw $r27;

     label02:
        r5 = r0.value;

        r6 = org.gjt.sp.jedit.bsh.Types.getTypes(r2);

     label03:
        $r9 = r0.namespace;

        r41 = $r9.getMethod(r5, r6);

     label04:
        goto label06;

     label05:
        $r33 := @caughtexception;

        r42 = $r33;

        $r34 = r42.toEvalError("Local method invocation", r4, r3);

        throw $r34;

     label06:
        if r41 == null goto label07;

        $r26 = r41.invoke(r2, r1, r3, r4);

        return $r26;

     label07:
        r1.getClassManager();

     label08:
        $r10 = r0.namespace;

        r7 = $r10.getCommand(r5, r6, r1);

     label09:
        goto label11;

     label10:
        $r39 := @caughtexception;

        r43 = $r39;

        $r40 = r43.toEvalError("Error loading command: ", r4, r3);

        throw $r40;

     label11:
        if r7 != null goto label17;

     label12:
        $r17 = r0.namespace;

        $r16 = newarray (java.lang.Class)[2];

        $r16[0] = null;

        $r16[1] = null;

        r44 = $r17.getMethod("invoke", $r16);

     label13:
        goto label15;

     label14:
        $r37 := @caughtexception;

        r8 = $r37;

        $r38 = r8.toEvalError("Local method invocation", r4, r3);

        throw $r38;

     label15:
        if r44 == null goto label16;

        $r24 = newarray (java.lang.Object)[2];

        $r24[0] = r5;

        $r24[1] = r2;

        $r25 = r44.invoke($r24, r1, r3, r4);

        return $r25;

     label16:
        $r18 = new org.gjt.sp.jedit.bsh.EvalError;

        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<init>();

        $r20 = $r19.append("Command not found: ");

        $r21 = org.gjt.sp.jedit.bsh.StringUtil.methodString(r5, r6);

        $r22 = $r20.append($r21);

        $r23 = $r22.toString();

        specialinvoke $r18.<init>($r23, r4, r3);

        throw $r18;

     label17:
        $z1 = r7 instanceof org.gjt.sp.jedit.bsh.BshMethod;

        if $z1 == 0 goto label18;

        $r14 = (org.gjt.sp.jedit.bsh.BshMethod) r7;

        $r15 = $r14.invoke(r2, r1, r3, r4);

        return $r15;

     label18:
        $z2 = r7 instanceof java.lang.Class;

        if $z2 == 0 goto label22;

     label19:
        $r12 = (java.lang.Class) r7;

        $r13 = org.gjt.sp.jedit.bsh.Reflect.invokeCompiledCommand($r12, r2, r1, r3);

     label20:
        return $r13;

     label21:
        $r35 := @caughtexception;

        r45 = $r35;

        $r36 = r45.toEvalError("Error invoking compiled command: ", r4, r3);

        throw $r36;

     label22:
        $r11 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r11.<init>("invalid command type");

        throw $r11;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label03 to label04 with label05;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label08 to label09 with label10;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label12 to label13 with label14;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label19 to label20 with label21;
    }

    public static boolean isCompound(java.lang.String)
    {
        java.lang.String r0;
        int $i0;
        boolean $z0, $z0_1, $z0_2;

        r0 := @parameter0;

        $i0 = r0.indexOf(46);

        if $i0 == -1 goto label1;

        $z0 = 1;

(0)     goto label2;

     label1:
(1)     $z0_1 = 0;

     label2:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        return $z0_2;
    }

    static int countParts(java.lang.String)
    {
        java.lang.String r0;
        int $i0, $i1, $i2, i3, i4;

        r0 := @parameter0;

        if r0 != null goto label1;

        return 0;

     label1:
        i3 = 0;

(0)     i4 = -1;

     label2:
        i4 = Phi(i4 #0, i4 #1);

        i3 = Phi(i3 #0, i3 #1);

        $i0 = i4 + 1;

        $i1 = r0.indexOf(46, $i0);

        i4 = $i1;

        if $i1 == -1 goto label3;

        i3 = i3 + 1;

(1)     goto label2;

     label3:
        $i2 = i3 + 1;

        return $i2;
    }

    static java.lang.String prefix(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0;

        $z0 = org.gjt.sp.jedit.bsh.Name.isCompound(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i0 = org.gjt.sp.jedit.bsh.Name.countParts(r0);

        $i1 = $i0 - 1;

        $r1 = org.gjt.sp.jedit.bsh.Name.prefix(r0, $i1);

        return $r1;
    }

    static java.lang.String prefix(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0, $i1, $i2, i3, i4;

        r0 := @parameter0;

        i0 := @parameter1;

        if i0 >= 1 goto label1;

        return null;

     label1:
        i3 = 0;

(0)     i4 = -1;

     label2:
        i3 = Phi(i3 #0, i3 #3);

        i4 = Phi(i4 #0, i4 #3);

        $i1 = i4 + 1;

        $i2 = r0.indexOf(46, $i1);

        i4 = $i2;

(1)     if $i2 == -1 goto label3;

        i3 = i3 + 1;

(2)     if i3 >= i0 goto label3;

(3)     goto label2;

     label3:
        i3 = Phi(i3 #1, i3 #2);

        if i4 != -1 goto label4;

        $r1 = r0;

(4)     goto label5;

     label4:
(5)     $r1 = r0.substring(0, i4);

     label5:
        $r1 = Phi($r1 #4, $r1 #5);

        return $r1;
    }

    static java.lang.String suffix(java.lang.String)
    {
        java.lang.String r0, $r1;
        boolean $z0;
        int $i0, $i1;

        r0 := @parameter0;

        $z0 = org.gjt.sp.jedit.bsh.Name.isCompound(r0);

        if $z0 != 0 goto label1;

        return null;

     label1:
        $i0 = org.gjt.sp.jedit.bsh.Name.countParts(r0);

        $i1 = $i0 - 1;

        $r1 = org.gjt.sp.jedit.bsh.Name.suffix(r0, $i1);

        return $r1;
    }

    public static java.lang.String suffix(java.lang.String, int)
    {
        java.lang.String r0, $r1;
        int i0, $i1, $i2, $i3, $i4, i5, i6;

        r0 := @parameter0;

        i0 := @parameter1;

        if i0 >= 1 goto label1;

        return null;

     label1:
        i5 = 0;

        $i1 = r0.length();

(0)     i6 = $i1 + 1;

     label2:
        i6 = Phi(i6 #0, i6 #3);

        i5 = Phi(i5 #0, i5 #3);

        $i2 = i6 - 1;

        $i3 = r0.lastIndexOf(46, $i2);

        i6 = $i3;

(1)     if $i3 == -1 goto label3;

        i5 = i5 + 1;

(2)     if i5 >= i0 goto label3;

(3)     goto label2;

     label3:
        i5 = Phi(i5 #1, i5 #2);

        if i6 != -1 goto label4;

        $r1 = r0;

(4)     goto label5;

     label4:
        $i4 = i6 + 1;

(5)     $r1 = r0.substring($i4);

     label5:
        $r1 = Phi($r1 #4, $r1 #5);

        return $r1;
    }

    public java.lang.String toString()
    {
        org.gjt.sp.jedit.bsh.Name r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 = r0.value;

        return $r1;
    }

    static void <clinit>()
    {
        org.gjt.sp.jedit.bsh.Name.FINISHED = null;

        return;
    }
}
