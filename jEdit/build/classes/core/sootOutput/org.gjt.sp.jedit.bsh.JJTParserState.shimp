class org.gjt.sp.jedit.bsh.JJTParserState extends java.lang.Object
{
    private java.util.Stack nodes;
    private java.util.Stack marks;
    private int sp;
    private int mk;
    private boolean node_created;

    void <init>()
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        java.util.Stack $r1, $r2;

        r0 := @this;

        specialinvoke r0.<init>();

        $r1 = new java.util.Stack;

        specialinvoke $r1.<init>();

        r0.nodes = $r1;

        $r2 = new java.util.Stack;

        specialinvoke $r2.<init>();

        r0.marks = $r2;

        r0.sp = 0;

        r0.mk = 0;

        return;
    }

    boolean nodeCreated()
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        boolean $z0;

        r0 := @this;

        $z0 = r0.node_created;

        return $z0;
    }

    void reset()
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        java.util.Stack $r1, $r2;

        r0 := @this;

        $r1 = r0.nodes;

        $r1.removeAllElements();

        $r2 = r0.marks;

        $r2.removeAllElements();

        r0.sp = 0;

        r0.mk = 0;

        return;
    }

    org.gjt.sp.jedit.bsh.Node rootNode()
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        java.util.Stack $r1;
        java.lang.Object $r2;
        org.gjt.sp.jedit.bsh.Node $r3;

        r0 := @this;

        $r1 = r0.nodes;

        $r2 = $r1.elementAt(0);

        $r3 = (org.gjt.sp.jedit.bsh.Node) $r2;

        return $r3;
    }

    void pushNode(org.gjt.sp.jedit.bsh.Node)
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        org.gjt.sp.jedit.bsh.Node r1;
        java.util.Stack $r2;
        int $i0, $i1;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.nodes;

        $r2.push(r1);

        $i0 = r0.sp;

        $i1 = $i0 + 1;

        r0.sp = $i1;

        return;
    }

    org.gjt.sp.jedit.bsh.Node popNode()
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        int $i0, $i1, $i2, $i3;
        java.util.Stack $r1, $r4;
        java.lang.Object $r2, $r5;
        org.gjt.sp.jedit.bsh.Node $r3;
        java.lang.Integer $r6;

        r0 := @this;

        $i0 = r0.sp;

        $i1 = $i0 - 1;

        r0.sp = $i1;

        $i2 = r0.mk;

        if $i1 >= $i2 goto label1;

        $r4 = r0.marks;

        $r5 = $r4.pop();

        $r6 = (java.lang.Integer) $r5;

        $i3 = $r6.intValue();

        r0.mk = $i3;

     label1:
        $r1 = r0.nodes;

        $r2 = $r1.pop();

        $r3 = (org.gjt.sp.jedit.bsh.Node) $r2;

        return $r3;
    }

    org.gjt.sp.jedit.bsh.Node peekNode()
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        java.util.Stack $r1;
        java.lang.Object $r2;
        org.gjt.sp.jedit.bsh.Node $r3;

        r0 := @this;

        $r1 = r0.nodes;

        $r2 = $r1.peek();

        $r3 = (org.gjt.sp.jedit.bsh.Node) $r2;

        return $r3;
    }

    int nodeArity()
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        int $i0, $i1, $i2;

        r0 := @this;

        $i1 = r0.sp;

        $i0 = r0.mk;

        $i2 = $i1 - $i0;

        return $i2;
    }

    void clearNodeScope(org.gjt.sp.jedit.bsh.Node)
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        org.gjt.sp.jedit.bsh.Node r1;
        int $i0, $i1, $i2;
        java.util.Stack $r2;
        java.lang.Object $r3;
        java.lang.Integer $r4;

        r0 := @this;

        r1 := @parameter0;

     label1:
        $i1 = r0.sp;

        $i0 = r0.mk;

        if $i1 <= $i0 goto label2;

        r0.popNode();

        goto label1;

     label2:
        $r2 = r0.marks;

        $r3 = $r2.pop();

        $r4 = (java.lang.Integer) $r3;

        $i2 = $r4.intValue();

        r0.mk = $i2;

        return;
    }

    void openNodeScope(org.gjt.sp.jedit.bsh.Node)
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        org.gjt.sp.jedit.bsh.Node r1;
        java.lang.Integer $r2;
        int $i0, $i1;
        java.util.Stack $r3;

        r0 := @this;

        r1 := @parameter0;

        $r3 = r0.marks;

        $r2 = new java.lang.Integer;

        $i0 = r0.mk;

        specialinvoke $r2.<init>($i0);

        $r3.push($r2);

        $i1 = r0.sp;

        r0.mk = $i1;

        r1.jjtOpen();

        return;
    }

    void closeNodeScope(org.gjt.sp.jedit.bsh.Node, int)
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        org.gjt.sp.jedit.bsh.Node r1, r2;
        java.util.Stack $r3;
        java.lang.Object $r4;
        java.lang.Integer $r5;
        int $i0, $i1, i2;

        r0 := @this;

        r1 := @parameter0;

        i2 := @parameter1;

        $r3 = r0.marks;

        $r4 = $r3.pop();

        $r5 = (java.lang.Integer) $r4;

        $i0 = $r5.intValue();

(0)     r0.mk = $i0;

     label1:
        i2 = Phi(i2 #0, i2 #1);

        $i1 = i2;

        i2 = i2 + -1;

        if $i1 <= 0 goto label2;

        r2 = r0.popNode();

        r2.jjtSetParent(r1);

        r1.jjtAddChild(r2, i2);

(1)     goto label1;

     label2:
        r1.jjtClose();

        r0.pushNode(r1);

        r0.node_created = 1;

        return;
    }

    void closeNodeScope(org.gjt.sp.jedit.bsh.Node, boolean)
    {
        org.gjt.sp.jedit.bsh.JJTParserState r0;
        org.gjt.sp.jedit.bsh.Node r1, r2;
        boolean z0;
        java.util.Stack $r3, $r6;
        java.lang.Object $r4, $r7;
        java.lang.Integer $r5, $r8;
        int $i0, $i1, $i2, i3;

        r0 := @this;

        r1 := @parameter0;

        z0 := @parameter1;

        if z0 == 0 goto label3;

        i3 = r0.nodeArity();

        $r6 = r0.marks;

        $r7 = $r6.pop();

        $r8 = (java.lang.Integer) $r7;

        $i1 = $r8.intValue();

(0)     r0.mk = $i1;

     label1:
        i3 = Phi(i3 #0, i3 #1);

        $i2 = i3;

        i3 = i3 + -1;

        if $i2 <= 0 goto label2;

        r2 = r0.popNode();

        r2.jjtSetParent(r1);

        r1.jjtAddChild(r2, i3);

(1)     goto label1;

     label2:
        r1.jjtClose();

        r0.pushNode(r1);

        r0.node_created = 1;

(2)     goto label4;

     label3:
        $r3 = r0.marks;

        $r4 = $r3.pop();

        $r5 = (java.lang.Integer) $r4;

        $i0 = $r5.intValue();

        r0.mk = $i0;

(3)     r0.node_created = 0;

     label4:
        i3 = Phi(i3 #2, i3 #3);

        return;
    }
}
