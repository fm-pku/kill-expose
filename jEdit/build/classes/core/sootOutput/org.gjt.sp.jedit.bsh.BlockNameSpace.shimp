class org.gjt.sp.jedit.bsh.BlockNameSpace extends org.gjt.sp.jedit.bsh.NameSpace
{

    public void <init>(org.gjt.sp.jedit.bsh.NameSpace) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BlockNameSpace r0;
        org.gjt.sp.jedit.bsh.NameSpace r1;
        java.lang.StringBuilder $r2, $r4, $r5;
        java.lang.String $r3, $r6;

        r0 := @this;

        r1 := @parameter0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<init>();

        $r3 = r1.getName();

        $r4 = $r2.append($r3);

        $r5 = $r4.append("/BlockNameSpace");

        $r6 = $r5.toString();

        specialinvoke r0.<init>(r1, $r6);

        return;
    }

    public void setVariable(java.lang.String, java.lang.Object, boolean, boolean) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.BlockNameSpace r0;
        java.lang.String r1;
        java.lang.Object r2;
        boolean z0, z1, $z2;
        org.gjt.sp.jedit.bsh.NameSpace $r3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        z0 := @parameter2;

        z1 := @parameter3;

        $z2 = specialinvoke r0.weHaveVar(r1);

        if $z2 == 0 goto label1;

        specialinvoke r0.setVariable(r1, r2, z0, 0);

        goto label2;

     label1:
        $r3 = r0.getParent();

        $r3.setVariable(r1, r2, z0, z1);

     label2:
        return;
    }

    public void setBlockVariable(java.lang.String, java.lang.Object) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.BlockNameSpace r0;
        java.lang.String r1;
        java.lang.Object r2;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        specialinvoke r0.setVariable(r1, r2, 0, 0);

        return;
    }

    private boolean weHaveVar(java.lang.String)
    {
        org.gjt.sp.jedit.bsh.BlockNameSpace r0;
        java.lang.String r1;
        org.gjt.sp.jedit.bsh.UtilEvalError r2, $r4;
        org.gjt.sp.jedit.bsh.Variable $r3;
        boolean $z0, $z0_1, $z0_2;

        r0 := @this;

        r1 := @parameter0;

     label1:
        $r3 = specialinvoke r0.getVariableImpl(r1, 0);

        if $r3 == null goto label2;

        $z0 = 1;

(0)     goto label3;

     label2:
(1)     $z0_1 = 0;

     label3:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        return $z0_2;

     label4:
        $r4 := @caughtexception;

        r2 = $r4;

        return 0;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label1 to label3 with label4;
    }

    private org.gjt.sp.jedit.bsh.NameSpace getNonBlockParent()
    {
        org.gjt.sp.jedit.bsh.BlockNameSpace r0, $r2;
        org.gjt.sp.jedit.bsh.NameSpace r1, $r3;
        boolean $z0;

        r0 := @this;

        r1 = specialinvoke r0.getParent();

        $z0 = r1 instanceof org.gjt.sp.jedit.bsh.BlockNameSpace;

        if $z0 == 0 goto label1;

        $r2 = (org.gjt.sp.jedit.bsh.BlockNameSpace) r1;

        $r3 = specialinvoke $r2.getNonBlockParent();

        return $r3;

     label1:
        return r1;
    }

    org.gjt.sp.jedit.bsh.This getThis(org.gjt.sp.jedit.bsh.Interpreter)
    {
        org.gjt.sp.jedit.bsh.BlockNameSpace r0;
        org.gjt.sp.jedit.bsh.Interpreter r1;
        org.gjt.sp.jedit.bsh.NameSpace $r2;
        org.gjt.sp.jedit.bsh.This $r3;

        r0 := @this;

        r1 := @parameter0;

        $r2 = specialinvoke r0.getNonBlockParent();

        $r3 = $r2.getThis(r1);

        return $r3;
    }

    public org.gjt.sp.jedit.bsh.This getSuper(org.gjt.sp.jedit.bsh.Interpreter)
    {
        org.gjt.sp.jedit.bsh.BlockNameSpace r0;
        org.gjt.sp.jedit.bsh.Interpreter r1;
        org.gjt.sp.jedit.bsh.NameSpace $r2;
        org.gjt.sp.jedit.bsh.This $r3;

        r0 := @this;

        r1 := @parameter0;

        $r2 = specialinvoke r0.getNonBlockParent();

        $r3 = $r2.getSuper(r1);

        return $r3;
    }

    public void importClass(java.lang.String)
    {
        org.gjt.sp.jedit.bsh.BlockNameSpace r0;
        java.lang.String r1;
        org.gjt.sp.jedit.bsh.NameSpace $r2;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.getParent();

        $r2.importClass(r1);

        return;
    }

    public void importPackage(java.lang.String)
    {
        org.gjt.sp.jedit.bsh.BlockNameSpace r0;
        java.lang.String r1;
        org.gjt.sp.jedit.bsh.NameSpace $r2;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.getParent();

        $r2.importPackage(r1);

        return;
    }

    public void setMethod(java.lang.String, org.gjt.sp.jedit.bsh.BshMethod) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.BlockNameSpace r0;
        java.lang.String r1;
        org.gjt.sp.jedit.bsh.BshMethod r2;
        org.gjt.sp.jedit.bsh.NameSpace $r3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r3 = r0.getParent();

        $r3.setMethod(r1, r2);

        return;
    }
}
