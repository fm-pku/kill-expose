public class org.gjt.sp.jedit.Mode extends java.lang.Object
{
    protected final java.lang.String name;
    protected final java.util.Map props;
    private java.util.regex.Matcher firstlineMatcher;
    private java.util.regex.Matcher filepathMatcher;
    protected org.gjt.sp.jedit.syntax.TokenMarker marker;
    private java.util.List indentRules;
    private java.lang.String electricKeys;
    private boolean ignoreWhitespace;
    private boolean isUserMode;

    public void <init>(java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1;
        java.util.Hashtable $r2;

        r0 := @this;

        r1 := @parameter0;

        specialinvoke r0.<init>();

        r0.name = r1;

        r0.ignoreWhitespace = 1;

        $r2 = new java.util.Hashtable;

        Packer.Unpack(r0);

        specialinvoke $r2.<init>();

        r0.props = $r2;

        Packer.Pack(r0);

        return;
    }

    public void init()
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.Object $r1, $r2;
        boolean $z0, $z1, $z2, $z3;
        java.lang.String $r3, $r12, $r14, r15, r16, r17, r18, r17_1, r17_2, r17_3, r17_4, r17_5;
        java.util.regex.Pattern $r4, $r6;
        java.util.regex.Matcher $r5, $r7;
        java.lang.Object[] $r8;
        java.util.regex.PatternSyntaxException $r9, r19;
        java.lang.StringBuilder $r10, $r11, $r13;

        r0 := @this;

     label1:
        Packer.Unpack(r0);

(0)     r0.filepathMatcher = null;

        Packer.Pack(r0);

        $r1 = r0.getProperty("filenameGlob");

        r15 = (java.lang.String) $r1;

(1)     if r15 == null goto label5;

        $z1 = r15.isEmpty();

(2)     if $z1 != 0 goto label5;

        r16 = org.gjt.sp.util.StandardUtilities.globToRE(r15);

        $z2 = r16.contains("/");

        if $z2 != 0 goto label2;

        $z3 = r16.contains("\\\\");

        if $z3 == 0 goto label3;

     label2:
(3)     r17_1 = r16.replaceAll("/|\\\\\\\\", "[/\\\\\\\\]");

(4)     goto label4;

     label3:
        $r8 = newarray (java.lang.Object)[1];

        $r8[0] = r16;

(5)     r17 = java.lang.String.format("(?:.*[/\\\\])?%s", $r8);

     label4:
        r17_2 = Phi(r17_1 #4, r17 #5);

(6)     $r6 = java.util.regex.Pattern.compile(r17_2, 2);

        $r7 = $r6.matcher("");

        Packer.Unpack(r0);

(7)     r0.filepathMatcher = $r7;

     label5:
        Packer.Unpack(r0);

        Packer.Unpack(r0);

        r17_3 = Phi(r17 #1, r17 #2, r17_2 #7);

(8)     r0.firstlineMatcher = null;

        Packer.Pack(r0);

        $r2 = r0.getProperty("firstlineGlob");

        r18 = (java.lang.String) $r2;

        if r18 == null goto label6;

        $z0 = r18.isEmpty();

        if $z0 != 0 goto label6;

        $r3 = org.gjt.sp.util.StandardUtilities.globToRE(r18);

        $r4 = java.util.regex.Pattern.compile($r3, 2);

        $r5 = $r4.matcher("");

        Packer.Unpack(r0);

        r0.firstlineMatcher = $r5;

     label6:
        Packer.Unpack(r0);

        Packer.Unpack(r0);

(9)     goto label8;

     label7:
        $r9 := @caughtexception;

        r17_4 = Phi(r17 #0, r17_1 #3, r17_2 #6, r17_3 #8);

        r19 = $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<init>();

        $r11 = $r10.append("Invalid filename/firstline globs in mode ");

        $r12 = r0.name;

        $r13 = $r11.append($r12);

        $r14 = $r13.toString();

        org.gjt.sp.util.Log.log(9, r0, $r14);

(10)    org.gjt.sp.util.Log.log(9, r0, r19);

     label8:
        Packer.Unpack(r0);

        r17_5 = Phi(r17_3 #9, r17_4 #10);

        r0.marker = null;

        Packer.Pack(r0);

        return;

        catch java.util.regex.PatternSyntaxException from label1 to label6 with label7;
    }

    public org.gjt.sp.jedit.syntax.TokenMarker getTokenMarker()
    {
        org.gjt.sp.jedit.Mode r0;
        org.gjt.sp.jedit.syntax.TokenMarker $r1;

        r0 := @this;

        r0.loadIfNecessary();

        $r1 = r0.marker;

        return $r1;
    }

    public void setTokenMarker(org.gjt.sp.jedit.syntax.TokenMarker)
    {
        org.gjt.sp.jedit.Mode r0;
        org.gjt.sp.jedit.syntax.TokenMarker r1;

        r0 := @this;

        r1 := @parameter0;

        Packer.Unpack(r0);

        r0.marker = r1;

        Packer.Pack(r0);

        return;
    }

    public void loadIfNecessary()
    {
        org.gjt.sp.jedit.Mode r0;
        org.gjt.sp.jedit.syntax.TokenMarker $r1, $r3;
        org.gjt.sp.jedit.syntax.ModeProvider $r2;

        r0 := @this;

        $r1 = r0.marker;

        if $r1 != null goto label1;

        $r2 = org.gjt.sp.jedit.syntax.ModeProvider.instance;

        $r2.loadMode(r0);

        $r3 = r0.marker;

        if $r3 != null goto label1;

        org.gjt.sp.util.Log.log(9, r0, "Mode not correctly loaded, token marker is still null");

     label1:
        return;
    }

    public boolean isUserMode()
    {
        org.gjt.sp.jedit.Mode r0;
        boolean $z0;

        r0 := @this;

        $z0 = r0.isUserMode;

        return $z0;
    }

    public void setUserMode(boolean)
    {
        org.gjt.sp.jedit.Mode r0;
        boolean z0;

        r0 := @this;

        z0 := @parameter0;

        r0.isUserMode = z0;

        return;
    }

    public java.lang.Object getProperty(java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1;
        java.util.Map $r2;
        java.lang.Object $r3;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.props;

        Packer.Unpack(r0);

        $r3 = $r2.get(r1);

        Packer.Pack(r0);

        return $r3;
    }

    public boolean getBooleanProperty(java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1;
        java.lang.Object r2;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        r2 = r0.getProperty(r1);

        $z0 = org.gjt.sp.util.StandardUtilities.getBoolean(r2, 0);

        return $z0;
    }

    public void setProperty(java.lang.String, java.lang.Object)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1;
        java.lang.Object r2;
        java.util.Map $r3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r3 = r0.props;

        Packer.Unpack(r0);

        $r3.put(r1, r2);

        Packer.Pack(r0);

        return;
    }

    public void unsetProperty(java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1;
        java.util.Map $r2;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.props;

        Packer.Unpack(r0);

        $r2.remove(r1);

        Packer.Pack(r0);

        return;
    }

    public void setProperties(java.util.Map)
    {
        org.gjt.sp.jedit.Mode r0;
        java.util.Map r1, $r5;
        java.lang.String $r2, $r4;
        java.lang.Object $r3;
        boolean $z0, $z1, $z1_1, $z1_2;

        r0 := @this;

        r1 := @parameter0;

        if r1 != null goto label1;

        return;

     label1:
        $r2 = "false";

        $r3 = r1.get("ignoreWhitespace");

        $r4 = (java.lang.String) $r3;

        $z0 = $r2.equalsIgnoreCase($r4);

        if $z0 != 0 goto label2;

        $z1 = 1;

(0)     goto label3;

     label2:
(1)     $z1_1 = 0;

     label3:
        $z1_2 = Phi($z1 #0, $z1_1 #1);

        r0.ignoreWhitespace = $z1_2;

        $r5 = r0.props;

        Packer.Unpack(r0);

        $r5.putAll(r1);

        Packer.Pack(r0);

        return;
    }

    public boolean accept(java.lang.String, java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1, r2;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $z0 = r0.accept(null, r1, r2);

        return $z0;
    }

    public boolean accept(java.lang.String, java.lang.String, java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1, r2, r3;
        boolean $z0, $z1, $z2, $z3, $z3_1, $z3_2;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        $z0 = r0.acceptFile(r1, r2);

        if $z0 != 0 goto label1;

        $z1 = r0.acceptIdentical(r1, r2);

        if $z1 != 0 goto label1;

        $z2 = r0.acceptFirstLine(r3);

        if $z2 == 0 goto label2;

     label1:
        $z3_1 = 1;

(0)     goto label3;

     label2:
(1)     $z3 = 0;

     label3:
        $z3_2 = Phi($z3_1 #0, $z3 #1);

        return $z3_2;
    }

    public boolean acceptFilename(java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        $z0 = r0.acceptFile(null, r1);

        return $z0;
    }

    public boolean acceptFile(java.lang.String, java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1, r2;
        java.util.regex.Matcher $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z2_1, $z2_2;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r3 = r0.filepathMatcher;

        if $r3 != null goto label1;

        return 0;

     label1:
        if r2 == null goto label2;

        $r6 = r0.filepathMatcher;

        Packer.Unpack(r0);

        $r7 = $r6.reset(r2);

        Packer.Pack(r0);

        $z1 = $r7.matches();

        if $z1 != 0 goto label3;

     label2:
        if r1 == null goto label4;

        Packer.Unpack(r0);

        $r4 = r0.filepathMatcher;

        $r5 = $r4.reset(r1);

        Packer.Pack(r0);

        $z0 = $r5.matches();

        if $z0 == 0 goto label4;

     label3:
        $z2_1 = 1;

(0)     goto label5;

     label4:
(1)     $z2 = 0;

     label5:
        $z2_2 = Phi($z2_1 #0, $z2 #1);

        return $z2_2;
    }

    public boolean acceptFilenameIdentical(java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        $z0 = r0.acceptIdentical(null, r1);

        return $z0;
    }

    public boolean acceptIdentical(java.lang.String, java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1, r2, r3, r4;
        int i0, i1, i2, $i3;
        java.lang.Object $r5;
        boolean $z0, $z1;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r5 = r0.getProperty("filenameGlob");

        r3 = (java.lang.String) $r5;

        if r3 != null goto label1;

        return 0;

     label1:
        if r2 == null goto label2;

        $z1 = r2.equalsIgnoreCase(r3);

        if $z1 == 0 goto label2;

        return 1;

     label2:
        if r1 == null goto label3;

        i0 = r1.lastIndexOf(47);

        i1 = r1.lastIndexOf(92);

        i2 = java.lang.Math.max(i0, i1);

        $i3 = i2 + 1;

        r4 = r1.substring($i3);

        $z0 = r4.equalsIgnoreCase(r3);

        return $z0;

     label3:
        return 0;
    }

    public boolean acceptFirstLine(java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1;
        java.util.regex.Matcher $r2, $r3, $r4;
        boolean $z0, $z1, $z1_1, $z1_2;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.firstlineMatcher;

        if $r2 != null goto label1;

        return 0;

     label1:
        if r1 == null goto label2;

        $r3 = r0.firstlineMatcher;

        Packer.Unpack(r0);

        $r4 = $r3.reset(r1);

        Packer.Pack(r0);

        $z0 = $r4.matches();

        if $z0 == 0 goto label2;

        $z1 = 1;

(0)     goto label3;

     label2:
(1)     $z1_1 = 0;

     label3:
        $z1_2 = Phi($z1 #0, $z1_1 #1);

        return $z1_2;
    }

    public java.lang.String getName()
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 = r0.name;

        return $r1;
    }

    public java.lang.String toString()
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 = r0.name;

        return $r1;
    }

    public boolean getIgnoreWhitespace()
    {
        org.gjt.sp.jedit.Mode r0;
        boolean $z0;

        r0 := @this;

        $z0 = r0.ignoreWhitespace;

        return $z0;
    }

    public synchronized java.util.List getIndentRules()
    {
        org.gjt.sp.jedit.Mode r0;
        java.util.List $r1, $r2;

        r0 := @this;

        $r1 = r0.indentRules;

        if $r1 != null goto label1;

        specialinvoke r0.initIndentRules();

     label1:
        $r2 = r0.indentRules;

        return $r2;
    }

    public synchronized boolean isElectricKey(char)
    {
        org.gjt.sp.jedit.Mode r0;
        char c0;
        java.lang.String[] r1, r3, $r8;
        java.lang.StringBuilder r2, $r9;
        int i1, $i2, i3;
        java.lang.String r4, r5, $r6, $r7, $r10;
        java.lang.Object $r11;
        boolean $z0;

        r0 := @this;

        c0 := @parameter0;

        $r6 = r0.electricKeys;

(0)     if $r6 != null goto label4;

        $r8 = newarray (java.lang.String)[3];

        $r8[0] = "indentOpenBrackets";

        $r8[1] = "indentCloseBrackets";

        $r8[2] = "electricKeys";

        r1 = $r8;

        $r9 = new java.lang.StringBuilder;

        specialinvoke $r9.<init>();

        r2 = $r9;

        r3 = r1;

        i1 = lengthof r3;

(1)     i3 = 0;

     label1:
        i3 = Phi(i3 #1, i3 #2);

        if i3 >= i1 goto label3;

        r4 = r3[i3];

        $r11 = r0.getProperty(r4);

        r5 = (java.lang.String) $r11;

        if r5 == null goto label2;

        r2.append(r5);

     label2:
        i3 = i3 + 1;

(2)     goto label1;

     label3:
        $r10 = r2.toString();

(3)     r0.electricKeys = $r10;

     label4:
        i3 = Phi(i3 #0, i3 #3);

        $r7 = r0.electricKeys;

        $i2 = $r7.indexOf(c0);

        if $i2 < 0 goto label5;

        $z0 = 1;

(4)     goto label6;

     label5:
(5)     $z0 = 0;

     label6:
        $z0 = Phi($z0 #4, $z0 #5);

        return $z0;
    }

    private void initIndentRules()
    {
        org.gjt.sp.jedit.Mode r0;
        java.util.LinkedList r1, $r3;
        java.lang.String[] r2, $r4, $r5, $r6, r14, r15, r17;
        char c0, c9;
        int $i1, $i2, $i3, i4, i5, i6, i7, i8;
        boolean $z0, $z1;
        java.util.List $r7;
        org.gjt.sp.jedit.indent.WhitespaceRule $r8;
        java.lang.Object $r9;
        org.gjt.sp.jedit.indent.DeepIndentRule $r10;
        java.lang.String $r11, $r12, r16, r19;
        org.gjt.sp.jedit.indent.IndentRule r13, r18;

        r0 := @this;

        $r3 = new java.util.LinkedList;

        specialinvoke $r3.<init>();

        r1 = $r3;

        $r4 = newarray (java.lang.String)[2];

        $r4[0] = "indentNextLine";

        $r4[1] = "indentNextLines";

        r2 = $r4;

(0)     i4 = 0;

     label01:
        i4 = Phi(i4 #0, i4 #1);

        $i1 = lengthof r2;

        if i4 >= $i1 goto label03;

        $r12 = r2[i4];

        r13 = specialinvoke r0.createRegexpIndentRule($r12);

        if r13 == null goto label02;

        r1.add(r13);

     label02:
        i4 = i4 + 1;

(1)     goto label01;

     label03:
        $r5 = newarray (java.lang.String)[4];

        $r5[0] = "indentOpenBracket";

        $r5[1] = "indentCloseBracket";

        $r5[2] = "unalignedOpenBracket";

        $r5[3] = "unalignedCloseBracket";

        r14 = $r5;

        r15 = r14;

        i5 = lengthof r15;

(2)     i6 = 0;

     label04:
        i4 = Phi(i4 #2, i4 #3);

        i6 = Phi(i6 #2, i6 #3);

        if i6 >= i5 goto label05;

        r16 = r15[i6];

        specialinvoke r0.createBracketIndentRules(r16, r1);

        i6 = i6 + 1;

(3)     goto label04;

     label05:
        $r6 = newarray (java.lang.String)[2];

        $r6[0] = "unindentThisLine";

        $r6[1] = "unindentNextLines";

        r17 = $r6;

(4)     i7 = 0;

     label06:
        i4 = Phi(i4 #4, i4 #5);

        i7 = Phi(i7 #4, i7 #5);

        i6 = Phi(i6 #4, i6 #5);

        $i2 = lengthof r17;

        if i7 >= $i2 goto label08;

        $r11 = r17[i7];

        r18 = specialinvoke r0.createRegexpIndentRule($r11);

        if r18 == null goto label07;

        r1.add(r18);

     label07:
        i7 = i7 + 1;

(5)     goto label06;

     label08:
        $z0 = r0.getBooleanProperty("deepIndent");

(6)     if $z0 == 0 goto label11;

        $r9 = r0.getProperty("unalignedOpenBrackets");

        r19 = (java.lang.String) $r9;

(7)     if r19 == null goto label11;

(8)     i8 = 0;

     label09:
        i4 = Phi(i4 #8, i4 #10);

        i8 = Phi(i8 #8, i8 #10);

        i7 = Phi(i7 #8, i7 #10);

        i6 = Phi(i6 #8, i6 #10);

        $i3 = r19.length();

(9)     if i8 >= $i3 goto label11;

        c9 = r19.charAt(i8);

        c0 = org.gjt.sp.jedit.TextUtilities.getComplementaryBracket(c9, null);

        if c0 == 0 goto label10;

        $r10 = new org.gjt.sp.jedit.indent.DeepIndentRule;

        specialinvoke $r10.<init>(c9, c0);

        r1.add($r10);

     label10:
        i8 = i8 + 1;

(10)    goto label09;

     label11:
        i4 = Phi(i4 #6, i4 #7, i4 #9);

        i8 = Phi(i8 #6, i8 #7, i8 #9);

        i7 = Phi(i7 #6, i7 #7, i7 #9);

        i6 = Phi(i6 #6, i6 #7, i6 #9);

        $z1 = r0.getIgnoreWhitespace();

        if $z1 != 0 goto label12;

        $r8 = new org.gjt.sp.jedit.indent.WhitespaceRule;

        specialinvoke $r8.<init>();

        r1.add($r8);

     label12:
        $r7 = java.util.Collections.unmodifiableList(r1);

        Packer.Unpack(r0);

        r0.indentRules = $r7;

        Packer.Pack(r0);

        return;
    }

    private org.gjt.sp.jedit.indent.IndentRule createRegexpIndentRule(java.lang.String)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1, r2, $r16;
        java.lang.Object $r3, $r7;
        java.lang.Class[] $r4;
        java.lang.Class $r5;
        java.lang.Object[] $r6;
        org.gjt.sp.jedit.indent.IndentRule $r8;
        java.lang.Exception $r9, r18;
        java.lang.StringBuilder $r10, $r11, $r12, $r13, $r14, $r15;
        java.lang.reflect.Method r17;

        r0 := @this;

        r1 := @parameter0;

        $r3 = r0.getProperty(r1);

        r2 = (java.lang.String) $r3;

     label1:
        if r2 == null goto label3;

        $r5 = class "org/gjt/sp/jedit/indent/IndentRuleFactory";

        $r4 = newarray (java.lang.Class)[1];

        $r4[0] = class "java/lang/String";

        r17 = $r5.getMethod(r1, $r4);

        $r6 = newarray (java.lang.Object)[1];

        $r6[0] = r2;

        $r7 = r17.invoke(null, $r6);

        $r8 = (org.gjt.sp.jedit.indent.IndentRule) $r7;

     label2:
        return $r8;

     label3:
        goto label5;

     label4:
        $r9 := @caughtexception;

        r18 = $r9;

        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<init>();

        $r11 = $r10.append("Bad indent rule ");

        $r12 = $r11.append(r1);

        $r13 = $r12.append(61);

        $r14 = $r13.append(r2);

        $r15 = $r14.append(58);

        $r16 = $r15.toString();

        org.gjt.sp.util.Log.log(9, r0, $r16);

        org.gjt.sp.util.Log.log(9, r0, r18);

     label5:
        return null;

        catch java.lang.Exception from label1 to label2 with label4;
    }

    private void createBracketIndentRules(java.lang.String, java.util.Collection)
    {
        org.gjt.sp.jedit.Mode r0;
        java.lang.String r1, r3, $r8, $r24;
        java.util.Collection r2;
        char c0;
        java.lang.reflect.Method r4;
        java.lang.StringBuilder $r5, $r6, $r7, $r18, $r19, $r20, $r21, $r22, $r23;
        java.lang.Object $r9, $r15;
        int $i1, i2;
        java.lang.Class[] $r10;
        java.lang.Class $r11, $r12;
        java.lang.Object[] $r13;
        java.lang.Character $r14;
        org.gjt.sp.jedit.indent.IndentRule $r16;
        java.lang.Exception $r17, r25;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<init>();

        $r6 = $r5.append(r1);

        $r7 = $r6.append(115);

        $r8 = $r7.toString();

        $r9 = r0.getProperty($r8);

        r3 = (java.lang.String) $r9;

     label1:
(0)     if r3 == null goto label3;

(1)     i2 = 0;

     label2:
        i2 = Phi(i2 #1, i2 #4);

(2)     $i1 = r3.length();

(3)     if i2 >= $i1 goto label3;

        c0 = r3.charAt(i2);

        $r12 = class "org/gjt/sp/jedit/indent/IndentRuleFactory";

        $r10 = newarray (java.lang.Class)[1];

        $r11 = java.lang.Character.TYPE;

        $r10[0] = $r11;

        r4 = $r12.getMethod(r1, $r10);

        $r13 = newarray (java.lang.Object)[1];

        $r14 = java.lang.Character.valueOf(c0);

        $r13[0] = $r14;

        $r15 = r4.invoke(null, $r13);

        $r16 = (org.gjt.sp.jedit.indent.IndentRule) $r15;

        r2.add($r16);

        i2 = i2 + 1;

(4)     goto label2;

     label3:
        i2 = Phi(i2 #0, i2 #3);

(5)     goto label5;

     label4:
        $r17 := @caughtexception;

        i2 = Phi(i2 #1, i2 #2);

        r25 = $r17;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<init>();

        $r19 = $r18.append("Bad indent rule ");

        $r20 = $r19.append(r1);

        $r21 = $r20.append(61);

        $r22 = $r21.append(r3);

        $r23 = $r22.append(58);

        $r24 = $r23.toString();

        org.gjt.sp.util.Log.log(9, r0, $r24);

(6)     org.gjt.sp.util.Log.log(9, r0, r25);

     label5:
        i2 = Phi(i2 #5, i2 #6);

        return;

        catch java.lang.Exception from label1 to label3 with label4;
    }
}
