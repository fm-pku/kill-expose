class org.gjt.sp.jedit.bsh.BSHPrimarySuffix extends org.gjt.sp.jedit.bsh.SimpleNode
{
    public static final int CLASS;
    public static final int INDEX;
    public static final int NAME;
    public static final int PROPERTY;
    public int operation;
    java.lang.Object index;
    public java.lang.String field;

    void <init>(int)
    {
        org.gjt.sp.jedit.bsh.BSHPrimarySuffix r0;
        int i0;

        r0 := @this;

        i0 := @parameter0;

        specialinvoke r0.<init>(i0);

        return;
    }

    public java.lang.Object doSuffix(java.lang.Object, boolean, org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHPrimarySuffix r0;
        boolean z0, $z1, $z2, $z3, $z4;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        int $i0, $i1;
        java.lang.Object $r3, $r4, $r5, r25, r25_1, r25_2, r25_3, r25_4, r25_5;
        org.gjt.sp.jedit.bsh.InterpreterError $r6;
        org.gjt.sp.jedit.bsh.LHS $r7;
        org.gjt.sp.jedit.bsh.SimpleNode $r8;
        org.gjt.sp.jedit.bsh.BSHAmbiguousName $r9;
        org.gjt.sp.jedit.bsh.EvalError $r10, $r13, $r15, $r21;
        org.gjt.sp.jedit.bsh.BSHType $r11;
        java.lang.Class $r12;
        org.gjt.sp.jedit.bsh.ReflectError $r14, r28;
        java.lang.StringBuilder $r16, $r17, $r18;
        java.lang.String $r19;
        org.gjt.sp.jedit.bsh.UtilEvalError $r20, r27;
        java.lang.reflect.InvocationTargetException $r22, r29;
        org.gjt.sp.jedit.bsh.TargetError $r23;
        java.lang.Throwable $r24;

        r0 := @this;

        r25 := @parameter0;

        z0 := @parameter1;

        r1 := @parameter2;

        r2 := @parameter3;

        $i0 = r0.operation;

        if $i0 != 0 goto label03;

        $z4 = r25 instanceof org.gjt.sp.jedit.bsh.BSHType;

        if $z4 == 0 goto label02;

        if z0 == 0 goto label01;

        $r13 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r13.<init>("Can\'t assign .class", r0, r1);

        throw $r13;

     label01:
        r1.top();

        $r11 = (org.gjt.sp.jedit.bsh.BSHType) r25;

        $r12 = $r11.getType(r1, r2);

        return $r12;

     label02:
        $r10 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r10.<init>("Attempt to use .class suffix on non class.", r0, r1);

        throw $r10;

     label03:
        $z1 = r25 instanceof org.gjt.sp.jedit.bsh.SimpleNode;

        if $z1 == 0 goto label05;

        $z3 = r25 instanceof org.gjt.sp.jedit.bsh.BSHAmbiguousName;

        if $z3 == 0 goto label04;

        $r9 = (org.gjt.sp.jedit.bsh.BSHAmbiguousName) r25;

        r25_1 = $r9.toObject(r1, r2);

(0)     goto label09;

     label04:
        $r8 = (org.gjt.sp.jedit.bsh.SimpleNode) r25;

        r25_2 = $r8.eval(r1, r2);

(1)     goto label09;

     label05:
        $z2 = r25 instanceof org.gjt.sp.jedit.bsh.LHS;

(2)     if $z2 == 0 goto label09;

     label06:
(3)     $r7 = (org.gjt.sp.jedit.bsh.LHS) r25;

(4)     r25_3 = $r7.getValue();

     label07:
(5)     goto label09;

     label08:
        $r20 := @caughtexception;

        r25_4 = Phi(r25 #3, r25_3 #4);

        r27 = $r20;

        $r21 = r27.toEvalError(r0, r1);

        throw $r21;

     label09:
        r25_5 = Phi(r25_1 #0, r25_2 #1, r25 #2, r25_3 #5);

        $i1 = r0.operation;

        tableswitch($i1)
        {
            case 1: goto label10;
            case 2: goto label12;
            case 3: goto label14;
            default: goto label16;
        };

     label10:
        $r3 = specialinvoke r0.doIndex(r25_5, z0, r1, r2);

     label11:
        return $r3;

     label12:
        $r5 = specialinvoke r0.doName(r25_5, z0, r1, r2);

     label13:
        return $r5;

     label14:
        $r4 = specialinvoke r0.doProperty(z0, r25_5, r1, r2);

     label15:
        return $r4;

     label16:
        $r6 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r6.<init>("Unknown suffix type");

        throw $r6;

     label17:
        $r14 := @caughtexception;

        r28 = $r14;

        $r15 = new org.gjt.sp.jedit.bsh.EvalError;

        $r16 = new java.lang.StringBuilder;

        specialinvoke $r16.<init>();

        $r17 = $r16.append("reflection error: ");

        $r18 = $r17.append(r28);

        $r19 = $r18.toString();

        specialinvoke $r15.<init>($r19, r0, r1);

        throw $r15;

     label18:
        $r22 := @caughtexception;

        r29 = $r22;

        $r23 = new org.gjt.sp.jedit.bsh.TargetError;

        $r24 = r29.getTargetException();

        specialinvoke $r23.<init>("target exception", $r24, r0, r1, 1);

        throw $r23;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label06 to label07 with label08;
        catch org.gjt.sp.jedit.bsh.ReflectError from label09 to label11 with label17;
        catch org.gjt.sp.jedit.bsh.ReflectError from label12 to label13 with label17;
        catch org.gjt.sp.jedit.bsh.ReflectError from label14 to label15 with label17;
        catch org.gjt.sp.jedit.bsh.ReflectError from label16 to label17 with label17;
        catch java.lang.reflect.InvocationTargetException from label09 to label11 with label18;
        catch java.lang.reflect.InvocationTargetException from label12 to label13 with label18;
        catch java.lang.reflect.InvocationTargetException from label14 to label15 with label18;
        catch java.lang.reflect.InvocationTargetException from label16 to label17 with label18;
    }

    private java.lang.Object doName(java.lang.Object, boolean, org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError, org.gjt.sp.jedit.bsh.ReflectError, java.lang.reflect.InvocationTargetException
    {
        org.gjt.sp.jedit.bsh.BSHPrimarySuffix r0;
        java.lang.Object r1, $r10, $r12;
        boolean z0, $z1, $z2, $z3, $z4, z5, z5_1, z5_2, z5_3, z5_4;
        org.gjt.sp.jedit.bsh.CallStack r2;
        org.gjt.sp.jedit.bsh.Interpreter r3;
        java.lang.String r4, $r6, $r9, $r11, $r13, $r24, $r26, $r30;
        java.lang.Throwable r5;
        int $i0, $i1;
        org.gjt.sp.jedit.bsh.Node $r7;
        org.gjt.sp.jedit.bsh.BSHArguments $r8;
        org.gjt.sp.jedit.bsh.LHS $r14;
        java.lang.Class $r15;
        org.gjt.sp.jedit.bsh.Primitive $r16;
        org.gjt.sp.jedit.bsh.EvalError $r17, $r19, $r21;
        org.gjt.sp.jedit.bsh.UtilEvalError $r18, r37;
        org.gjt.sp.jedit.bsh.ReflectError $r20, r35;
        java.lang.StringBuilder $r22, $r23, $r25, $r28, $r29, $r31;
        java.lang.reflect.InvocationTargetException $r27, r36;
        org.gjt.sp.jedit.bsh.TargetError $r32, $r33;
        java.lang.Object[] r34;

        r0 := @this;

        r1 := @parameter0;

        z0 := @parameter1;

        r2 := @parameter2;

        r3 := @parameter3;

     label01:
(0)     $r6 = r0.field;

        $z1 = $r6.equals("length");

        if $z1 == 0 goto label04;

        $r15 = r1.getClass();

        $z2 = $r15.isArray();

        if $z2 == 0 goto label04;

        if z0 == 0 goto label02;

        $r17 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r17.<init>("Can\'t assign array length", r0, r2);

        throw $r17;

     label02:
        $r16 = new org.gjt.sp.jedit.bsh.Primitive;

        $i1 = java.lang.reflect.Array.getLength(r1);

        specialinvoke $r16.<init>($i1);

     label03:
        return $r16;

     label04:
        $i0 = r0.jjtGetNumChildren();

        if $i0 != 0 goto label08;

        if z0 == 0 goto label06;

        $r13 = r0.field;

        $r14 = org.gjt.sp.jedit.bsh.Reflect.getLHSObjectField(r1, $r13);

     label05:
        return $r14;

     label06:
        $r11 = r0.field;

        $r12 = org.gjt.sp.jedit.bsh.Reflect.getObjectFieldValue(r1, $r11);

     label07:
        return $r12;

     label08:
        $r7 = r0.jjtGetChild(0);

        $r8 = (org.gjt.sp.jedit.bsh.BSHArguments) $r7;

        r34 = $r8.getArguments(r2, r3);

     label09:
        $r9 = r0.field;

        $r10 = org.gjt.sp.jedit.bsh.Reflect.invokeObjectMethod(r1, $r9, r34, r3, r2, r0);

     label10:
        return $r10;

     label11:
        $r20 := @caughtexception;

        r35 = $r20;

        $r21 = new org.gjt.sp.jedit.bsh.EvalError;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<init>();

        $r23 = $r22.append("Error in method invocation: ");

        $r24 = r35.getMessage();

        $r25 = $r23.append($r24);

        $r26 = $r25.toString();

        specialinvoke $r21.<init>($r26, r0, r2);

        throw $r21;

     label12:
        $r27 := @caughtexception;

        r36 = $r27;

        $r28 = new java.lang.StringBuilder;

        specialinvoke $r28.<init>();

        $r29 = $r28.append("Method Invocation ");

        $r30 = r0.field;

        $r31 = $r29.append($r30);

        r4 = $r31.toString();

        r5 = r36.getTargetException();

        z5 = 1;

        $z3 = r5 instanceof org.gjt.sp.jedit.bsh.EvalError;

(1)     if $z3 == 0 goto label14;

        $z4 = r5 instanceof org.gjt.sp.jedit.bsh.TargetError;

        if $z4 == 0 goto label13;

        $r33 = (org.gjt.sp.jedit.bsh.TargetError) r5;

(2)     z5_1 = $r33.inNativeCode();

(3)     goto label14;

     label13:
(4)     z5_2 = 0;

     label14:
        z5_3 = Phi(z5 #1, z5_1 #3, z5_2 #4);

(5)     $r32 = new org.gjt.sp.jedit.bsh.TargetError;

        specialinvoke $r32.<init>(r4, r5, r0, r2, z5_3);

        throw $r32;

     label15:
        $r18 := @caughtexception;

        z5_4 = Phi(z5 #0, z5_1 #2, z5_3 #5);

        r37 = $r18;

        $r19 = r37.toEvalError(r0, r2);

        throw $r19;

        catch org.gjt.sp.jedit.bsh.ReflectError from label09 to label10 with label11;
        catch java.lang.reflect.InvocationTargetException from label09 to label10 with label12;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label01 to label03 with label15;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label04 to label05 with label15;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label06 to label07 with label15;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label08 to label10 with label15;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label11 to label15 with label15;
    }

    static int getIndexAux(java.lang.Object, org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter, org.gjt.sp.jedit.bsh.SimpleNode) throws org.gjt.sp.jedit.bsh.EvalError
    {
        java.lang.Object r0, r16, r16_1, r16_2, r16_3;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        org.gjt.sp.jedit.bsh.SimpleNode r3, $r6;
        int i0;
        java.lang.Class $r4, $r8;
        boolean $z0, $z1;
        org.gjt.sp.jedit.bsh.Node $r5;
        org.gjt.sp.jedit.bsh.Primitive $r7;
        org.gjt.sp.jedit.bsh.EvalError $r9, $r15;
        org.gjt.sp.jedit.bsh.UtilEvalError $r10, r17;
        java.lang.StringBuilder $r11, $r12, $r13;
        java.lang.String $r14;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        r3 := @parameter3;

        $r4 = r0.getClass();

        $z0 = $r4.isArray();

(0)     if $z0 != 0 goto label1;

        $r9 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r9.<init>("Not an array", r3, r1);

        throw $r9;

     label1:
        $r5 = r3.jjtGetChild(0);

        $r6 = (org.gjt.sp.jedit.bsh.SimpleNode) $r5;

        r16 = $r6.eval(r1, r2);

        $z1 = r16 instanceof org.gjt.sp.jedit.bsh.Primitive;

(1)     if $z1 != 0 goto label2;

        $r8 = java.lang.Integer.TYPE;

(2)     r16_1 = org.gjt.sp.jedit.bsh.Types.castObject(r16, $r8, 1);

     label2:
        r16_2 = Phi(r16 #1, r16_1 #2);

(3)     $r7 = (org.gjt.sp.jedit.bsh.Primitive) r16_2;

        i0 = $r7.intValue();

     label3:
        goto label5;

     label4:
        $r10 := @caughtexception;

        r16_3 = Phi(r16 #0, r16_1 #2, r16_2 #3);

        r17 = $r10;

        $r11 = new java.lang.StringBuilder;

        specialinvoke $r11.<init>();

        $r12 = $r11.append("doIndex: ");

        $r13 = $r12.append(r17);

        $r14 = $r13.toString();

        org.gjt.sp.jedit.bsh.Interpreter.debug($r14);

        $r15 = r17.toEvalError("Arrays may only be indexed by integer types.", r3, r1);

        throw $r15;

     label5:
        return i0;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label1 to label3 with label4;
    }

    private java.lang.Object doIndex(java.lang.Object, boolean, org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError, org.gjt.sp.jedit.bsh.ReflectError
    {
        org.gjt.sp.jedit.bsh.BSHPrimarySuffix r0;
        java.lang.Object r1, $r5;
        boolean z0;
        org.gjt.sp.jedit.bsh.CallStack r2;
        org.gjt.sp.jedit.bsh.Interpreter r3;
        int i0;
        org.gjt.sp.jedit.bsh.UtilEvalError r4, $r7;
        org.gjt.sp.jedit.bsh.LHS $r6;
        org.gjt.sp.jedit.bsh.EvalError $r8;

        r0 := @this;

        r1 := @parameter0;

        z0 := @parameter1;

        r2 := @parameter2;

        r3 := @parameter3;

        i0 = org.gjt.sp.jedit.bsh.BSHPrimarySuffix.getIndexAux(r1, r2, r3, r0);

        if z0 == 0 goto label1;

        $r6 = new org.gjt.sp.jedit.bsh.LHS;

        specialinvoke $r6.<init>(r1, i0);

        return $r6;

     label1:
        $r5 = org.gjt.sp.jedit.bsh.Reflect.getIndex(r1, i0);

     label2:
        return $r5;

     label3:
        $r7 := @caughtexception;

        r4 = $r7;

        $r8 = r4.toEvalError(r0, r2);

        throw $r8;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label1 to label2 with label3;
    }

    private java.lang.Object doProperty(boolean, java.lang.Object, org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHPrimarySuffix r0;
        boolean z0, $z1, $z2, $z3;
        java.lang.Object r1, r4, $r10, r28, $r29, r30, $r29_1, $r29_2;
        org.gjt.sp.jedit.bsh.CallStack r2;
        org.gjt.sp.jedit.bsh.Interpreter r3;
        org.gjt.sp.jedit.bsh.CollectionManager r5;
        org.gjt.sp.jedit.bsh.Primitive $r6;
        org.gjt.sp.jedit.bsh.Node $r7;
        org.gjt.sp.jedit.bsh.SimpleNode $r8;
        java.lang.String $r9, $r12, $r21, $r26;
        org.gjt.sp.jedit.bsh.LHS $r11;
        org.gjt.sp.jedit.bsh.EvalError $r13, $r14, $r15, $r17, $r27;
        org.gjt.sp.jedit.bsh.ReflectError $r16, r32;
        java.lang.StringBuilder $r18, $r19, $r20, $r23, $r24, $r25;
        org.gjt.sp.jedit.bsh.UtilEvalError $r22, r31;

        r0 := @this;

        z0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        r3 := @parameter3;

        $r6 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r1 != $r6 goto label01;

        $r15 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r15.<init>("Attempt to access property on undefined variable or class name", r0, r2);

        throw $r15;

     label01:
        $z1 = r1 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z1 == 0 goto label02;

        $r14 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r14.<init>("Attempt to access property on a primitive", r0, r2);

        throw $r14;

     label02:
        $r7 = r0.jjtGetChild(0);

        $r8 = (org.gjt.sp.jedit.bsh.SimpleNode) $r7;

        r4 = $r8.eval(r2, r3);

        $z2 = r4 instanceof java.lang.String;

        if $z2 != 0 goto label03;

        $r13 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r13.<init>("Property expression must be a String or identifier.", r0, r2);

        throw $r13;

     label03:
        if z0 == 0 goto label04;

        $r11 = new org.gjt.sp.jedit.bsh.LHS;

        $r12 = (java.lang.String) r4;

        specialinvoke $r11.<init>(r1, $r12);

        return $r11;

     label04:
        r5 = org.gjt.sp.jedit.bsh.CollectionManager.getCollectionManager();

        $z3 = r5.isMap(r1);

        if $z3 == 0 goto label07;

        r28 = r5.getFromMap(r1, r4);

        if r28 != null goto label05;

        $r29 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        r30 = $r29;

(0)     goto label06;

     label05:
(1)     $r29_1 = r28;

     label06:
        $r29_2 = Phi($r29 #0, $r29_1 #1);

        return $r29_2;

     label07:
        $r9 = (java.lang.String) r4;

        $r10 = org.gjt.sp.jedit.bsh.Reflect.getObjectProperty(r1, $r9);

     label08:
        return $r10;

     label09:
        $r22 := @caughtexception;

        r31 = $r22;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<init>();

        $r24 = $r23.append("Property: ");

        $r25 = $r24.append(r4);

        $r26 = $r25.toString();

        $r27 = r31.toEvalError($r26, r0, r2);

        throw $r27;

     label10:
        $r16 := @caughtexception;

        r32 = $r16;

        $r17 = new org.gjt.sp.jedit.bsh.EvalError;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<init>();

        $r19 = $r18.append("No such property: ");

        $r20 = $r19.append(r4);

        $r21 = $r20.toString();

        specialinvoke $r17.<init>($r21, r0, r2);

        throw $r17;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label07 to label08 with label09;
        catch org.gjt.sp.jedit.bsh.ReflectError from label07 to label08 with label10;
    }
}
