class org.gjt.sp.jedit.bsh.BSHPrimaryExpression extends org.gjt.sp.jedit.bsh.SimpleNode
{

    void <init>(int)
    {
        org.gjt.sp.jedit.bsh.BSHPrimaryExpression r0;
        int i0;

        r0 := @this;

        i0 := @parameter0;

        specialinvoke r0.<init>(i0);

        return;
    }

    public java.lang.Object eval(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHPrimaryExpression r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        java.lang.Object $r3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r3 = specialinvoke r0.eval(0, r1, r2);

        return $r3;
    }

    public org.gjt.sp.jedit.bsh.LHS toLHS(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHPrimaryExpression r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        java.lang.Object r3;
        boolean $z0;
        org.gjt.sp.jedit.bsh.LHS $r4;
        org.gjt.sp.jedit.bsh.EvalError $r5;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 = specialinvoke r0.eval(1, r1, r2);

        $z0 = r3 instanceof org.gjt.sp.jedit.bsh.LHS;

        if $z0 != 0 goto label1;

        $r5 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r5.<init>("Can\'t assign to:", r0, r1);

        throw $r5;

     label1:
        $r4 = (org.gjt.sp.jedit.bsh.LHS) r3;

        return $r4;
    }

    private java.lang.Object eval(boolean, org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHPrimaryExpression r0;
        boolean z0, $z1, $z2, $z3;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        int i0, i1;
        org.gjt.sp.jedit.bsh.LHS $r3;
        java.lang.Object $r4, r13;
        org.gjt.sp.jedit.bsh.SimpleNode $r5;
        org.gjt.sp.jedit.bsh.EvalError $r6, $r12;
        org.gjt.sp.jedit.bsh.BSHAmbiguousName $r7, $r8;
        org.gjt.sp.jedit.bsh.Node $r9;
        org.gjt.sp.jedit.bsh.BSHPrimarySuffix $r10;
        org.gjt.sp.jedit.bsh.UtilEvalError $r11, r14;

        r0 := @this;

        z0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        r13 = r0.jjtGetChild(0);

        i0 = r0.jjtGetNumChildren();

(0)     i1 = 1;

     label01:
        r13 = Phi(r13 #0, r13 #1);

        i1 = Phi(i1 #0, i1 #1);

        if i1 >= i0 goto label02;

        $r9 = r0.jjtGetChild(i1);

        $r10 = (org.gjt.sp.jedit.bsh.BSHPrimarySuffix) $r9;

        r13 = $r10.doSuffix(r13, z0, r1, r2);

        i1 = i1 + 1;

(1)     goto label01;

     label02:
        $z1 = r13 instanceof org.gjt.sp.jedit.bsh.SimpleNode;

(2)     if $z1 == 0 goto label06;

        $z3 = r13 instanceof org.gjt.sp.jedit.bsh.BSHAmbiguousName;

        if $z3 == 0 goto label04;

        if z0 == 0 goto label03;

        $r8 = (org.gjt.sp.jedit.bsh.BSHAmbiguousName) r13;

        r13 = $r8.toLHS(r1, r2);

(3)     goto label06;

     label03:
        $r7 = (org.gjt.sp.jedit.bsh.BSHAmbiguousName) r13;

        r13 = $r7.toObject(r1, r2);

(4)     goto label06;

     label04:
        if z0 == 0 goto label05;

        $r6 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r6.<init>("Can\'t assign to prefix.", r0, r1);

        throw $r6;

     label05:
        $r5 = (org.gjt.sp.jedit.bsh.SimpleNode) r13;

(5)     r13 = $r5.eval(r1, r2);

     label06:
        r13 = Phi(r13 #2, r13 #3, r13 #4, r13 #5);

        $z2 = r13 instanceof org.gjt.sp.jedit.bsh.LHS;

        if $z2 == 0 goto label10;

        if z0 == 0 goto label07;

        return r13;

     label07:
        $r3 = (org.gjt.sp.jedit.bsh.LHS) r13;

        $r4 = $r3.getValue();

     label08:
        return $r4;

     label09:
        $r11 := @caughtexception;

        r14 = $r11;

        $r12 = r14.toEvalError(r0, r1);

        throw $r12;

     label10:
        return r13;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label07 to label08 with label09;
    }
}
