class org.gjt.sp.jedit.bsh.BSHBinaryExpression extends org.gjt.sp.jedit.bsh.SimpleNode implements org.gjt.sp.jedit.bsh.ParserConstants
{
    public int kind;

    void <init>(int)
    {
        org.gjt.sp.jedit.bsh.BSHBinaryExpression r0;
        int i0;

        r0 := @this;

        i0 := @parameter0;

        specialinvoke r0.<init>(i0);

        return;
    }

    public java.lang.Object eval(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHBinaryExpression r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        java.lang.Object r3, $r9, r49, r50, r51, r49_1, r49_2, r49_3, r50_1, r50_2, r50_3;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, z15, $z16, $z17, $z16_1, $z16_2, $z17_1, $z17_2;
        org.gjt.sp.jedit.bsh.UtilEvalError r4, $r46;
        org.gjt.sp.jedit.bsh.Node $r5, $r7, $r39;
        org.gjt.sp.jedit.bsh.SimpleNode $r6, $r8;
        int $i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7, $i8;
        java.lang.StringBuilder $r10, $r12, $r14, $r23, $r24, $r27, $r28;
        java.lang.String $r11, $r13, $r15, $r26, $r29;
        org.gjt.sp.jedit.bsh.Primitive $r16, $r18, $r19, $r21, $r30, $r31, $r33, $r34, $r36, $r37, $r38, $r42, $r43, $r44, $r45;
        org.gjt.sp.jedit.bsh.EvalError $r17, $r20, $r22, $r47;
        java.lang.String[] $r25;
        java.lang.Boolean $r32, $r35;
        org.gjt.sp.jedit.bsh.BSHType $r40;
        java.lang.Class $r41, r48;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r5 = r0.jjtGetChild(0);

        $r6 = (org.gjt.sp.jedit.bsh.SimpleNode) $r5;

        r3 = $r6.eval(r1, r2);

        $i0 = r0.kind;

        if $i0 != 35 goto label04;

        $r38 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r3 != $r38 goto label01;

        $r45 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r45.<init>(0);

        return $r45;

     label01:
        $r39 = r0.jjtGetChild(1);

        $r40 = (org.gjt.sp.jedit.bsh.BSHType) $r39;

        r48 = $r40.getType(r1, r2);

        $z13 = r3 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z13 == 0 goto label03;

        if r48 != class "org/gjt/sp/jedit/bsh/Primitive" goto label02;

        $r44 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r44.<init>(1);

        return $r44;

     label02:
        $r43 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r43.<init>(0);

        return $r43;

     label03:
        $r41 = r3.getClass();

        z14 = org.gjt.sp.jedit.bsh.Types.isJavaBaseAssignable(r48, $r41);

        $r42 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r42.<init>(z14);

        return $r42;

     label04:
        $i1 = r0.kind;

        if $i1 == 98 goto label05;

        $i8 = r0.kind;

(0)     if $i8 != 99 goto label07;

     label05:
        r49 = r3;

        $z1 = specialinvoke r0.isPrimitiveValue(r3);

(1)     if $z1 == 0 goto label06;

        $r37 = (org.gjt.sp.jedit.bsh.Primitive) r3;

(2)     r49_1 = $r37.getValue();

     label06:
        r49_2 = Phi(r49 #1, r49_1 #2);

        $z2 = r49_2 instanceof java.lang.Boolean;

(3)     if $z2 == 0 goto label07;

        $r35 = (java.lang.Boolean) r49_2;

        $z12 = $r35.booleanValue();

(4)     if $z12 != 0 goto label07;

        $r36 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r36.<init>(0);

        return $r36;

     label07:
        r49_3 = Phi(r49 #0, r49_2 #3, r49_2 #4);

        $i2 = r0.kind;

        if $i2 == 96 goto label08;

        $i7 = r0.kind;

(5)     if $i7 != 97 goto label10;

     label08:
        r50 = r3;

        $z3 = specialinvoke r0.isPrimitiveValue(r3);

(6)     if $z3 == 0 goto label09;

        $r34 = (org.gjt.sp.jedit.bsh.Primitive) r3;

(7)     r50_1 = $r34.getValue();

     label09:
        r50_2 = Phi(r50 #6, r50_1 #7);

        $z4 = r50_2 instanceof java.lang.Boolean;

(8)     if $z4 == 0 goto label10;

        $r32 = (java.lang.Boolean) r50_2;

        $z11 = $r32.booleanValue();

(9)     if $z11 != 1 goto label10;

        $r33 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r33.<init>(1);

        return $r33;

     label10:
        r50_3 = Phi(r50 #5, r50_2 #8, r50_2 #9);

        z15 = specialinvoke r0.isWrapper(r3);

        $r7 = r0.jjtGetChild(1);

        $r8 = (org.gjt.sp.jedit.bsh.SimpleNode) $r7;

        r51 = $r8.eval(r1, r2);

        z0 = specialinvoke r0.isWrapper(r51);

        if z15 != 0 goto label11;

        $z10 = specialinvoke r0.isPrimitiveValue(r3);

        if $z10 == 0 goto label16;

     label11:
        if z0 != 0 goto label12;

        $z9 = specialinvoke r0.isPrimitiveValue(r51);

        if $z9 == 0 goto label16;

     label12:
        if z15 == 0 goto label13;

        if z0 == 0 goto label13;

        $i4 = r0.kind;

        if $i4 != 90 goto label13;

        goto label16;

     label13:
        $i3 = r0.kind;

        Packer.Unpack(r0);

        $r9 = org.gjt.sp.jedit.bsh.Primitive.binaryOperation(r3, r51, $i3);

     label14:
        Packer.Pack(r0);

        return $r9;

     label15:
        $r46 := @caughtexception;

        r4 = $r46;

        $r47 = r4.toEvalError(r0, r1);

        throw $r47;

     label16:
        $i5 = r0.kind;

        lookupswitch($i5)
        {
            case 90: goto label17;
            case 95: goto label20;
            case 102: goto label23;
            default: goto label25;
        };

     label17:
        $r31 = new org.gjt.sp.jedit.bsh.Primitive;

        if r3 != r51 goto label18;

        $z16 = 1;

(10)    goto label19;

     label18:
(11)    $z16_1 = 0;

     label19:
        $z16_2 = Phi($z16 #10, $z16_1 #11);

        specialinvoke $r31.<init>($z16_2);

        return $r31;

     label20:
        $r30 = new org.gjt.sp.jedit.bsh.Primitive;

        if r3 == r51 goto label21;

        $z17 = 1;

(12)    goto label22;

     label21:
(13)    $z17_1 = 0;

     label22:
        $z17_2 = Phi($z17 #12, $z17_1 #13);

        specialinvoke $r30.<init>($z17_2);

        return $r30;

     label23:
        $z5 = r3 instanceof java.lang.String;

        if $z5 != 0 goto label24;

        $z6 = r51 instanceof java.lang.String;

        if $z6 == 0 goto label25;

     label24:
        $r10 = new java.lang.StringBuilder;

        specialinvoke $r10.<init>();

        $r11 = r3.toString();

        $r12 = $r10.append($r11);

        $r13 = r51.toString();

        $r14 = $r12.append($r13);

        $r15 = $r14.toString();

        return $r15;

     label25:
        $z7 = r3 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z7 != 0 goto label26;

        $z8 = r51 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z8 == 0 goto label30;

     label26:
        $r16 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r3 == $r16 goto label27;

        $r18 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r51 != $r18 goto label28;

     label27:
        $r17 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r17.<init>("illegal use of undefined variable, class, or \'void\' literal", r0, r1);

        throw $r17;

     label28:
        $r19 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r3 == $r19 goto label29;

        $r21 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r51 != $r21 goto label30;

     label29:
        $r20 = new org.gjt.sp.jedit.bsh.EvalError;

        specialinvoke $r20.<init>("illegal use of null value or \'null\' literal", r0, r1);

        throw $r20;

     label30:
        $r22 = new org.gjt.sp.jedit.bsh.EvalError;

        $r23 = new java.lang.StringBuilder;

        specialinvoke $r23.<init>();

        $r24 = $r23.append("Operator: \'");

        $r25 = org.gjt.sp.jedit.bsh.BSHBinaryExpression.tokenImage;

        $i6 = r0.kind;

        $r26 = $r25[$i6];

        $r27 = $r24.append($r26);

        $r28 = $r27.append("\' inappropriate for objects");

        $r29 = $r28.toString();

        specialinvoke $r22.<init>($r29, r0, r1);

        throw $r22;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label13 to label14 with label15;
    }

    private boolean isPrimitiveValue(java.lang.Object)
    {
        org.gjt.sp.jedit.bsh.BSHBinaryExpression r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z1_1, $z1_2;
        org.gjt.sp.jedit.bsh.Primitive $r2, $r3;

        r0 := @this;

        r1 := @parameter0;

        $z0 = r1 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z0 == 0 goto label1;

        $r2 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r1 == $r2 goto label1;

        $r3 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r1 == $r3 goto label1;

        $z1 = 1;

(0)     goto label2;

     label1:
(1)     $z1_1 = 0;

     label2:
        $z1_2 = Phi($z1 #0, $z1_1 #1);

        return $z1_2;
    }

    private boolean isWrapper(java.lang.Object)
    {
        org.gjt.sp.jedit.bsh.BSHBinaryExpression r0;
        java.lang.Object r1;
        boolean $z0, $z1, $z2, $z3, $z3_1, $z3_2;

        r0 := @this;

        r1 := @parameter0;

        $z0 = r1 instanceof java.lang.Boolean;

        if $z0 != 0 goto label1;

        $z1 = r1 instanceof java.lang.Character;

        if $z1 != 0 goto label1;

        $z2 = r1 instanceof java.lang.Number;

        if $z2 == 0 goto label2;

     label1:
        $z3_1 = 1;

(0)     goto label3;

     label2:
(1)     $z3 = 0;

     label3:
        $z3_2 = Phi($z3_1 #0, $z3 #1);

        return $z3_2;
    }
}
