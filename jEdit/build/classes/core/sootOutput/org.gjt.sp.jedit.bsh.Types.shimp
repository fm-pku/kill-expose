class org.gjt.sp.jedit.bsh.Types extends java.lang.Object
{
    static final int CAST;
    static final int ASSIGNMENT;
    static final int JAVA_BASE_ASSIGNABLE;
    static final int JAVA_BOX_TYPES_ASSIGABLE;
    static final int JAVA_VARARGS_ASSIGNABLE;
    static final int BSH_ASSIGNABLE;
    static final int FIRST_ROUND_ASSIGNABLE;
    static final int LAST_ROUND_ASSIGNABLE;
    static org.gjt.sp.jedit.bsh.Primitive VALID_CAST;
    static org.gjt.sp.jedit.bsh.Primitive INVALID_CAST;

    void <init>()
    {
        org.gjt.sp.jedit.bsh.Types r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    public static java.lang.Class[] getTypes(java.lang.Object[])
    {
        java.lang.Object[] r0;
        java.lang.Class[] r1, $r9;
        int $i0, $i1, i2;
        java.lang.Object $r2, $r3, $r4, $r6;
        boolean $z0;
        java.lang.Class $r5, $r8;
        org.gjt.sp.jedit.bsh.Primitive $r7;

        r0 := @parameter0;

        if r0 != null goto label1;

        $r9 = newarray (java.lang.Class)[0];

        return $r9;

     label1:
        $i0 = lengthof r0;

        r1 = newarray (java.lang.Class)[$i0];

(0)     i2 = 0;

     label2:
        i2 = Phi(i2 #0, i2 #1);

        $i1 = lengthof r0;

        if i2 >= $i1 goto label6;

        $r2 = r0[i2];

        if $r2 != null goto label3;

        r1[i2] = null;

        goto label5;

     label3:
        $r3 = r0[i2];

        $z0 = $r3 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z0 == 0 goto label4;

        $r6 = r0[i2];

        $r7 = (org.gjt.sp.jedit.bsh.Primitive) $r6;

        $r8 = $r7.getType();

        r1[i2] = $r8;

        goto label5;

     label4:
        $r4 = r0[i2];

        $r5 = $r4.getClass();

        r1[i2] = $r5;

     label5:
        i2 = i2 + 1;

(1)     goto label2;

     label6:
        return r1;
    }

    static boolean isSignatureAssignable(java.lang.Class[], java.lang.Class[], int)
    {
        java.lang.Class[] r0, r1;
        int i0, $i1, $i2, $i3, $i4, $i5, i6, i7, i8;
        java.lang.Class $r2, $r3, $r4, $r5, $r6, $r7;
        boolean $z0, $z1, $z2, $z3;
        org.gjt.sp.jedit.bsh.InterpreterError $r8;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        if i0 == 3 goto label01;

        $i5 = lengthof r0;

        $i4 = lengthof r1;

        if $i5 == $i4 goto label01;

        return 0;

     label01:
        tableswitch(i0)
        {
            case 1: goto label02;
            case 2: goto label06;
            case 3: goto label10;
            case 4: goto label11;
            default: goto label15;
        };

     label02:
(0)     i6 = 0;

     label03:
        i6 = Phi(i6 #0, i6 #1);

        $i1 = lengthof r0;

        if i6 >= $i1 goto label05;

        $r3 = r1[i6];

        $r2 = r0[i6];

        $z0 = org.gjt.sp.jedit.bsh.Types.isJavaBaseAssignable($r3, $r2);

        if $z0 != 0 goto label04;

        return 0;

     label04:
        i6 = i6 + 1;

(1)     goto label03;

     label05:
        return 1;

     label06:
(2)     i7 = 0;

     label07:
        i7 = Phi(i7 #2, i7 #3);

        $i3 = lengthof r0;

        if i7 >= $i3 goto label09;

        $r7 = r1[i7];

        $r6 = r0[i7];

        $z3 = org.gjt.sp.jedit.bsh.Types.isJavaBoxTypesAssignable($r7, $r6);

        if $z3 != 0 goto label08;

        return 0;

     label08:
        i7 = i7 + 1;

(3)     goto label07;

     label09:
        return 1;

     label10:
        $z2 = org.gjt.sp.jedit.bsh.Types.isSignatureVarargsAssignable(r0, r1);

        return $z2;

     label11:
(4)     i8 = 0;

     label12:
        i8 = Phi(i8 #4, i8 #5);

        $i2 = lengthof r0;

        if i8 >= $i2 goto label14;

        $r5 = r1[i8];

        $r4 = r0[i8];

        $z1 = org.gjt.sp.jedit.bsh.Types.isBshAssignable($r5, $r4);

        if $z1 != 0 goto label13;

        return 0;

     label13:
        i8 = i8 + 1;

(5)     goto label12;

     label14:
        return 1;

     label15:
        $r8 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r8.<init>("bad case");

        throw $r8;
    }

    private static boolean isSignatureVarargsAssignable(java.lang.Class[], java.lang.Class[])
    {
        java.lang.Class[] r0, r1;

        r0 := @parameter0;

        r1 := @parameter1;

        return 0;
    }

    static boolean isJavaAssignable(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        boolean $z0, $z1, $z2, $z2_1, $z2_2;

        r0 := @parameter0;

        r1 := @parameter1;

        $z0 = org.gjt.sp.jedit.bsh.Types.isJavaBaseAssignable(r0, r1);

        if $z0 != 0 goto label1;

        $z1 = org.gjt.sp.jedit.bsh.Types.isJavaBoxTypesAssignable(r0, r1);

        if $z1 == 0 goto label2;

     label1:
        $z2_1 = 1;

(0)     goto label3;

     label2:
(1)     $z2 = 0;

     label3:
        $z2_2 = Phi($z2_1 #0, $z2 #1);

        return $z2_2;
    }

    static boolean isJavaBaseAssignable(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13, $r14, $r15, $r16, $r17, $r18, $r19, $r20, $r21, $r22, $r23, $r24, $r25, $r26;
        boolean $z0, $z1, $z2, $z3, $z4, $z4_1, $z4_2;

        r0 := @parameter0;

        r1 := @parameter1;

        if r0 != null goto label01;

        return 0;

     label01:
        if r1 != null goto label04;

        $z3 = r0.isPrimitive();

        if $z3 != 0 goto label02;

        $z4 = 1;

(0)     goto label03;

     label02:
(1)     $z4_1 = 0;

     label03:
        $z4_2 = Phi($z4 #0, $z4_1 #1);

        return $z4_2;

     label04:
        $z0 = r0.isPrimitive();

        if $z0 == 0 goto label16;

        $z2 = r1.isPrimitive();

        if $z2 == 0 goto label16;

        if r0 != r1 goto label05;

        return 1;

     label05:
        $r2 = java.lang.Byte.TYPE;

        if r1 != $r2 goto label07;

        $r22 = java.lang.Short.TYPE;

        if r0 == $r22 goto label06;

        $r23 = java.lang.Integer.TYPE;

        if r0 == $r23 goto label06;

        $r24 = java.lang.Long.TYPE;

        if r0 == $r24 goto label06;

        $r25 = java.lang.Float.TYPE;

        if r0 == $r25 goto label06;

        $r26 = java.lang.Double.TYPE;

        if r0 != $r26 goto label07;

     label06:
        return 1;

     label07:
        $r3 = java.lang.Short.TYPE;

        if r1 != $r3 goto label09;

        $r18 = java.lang.Integer.TYPE;

        if r0 == $r18 goto label08;

        $r19 = java.lang.Long.TYPE;

        if r0 == $r19 goto label08;

        $r20 = java.lang.Float.TYPE;

        if r0 == $r20 goto label08;

        $r21 = java.lang.Double.TYPE;

        if r0 != $r21 goto label09;

     label08:
        return 1;

     label09:
        $r4 = java.lang.Character.TYPE;

        if r1 != $r4 goto label11;

        $r14 = java.lang.Integer.TYPE;

        if r0 == $r14 goto label10;

        $r15 = java.lang.Long.TYPE;

        if r0 == $r15 goto label10;

        $r16 = java.lang.Float.TYPE;

        if r0 == $r16 goto label10;

        $r17 = java.lang.Double.TYPE;

        if r0 != $r17 goto label11;

     label10:
        return 1;

     label11:
        $r5 = java.lang.Integer.TYPE;

        if r1 != $r5 goto label13;

        $r11 = java.lang.Long.TYPE;

        if r0 == $r11 goto label12;

        $r12 = java.lang.Float.TYPE;

        if r0 == $r12 goto label12;

        $r13 = java.lang.Double.TYPE;

        if r0 != $r13 goto label13;

     label12:
        return 1;

     label13:
        $r6 = java.lang.Long.TYPE;

        if r1 != $r6 goto label15;

        $r9 = java.lang.Float.TYPE;

        if r0 == $r9 goto label14;

        $r10 = java.lang.Double.TYPE;

        if r0 != $r10 goto label15;

     label14:
        return 1;

     label15:
        $r7 = java.lang.Float.TYPE;

        if r1 != $r7 goto label17;

        $r8 = java.lang.Double.TYPE;

        if r0 != $r8 goto label17;

        return 1;

     label16:
        $z1 = r0.isAssignableFrom(r1);

        if $z1 == 0 goto label17;

        return 1;

     label17:
        return 0;
    }

    static boolean isJavaBoxTypesAssignable(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1, $r4, $r5;
        java.util.Hashtable $r2;
        java.lang.Object $r3;

        r0 := @parameter0;

        r1 := @parameter1;

        if r0 != null goto label1;

        return 0;

     label1:
        if r0 != class "java/lang/Object" goto label2;

        return 1;

     label2:
        if r0 != class "java/lang/Number" goto label3;

        $r4 = java.lang.Character.TYPE;

        if r1 == $r4 goto label3;

        $r5 = java.lang.Boolean.TYPE;

        if r1 == $r5 goto label3;

        return 1;

     label3:
        $r2 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r3 = $r2.get(r0);

        if $r3 != r1 goto label4;

        return 1;

     label4:
        return 0;
    }

    static boolean isBshAssignable(java.lang.Class, java.lang.Class)
    {
        java.lang.Class r0, r1;
        org.gjt.sp.jedit.bsh.UtilEvalError r2, $r5;
        java.lang.Object $r3;
        org.gjt.sp.jedit.bsh.Primitive $r4;
        org.gjt.sp.jedit.bsh.InterpreterError $r6;
        java.lang.StringBuilder $r7, $r8, $r9;
        java.lang.String $r10;
        boolean $z0, $z0_1, $z0_2;

        r0 := @parameter0;

        r1 := @parameter1;

     label1:
        $r3 = org.gjt.sp.jedit.bsh.Types.castObject(r0, r1, null, 1, 1);

        $r4 = org.gjt.sp.jedit.bsh.Types.VALID_CAST;

        if $r3 != $r4 goto label2;

        $z0 = 1;

(0)     goto label3;

     label2:
(1)     $z0_1 = 0;

     label3:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        return $z0_2;

     label4:
        $r5 := @caughtexception;

        r2 = $r5;

        $r6 = new org.gjt.sp.jedit.bsh.InterpreterError;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<init>();

        $r8 = $r7.append("err in cast check: ");

        $r9 = $r8.append(r2);

        $r10 = $r9.toString();

        specialinvoke $r6.<init>($r10);

        throw $r6;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label1 to label3 with label4;
    }

    public static java.lang.Object castObject(java.lang.Object, java.lang.Class, int) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        java.lang.Object r0, $r3;
        java.lang.Class r1, r2, $r6, $r6_1, $r6_2;
        int i0;
        boolean $z0;
        org.gjt.sp.jedit.bsh.Primitive $r4;
        org.gjt.sp.jedit.bsh.InterpreterError $r5;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        if r0 != null goto label1;

        $r5 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r5.<init>("null fromValue");

        throw $r5;

     label1:
        $z0 = r0 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z0 == 0 goto label2;

        $r4 = (org.gjt.sp.jedit.bsh.Primitive) r0;

        $r6 = $r4.getType();

(0)     goto label3;

     label2:
(1)     $r6_1 = r0.getClass();

     label3:
        $r6_2 = Phi($r6 #0, $r6_1 #1);

        r2 = $r6_2;

        $r3 = org.gjt.sp.jedit.bsh.Types.castObject(r1, r2, r0, i0, 0);

        return $r3;
    }

    private static java.lang.Object castObject(java.lang.Class, java.lang.Class, java.lang.Object, int, boolean) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        java.lang.Class r0, r1, r3, $r6, $r7, $r10, $r12, $r13, $r18, $r20, $r28;
        java.lang.Object r2, $r15, $r25, $r34, $r36, $r37, $r38, $r39, $r40, $r38_1, $r38_2, $r39_1, $r39_2, $r40_1, $r40_2, $r36_1, $r36_2, $r37_1, $r37_2, $r34_1, $r34_2;
        int i0;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11;
        org.gjt.sp.jedit.bsh.Primitive $r4, $r5, $r8, $r9, $r11, $r14, $r17, $r21, $r22, $r24, $r26, r35, r35_1, r35_2;
        org.gjt.sp.jedit.bsh.UtilEvalError $r16, $r23;
        org.gjt.sp.jedit.bsh.This $r19;
        org.gjt.sp.jedit.bsh.InterpreterError $r27, $r29, $r30, $r31, $r32, $r33;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        i0 := @parameter3;

        z0 := @parameter4;

        if z0 == 0 goto label01;

        if r2 == null goto label01;

        $r33 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r33.<init>("bad cast params 1");

        throw $r33;

     label01:
        if z0 != 0 goto label02;

        if r2 != null goto label02;

        $r32 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r32.<init>("bad cast params 2");

        throw $r32;

     label02:
        if r1 != class "org/gjt/sp/jedit/bsh/Primitive" goto label03;

        $r31 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r31.<init>("bad from Type, need to unwrap");

        throw $r31;

     label03:
        $r4 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r2 != $r4 goto label04;

        if r1 == null goto label04;

        $r30 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r30.<init>("inconsistent args 1");

        throw $r30;

     label04:
        $r5 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r2 != $r5 goto label05;

        $r28 = java.lang.Void.TYPE;

        if r1 == $r28 goto label05;

        $r29 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r29.<init>("inconsistent args 2");

        throw $r29;

     label05:
        $r6 = java.lang.Void.TYPE;

        if r0 != $r6 goto label06;

        $r27 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r27.<init>("loose toType should be null");

        throw $r27;

     label06:
        if r0 == null goto label07;

        if r0 != r1 goto label10;

     label07:
        if z0 == 0 goto label08;

        $r34 = org.gjt.sp.jedit.bsh.Types.VALID_CAST;

(0)     goto label09;

     label08:
(1)     $r34_1 = r2;

     label09:
        $r34_2 = Phi($r34 #0, $r34_1 #1);

        return $r34_2;

     label10:
        $z1 = r0.isPrimitive();

        if $z1 == 0 goto label17;

        $r20 = java.lang.Void.TYPE;

        if r1 == $r20 goto label11;

        if r1 == null goto label11;

        $z10 = r1.isPrimitive();

        if $z10 == 0 goto label12;

     label11:
        $r21 = (org.gjt.sp.jedit.bsh.Primitive) r2;

        $r22 = org.gjt.sp.jedit.bsh.Primitive.castPrimitive(r0, r1, $r21, z0, i0);

        return $r22;

     label12:
        $z11 = org.gjt.sp.jedit.bsh.Primitive.isWrapperType(r1);

        if $z11 == 0 goto label15;

        r3 = org.gjt.sp.jedit.bsh.Primitive.unboxType(r1);

        if z0 == 0 goto label13;

        r35 = null;

(2)     goto label14;

     label13:
        $r25 = org.gjt.sp.jedit.bsh.Primitive.wrap(r2, r3);

(3)     r35_1 = (org.gjt.sp.jedit.bsh.Primitive) $r25;

     label14:
        r35_2 = Phi(r35 #2, r35_1 #3);

        $r26 = org.gjt.sp.jedit.bsh.Primitive.castPrimitive(r0, r3, r35_2, z0, i0);

        return $r26;

     label15:
        if z0 == 0 goto label16;

        $r24 = org.gjt.sp.jedit.bsh.Types.INVALID_CAST;

        return $r24;

     label16:
        $r23 = org.gjt.sp.jedit.bsh.Types.castError(r0, r1, i0);

        throw $r23;

     label17:
        $r7 = java.lang.Void.TYPE;

        if r1 == $r7 goto label18;

        if r1 == null goto label18;

        $z3 = r1.isPrimitive();

        if $z3 == 0 goto label25;

     label18:
        $z2 = org.gjt.sp.jedit.bsh.Primitive.isWrapperType(r0);

        if $z2 == 0 goto label21;

        $r12 = java.lang.Void.TYPE;

        if r1 == $r12 goto label21;

        if r1 == null goto label21;

        if z0 == 0 goto label19;

        $r36 = org.gjt.sp.jedit.bsh.Types.VALID_CAST;

(4)     goto label20;

     label19:
        $r13 = org.gjt.sp.jedit.bsh.Primitive.unboxType(r0);

        $r14 = (org.gjt.sp.jedit.bsh.Primitive) r2;

        $r15 = $r14.getValue();

(5)     $r36_1 = org.gjt.sp.jedit.bsh.Primitive.castWrapper($r13, $r15);

     label20:
        $r36_2 = Phi($r36 #4, $r36_1 #5);

        return $r36_2;

     label21:
        if r0 != class "java/lang/Object" goto label24;

        $r10 = java.lang.Void.TYPE;

        if r1 == $r10 goto label24;

        if r1 == null goto label24;

        if z0 == 0 goto label22;

        $r37 = org.gjt.sp.jedit.bsh.Types.VALID_CAST;

(6)     goto label23;

     label22:
        $r11 = (org.gjt.sp.jedit.bsh.Primitive) r2;

(7)     $r37_1 = $r11.getValue();

     label23:
        $r37_2 = Phi($r37 #6, $r37_1 #7);

        return $r37_2;

     label24:
        $r8 = (org.gjt.sp.jedit.bsh.Primitive) r2;

        $r9 = org.gjt.sp.jedit.bsh.Primitive.castPrimitive(r0, r1, $r8, z0, i0);

        return $r9;

     label25:
        $z4 = r0.isAssignableFrom(r1);

        if $z4 == 0 goto label28;

        if z0 == 0 goto label26;

        $r38 = org.gjt.sp.jedit.bsh.Types.VALID_CAST;

(8)     goto label27;

     label26:
(9)     $r38_1 = r2;

     label27:
        $r38_2 = Phi($r38 #8, $r38_1 #9);

        return $r38_2;

     label28:
        $z5 = r0.isInterface();

        if $z5 == 0 goto label31;

        $r18 = class "org/gjt/sp/jedit/bsh/This";

        $z8 = $r18.isAssignableFrom(r1);

        if $z8 == 0 goto label31;

        $z9 = org.gjt.sp.jedit.bsh.Capabilities.canGenerateInterfaces();

        if $z9 == 0 goto label31;

        if z0 == 0 goto label29;

        $r39 = org.gjt.sp.jedit.bsh.Types.VALID_CAST;

(10)    goto label30;

     label29:
        $r19 = (org.gjt.sp.jedit.bsh.This) r2;

(11)    $r39_1 = $r19.getInterface(r0);

     label30:
        $r39_2 = Phi($r39 #10, $r39_1 #11);

        return $r39_2;

     label31:
        $z6 = org.gjt.sp.jedit.bsh.Primitive.isWrapperType(r0);

        if $z6 == 0 goto label34;

        $z7 = org.gjt.sp.jedit.bsh.Primitive.isWrapperType(r1);

        if $z7 == 0 goto label34;

        if z0 == 0 goto label32;

        $r40 = org.gjt.sp.jedit.bsh.Types.VALID_CAST;

(12)    goto label33;

     label32:
(13)    $r40_1 = org.gjt.sp.jedit.bsh.Primitive.castWrapper(r0, r2);

     label33:
        $r40_2 = Phi($r40 #12, $r40_1 #13);

        return $r40_2;

     label34:
        if z0 == 0 goto label35;

        $r17 = org.gjt.sp.jedit.bsh.Types.INVALID_CAST;

        return $r17;

     label35:
        $r16 = org.gjt.sp.jedit.bsh.Types.castError(r0, r1, i0);

        throw $r16;
    }

    static org.gjt.sp.jedit.bsh.UtilEvalError castError(java.lang.Class, java.lang.Class, int)
    {
        java.lang.Class r0, r1;
        int i0;
        java.lang.String $r2, $r3;
        org.gjt.sp.jedit.bsh.UtilEvalError $r4;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        $r2 = org.gjt.sp.jedit.bsh.Reflect.normalizeClassName(r0);

        $r3 = org.gjt.sp.jedit.bsh.Reflect.normalizeClassName(r1);

        $r4 = org.gjt.sp.jedit.bsh.Types.castError($r2, $r3, i0);

        return $r4;
    }

    static org.gjt.sp.jedit.bsh.UtilEvalError castError(java.lang.String, java.lang.String, int)
    {
        java.lang.String r0, r1, $r9, $r17;
        int i0;
        java.lang.ClassCastException r2, $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8, $r12, $r13, $r14, $r15, $r16;
        org.gjt.sp.jedit.bsh.UtilTargetError $r10;
        org.gjt.sp.jedit.bsh.UtilEvalError $r11;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        if i0 != 1 goto label1;

        $r11 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<init>();

        $r13 = $r12.append("Can\'t assign ");

        $r14 = $r13.append(r1);

        $r15 = $r14.append(" to ");

        $r16 = $r15.append(r0);

        $r17 = $r16.toString();

        specialinvoke $r11.<init>($r17);

        return $r11;

     label1:
        $r3 = new java.lang.ClassCastException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r5 = $r4.append("Cannot cast ");

        $r6 = $r5.append(r1);

        $r7 = $r6.append(" to ");

        $r8 = $r7.append(r0);

        $r9 = $r8.toString();

        specialinvoke $r3.<init>($r9);

        r2 = $r3;

        $r10 = new org.gjt.sp.jedit.bsh.UtilTargetError;

        specialinvoke $r10.<init>(r2);

        return $r10;
    }

    static void <clinit>()
    {
        org.gjt.sp.jedit.bsh.Primitive $r0, $r1;

        $r0 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r0.<init>(1);

        org.gjt.sp.jedit.bsh.Types.VALID_CAST = $r0;

        $r1 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r1.<init>(-1);

        org.gjt.sp.jedit.bsh.Types.INVALID_CAST = $r1;

        return;
    }
}
