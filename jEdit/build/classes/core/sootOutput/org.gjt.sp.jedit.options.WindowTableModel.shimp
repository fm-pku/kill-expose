class org.gjt.sp.jedit.options.WindowTableModel extends javax.swing.table.AbstractTableModel
{
    private static final java.lang.String PLUGIN_SET_PREFIX;
    private static final java.lang.String CORE_DOCKABLE_SET;
    private static final java.lang.String ALL_DOCKABLE_SET;
    private java.util.HashMap dockableSets;
    private java.util.Vector windows;

    void <init>()
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;
        java.util.Vector r1, $r8, $r11, $r15, r22;
        java.lang.String[] r2, r3;
        int i0, i1;
        java.lang.String r4, r5, r21;
        org.gjt.sp.jedit.options.WindowTableModel$Entry r6, $r14;
        java.util.HashMap $r7, $r9, $r12, $r16;
        java.lang.Object $r13;
        java.lang.StringBuilder $r18, $r19, $r20;

        r0 := @this;

        specialinvoke r0.<init>();

        $r7 = new java.util.HashMap;

        specialinvoke $r7.<init>();

        r0.dockableSets = $r7;

        $r8 = new java.util.Vector;

        specialinvoke $r8.<init>();

        r1 = $r8;

        $r9 = r0.dockableSets;

        $r9.put("All", r1);

        $r11 = new java.util.Vector;

        specialinvoke $r11.<init>();

        r0.windows = $r11;

        r2 = org.gjt.sp.jedit.gui.DockableWindowManager.getRegisteredDockableWindows();

        r3 = r2;

        i0 = lengthof r3;

(0)     i1 = 0;

     label1:
        r22 = Phi(r22 #0, r22 #5);

        i1 = Phi(i1 #0, i1 #5);

        r21 = Phi(r21 #0, r21 #5);

        if i1 >= i0 goto label5;

        r4 = r3[i1];

        r5 = org.gjt.sp.jedit.gui.DockableWindowManager.getDockableWindowPluginName(r4);

        if r5 == null goto label2;

        $r18 = new java.lang.StringBuilder;

        specialinvoke $r18.<init>();

        $r19 = $r18.append("Plugin: ");

        $r20 = $r19.append(r5);

        r21 = $r20.toString();

(1)     goto label3;

     label2:
(2)     r21 = "Core";

     label3:
        r21 = Phi(r21 #1, r21 #2);

        $r12 = r0.dockableSets;

        $r13 = $r12.get(r21);

        r22 = (java.util.Vector) $r13;

(3)     if r22 != null goto label4;

        $r15 = new java.util.Vector;

        specialinvoke $r15.<init>();

        r22 = $r15;

        $r16 = r0.dockableSets;

(4)     $r16.put(r21, r22);

     label4:
        r22 = Phi(r22 #3, r22 #4);

        $r14 = new org.gjt.sp.jedit.options.WindowTableModel$Entry;

        specialinvoke $r14.<init>(r4);

        r6 = $r14;

        r22.add(r6);

        r1.add(r6);

        i1 = i1 + 1;

(5)     goto label1;

     label5:
        r0.showSet("All");

        return;
    }

    public java.util.Vector getDockableSets()
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;
        java.util.Vector r1, $r4;
        java.util.Iterator r2;
        java.lang.String r3;
        java.util.HashMap $r5;
        java.util.Set $r6;
        boolean $z0;
        java.lang.Object $r7;

        r0 := @this;

        $r4 = new java.util.Vector;

        specialinvoke $r4.<init>();

        r1 = $r4;

        $r5 = r0.dockableSets;

        $r6 = $r5.keySet();

        r2 = $r6.iterator();

     label1:
        $z0 = r2.hasNext();

        if $z0 == 0 goto label2;

        $r7 = r2.next();

        r3 = (java.lang.String) $r7;

        r1.add(r3);

        goto label1;

     label2:
        r1.remove("All");

        r1.remove("Core");

        java.util.Collections.sort(r1);

        r1.insertElementAt("Core", 0);

        r1.insertElementAt("All", 0);

        return r1;
    }

    public void showSet(java.lang.String)
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;
        java.lang.String r1;
        java.util.HashMap $r2;
        java.lang.Object $r3;
        java.util.Vector $r4, $r6;
        org.gjt.sp.jedit.options.WindowTableModel$WindowCompare $r5;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.dockableSets;

        $r3 = $r2.get(r1);

        $r4 = (java.util.Vector) $r3;

        r0.windows = $r4;

        $r6 = r0.windows;

        $r5 = new org.gjt.sp.jedit.options.WindowTableModel$WindowCompare;

        specialinvoke $r5.<init>();

        java.util.Collections.sort($r6, $r5);

        r0.fireTableDataChanged();

        return;
    }

    public int getColumnCount()
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;

        r0 := @this;

        return 2;
    }

    public int getRowCount()
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;
        java.util.Vector $r1;
        int $i0;

        r0 := @this;

        $r1 = r0.windows;

        $i0 = $r1.size();

        return $i0;
    }

    public java.lang.Class getColumnClass(int)
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;
        int i0;
        java.lang.InternalError $r1;

        r0 := @this;

        i0 := @parameter0;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label1;
            default: goto label2;
        };

     label1:
        return class "java/lang/String";

     label2:
        $r1 = new java.lang.InternalError;

        specialinvoke $r1.<init>();

        throw $r1;
    }

    public java.lang.Object getValueAt(int, int)
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;
        int i0, i1;
        org.gjt.sp.jedit.options.WindowTableModel$Entry r1;
        java.util.Vector $r2;
        java.lang.Object $r3;
        java.lang.String $r4, $r5;
        java.lang.InternalError $r6;

        r0 := @this;

        i0 := @parameter0;

        i1 := @parameter1;

        $r2 = r0.windows;

        $r3 = $r2.elementAt(i0);

        r1 = (org.gjt.sp.jedit.options.WindowTableModel$Entry) $r3;

        lookupswitch(i1)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r5 = r1.title;

        return $r5;

     label2:
        $r4 = r1.dockPosition;

        return $r4;

     label3:
        $r6 = new java.lang.InternalError;

        specialinvoke $r6.<init>();

        throw $r6;
    }

    public boolean isCellEditable(int, int)
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;
        int i0, i1;
        boolean $z0, $z0_1, $z0_2;

        r0 := @this;

        i0 := @parameter0;

        i1 := @parameter1;

        if i1 == 0 goto label1;

        $z0 = 1;

(0)     goto label2;

     label1:
(1)     $z0_1 = 0;

     label2:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        return $z0_2;
    }

    public void setValueAt(java.lang.Object, int, int)
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;
        java.lang.Object r1, $r4;
        int i0, i1;
        org.gjt.sp.jedit.options.WindowTableModel$Entry r2;
        java.util.Vector $r3;
        java.lang.String $r5;
        java.lang.InternalError $r6;

        r0 := @this;

        r1 := @parameter0;

        i0 := @parameter1;

        i1 := @parameter2;

        if i1 != 0 goto label1;

        return;

     label1:
        $r3 = r0.windows;

        $r4 = $r3.elementAt(i0);

        r2 = (org.gjt.sp.jedit.options.WindowTableModel$Entry) $r4;

        lookupswitch(i1)
        {
            case 1: goto label2;
            default: goto label3;
        };

     label2:
        $r5 = (java.lang.String) r1;

        r2.dockPosition = $r5;

        goto label4;

     label3:
        $r6 = new java.lang.InternalError;

        specialinvoke $r6.<init>();

        throw $r6;

     label4:
        r0.fireTableRowsUpdated(i0, i0);

        return;
    }

    public java.lang.String getColumnName(int)
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;
        int i0;
        java.lang.String $r1, $r2;
        java.lang.InternalError $r3;

        r0 := @this;

        i0 := @parameter0;

        lookupswitch(i0)
        {
            case 0: goto label1;
            case 1: goto label2;
            default: goto label3;
        };

     label1:
        $r2 = org.gjt.sp.jedit.jEdit.getProperty("options.docking.title");

        return $r2;

     label2:
        $r1 = org.gjt.sp.jedit.jEdit.getProperty("options.docking.dockPosition");

        return $r1;

     label3:
        $r3 = new java.lang.InternalError;

        specialinvoke $r3.<init>();

        throw $r3;
    }

    public void save()
    {
        org.gjt.sp.jedit.options.WindowTableModel r0;
        java.util.Vector $r1, $r2;
        int $i0, i1;
        java.lang.Object $r3;
        org.gjt.sp.jedit.options.WindowTableModel$Entry $r4;

        r0 := @this;

(0)     i1 = 0;

     label1:
        i1 = Phi(i1 #0, i1 #1);

        $r1 = r0.windows;

        $i0 = $r1.size();

        if i1 >= $i0 goto label2;

        $r2 = r0.windows;

        $r3 = $r2.elementAt(i1);

        $r4 = (org.gjt.sp.jedit.options.WindowTableModel$Entry) $r3;

        $r4.save();

        i1 = i1 + 1;

(1)     goto label1;

     label2:
        return;
    }
}
