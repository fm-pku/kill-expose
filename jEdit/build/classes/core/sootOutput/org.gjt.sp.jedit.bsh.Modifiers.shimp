public class org.gjt.sp.jedit.bsh.Modifiers extends java.lang.Object implements java.io.Serializable
{
    public static final int CLASS;
    public static final int METHOD;
    public static final int FIELD;
    java.util.Hashtable modifiers;

    public void <init>()
    {
        org.gjt.sp.jedit.bsh.Modifiers r0;

        r0 := @this;

        specialinvoke r0.<init>();

        return;
    }

    public void addModifier(int, java.lang.String)
    {
        org.gjt.sp.jedit.bsh.Modifiers r0;
        int i0, i1, i1_1, i1_2, i1_3, i1_4, i1_5, i1_6;
        java.lang.String r1, $r11;
        java.lang.Object r2;
        java.util.Hashtable $r3, $r5, $r12;
        java.lang.Class $r4;
        boolean $z0, $z1, $z2;
        java.lang.IllegalStateException $r6, $r7;
        java.lang.StringBuilder $r8, $r9, $r10;

        r0 := @this;

        i0 := @parameter0;

        r1 := @parameter1;

        $r3 = r0.modifiers;

        if $r3 != null goto label01;

        $r12 = new java.util.Hashtable;

        specialinvoke $r12.<init>();

        r0.modifiers = $r12;

     label01:
        $r5 = r0.modifiers;

        $r4 = java.lang.Void.TYPE;

        r2 = $r5.put(r1, $r4);

        if r2 == null goto label02;

        $r7 = new java.lang.IllegalStateException;

        $r8 = new java.lang.StringBuilder;

        specialinvoke $r8.<init>();

        $r9 = $r8.append("Duplicate modifier: ");

        $r10 = $r9.append(r1);

        $r11 = $r10.toString();

        specialinvoke $r7.<init>($r11);

        throw $r7;

     label02:
        i1 = 0;

        $z0 = r0.hasModifier("private");

(0)     if $z0 == 0 goto label03;

(1)     i1_1 = i1 + 1;

     label03:
        i1_2 = Phi(i1 #0, i1_1 #1);

        $z1 = r0.hasModifier("protected");

(2)     if $z1 == 0 goto label04;

(3)     i1_3 = i1_2 + 1;

     label04:
        i1_4 = Phi(i1_2 #2, i1_3 #3);

        $z2 = r0.hasModifier("public");

(4)     if $z2 == 0 goto label05;

(5)     i1_5 = i1_4 + 1;

     label05:
        i1_6 = Phi(i1_4 #4, i1_5 #5);

        if i1_6 <= 1 goto label06;

        $r6 = new java.lang.IllegalStateException;

        specialinvoke $r6.<init>("public/private/protected cannot be used in combination.");

        throw $r6;

     label06:
        tableswitch(i0)
        {
            case 0: goto label07;
            case 1: goto label08;
            case 2: goto label09;
            default: goto label10;
        };

     label07:
        specialinvoke r0.validateForClass();

        goto label10;

     label08:
        specialinvoke r0.validateForMethod();

        goto label10;

     label09:
        specialinvoke r0.validateForField();

     label10:
        return;
    }

    public boolean hasModifier(java.lang.String)
    {
        org.gjt.sp.jedit.bsh.Modifiers r0;
        java.lang.String r1;
        java.util.Hashtable $r2, $r3, $r5;
        java.lang.Object $r4;
        boolean $z0, $z0_1, $z0_2;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.modifiers;

        if $r2 != null goto label1;

        $r5 = new java.util.Hashtable;

        specialinvoke $r5.<init>();

        r0.modifiers = $r5;

     label1:
        $r3 = r0.modifiers;

        $r4 = $r3.get(r1);

        if $r4 == null goto label2;

        $z0 = 1;

(0)     goto label3;

     label2:
(1)     $z0_1 = 0;

     label3:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        return $z0_2;
    }

    private void validateForMethod()
    {
        org.gjt.sp.jedit.bsh.Modifiers r0;

        r0 := @this;

        specialinvoke r0.insureNo("volatile", "Method");

        specialinvoke r0.insureNo("transient", "Method");

        return;
    }

    private void validateForField()
    {
        org.gjt.sp.jedit.bsh.Modifiers r0;

        r0 := @this;

        specialinvoke r0.insureNo("synchronized", "Variable");

        specialinvoke r0.insureNo("native", "Variable");

        specialinvoke r0.insureNo("abstract", "Variable");

        return;
    }

    private void validateForClass()
    {
        org.gjt.sp.jedit.bsh.Modifiers r0;

        r0 := @this;

        specialinvoke r0.validateForMethod();

        specialinvoke r0.insureNo("native", "Class");

        specialinvoke r0.insureNo("synchronized", "Class");

        return;
    }

    private void insureNo(java.lang.String, java.lang.String)
    {
        org.gjt.sp.jedit.bsh.Modifiers r0;
        java.lang.String r1, r2, $r9;
        boolean $z0;
        java.lang.IllegalStateException $r3;
        java.lang.StringBuilder $r4, $r5, $r6, $r7, $r8;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $z0 = r0.hasModifier(r1);

        if $z0 == 0 goto label1;

        $r3 = new java.lang.IllegalStateException;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r5 = $r4.append(r2);

        $r6 = $r5.append(" cannot be declared \'");

        $r7 = $r6.append(r1);

        $r8 = $r7.append("\'");

        $r9 = $r8.toString();

        specialinvoke $r3.<init>($r9);

        throw $r3;

     label1:
        return;
    }

    public java.lang.String toString()
    {
        org.gjt.sp.jedit.bsh.Modifiers r0;
        java.lang.StringBuilder $r1, $r2, $r4;
        java.util.Hashtable $r3;
        java.lang.String $r5;

        r0 := @this;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<init>();

        $r2 = $r1.append("Modifiers: ");

        $r3 = r0.modifiers;

        $r4 = $r2.append($r3);

        $r5 = $r4.toString();

        return $r5;
    }
}
