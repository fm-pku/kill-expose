public interface  org.gjt.sp.jedit.bsh.ParserConstants extends java.lang.Object
{
    public static final int EOF;
    public static final int NONPRINTABLE;
    public static final int SINGLE_LINE_COMMENT;
    public static final int HASH_BANG_COMMENT;
    public static final int MULTI_LINE_COMMENT;
    public static final int ABSTRACT;
    public static final int BOOLEAN;
    public static final int BREAK;
    public static final int CLASS;
    public static final int BYTE;
    public static final int CASE;
    public static final int CATCH;
    public static final int CHAR;
    public static final int CONST;
    public static final int CONTINUE;
    public static final int _DEFAULT;
    public static final int DO;
    public static final int DOUBLE;
    public static final int ELSE;
    public static final int ENUM;
    public static final int EXTENDS;
    public static final int FALSE;
    public static final int FINAL;
    public static final int FINALLY;
    public static final int FLOAT;
    public static final int FOR;
    public static final int GOTO;
    public static final int IF;
    public static final int IMPLEMENTS;
    public static final int IMPORT;
    public static final int INSTANCEOF;
    public static final int INT;
    public static final int INTERFACE;
    public static final int LONG;
    public static final int NATIVE;
    public static final int NEW;
    public static final int NULL;
    public static final int PACKAGE;
    public static final int PRIVATE;
    public static final int PROTECTED;
    public static final int PUBLIC;
    public static final int RETURN;
    public static final int SHORT;
    public static final int STATIC;
    public static final int STRICTFP;
    public static final int SWITCH;
    public static final int SYNCHRONIZED;
    public static final int TRANSIENT;
    public static final int THROW;
    public static final int THROWS;
    public static final int TRUE;
    public static final int TRY;
    public static final int VOID;
    public static final int VOLATILE;
    public static final int WHILE;
    public static final int INTEGER_LITERAL;
    public static final int DECIMAL_LITERAL;
    public static final int HEX_LITERAL;
    public static final int OCTAL_LITERAL;
    public static final int FLOATING_POINT_LITERAL;
    public static final int EXPONENT;
    public static final int CHARACTER_LITERAL;
    public static final int STRING_LITERAL;
    public static final int FORMAL_COMMENT;
    public static final int IDENTIFIER;
    public static final int LETTER;
    public static final int DIGIT;
    public static final int LPAREN;
    public static final int RPAREN;
    public static final int LBRACE;
    public static final int RBRACE;
    public static final int LBRACKET;
    public static final int RBRACKET;
    public static final int SEMICOLON;
    public static final int COMMA;
    public static final int DOT;
    public static final int ASSIGN;
    public static final int GT;
    public static final int GTX;
    public static final int LT;
    public static final int LTX;
    public static final int BANG;
    public static final int TILDE;
    public static final int HOOK;
    public static final int COLON;
    public static final int EQ;
    public static final int LE;
    public static final int LEX;
    public static final int GE;
    public static final int GEX;
    public static final int NE;
    public static final int BOOL_OR;
    public static final int BOOL_ORX;
    public static final int BOOL_AND;
    public static final int BOOL_ANDX;
    public static final int INCR;
    public static final int DECR;
    public static final int PLUS;
    public static final int MINUS;
    public static final int STAR;
    public static final int SLASH;
    public static final int BIT_AND;
    public static final int BIT_ANDX;
    public static final int BIT_OR;
    public static final int BIT_ORX;
    public static final int XOR;
    public static final int MOD;
    public static final int LSHIFT;
    public static final int LSHIFTX;
    public static final int RSIGNEDSHIFT;
    public static final int RSIGNEDSHIFTX;
    public static final int RUNSIGNEDSHIFT;
    public static final int RUNSIGNEDSHIFTX;
    public static final int PLUSASSIGN;
    public static final int MINUSASSIGN;
    public static final int STARASSIGN;
    public static final int SLASHASSIGN;
    public static final int ANDASSIGN;
    public static final int ANDASSIGNX;
    public static final int ORASSIGN;
    public static final int ORASSIGNX;
    public static final int XORASSIGN;
    public static final int MODASSIGN;
    public static final int LSHIFTASSIGN;
    public static final int LSHIFTASSIGNX;
    public static final int RSIGNEDSHIFTASSIGN;
    public static final int RSIGNEDSHIFTASSIGNX;
    public static final int RUNSIGNEDSHIFTASSIGN;
    public static final int RUNSIGNEDSHIFTASSIGNX;
    public static final int DEFAULT;
    public static final java.lang.String[] tokenImage;

    static void <clinit>()
    {
        java.lang.String[] $r0;

        $r0 = newarray (java.lang.String)[134];

        $r0[0] = "<EOF>";

        $r0[1] = "\" \"";

        $r0[2] = "\"\\t\"";

        $r0[3] = "\"\\r\"";

        $r0[4] = "\"\\f\"";

        $r0[5] = "\"\\n\"";

        $r0[6] = "<NONPRINTABLE>";

        $r0[7] = "<SINGLE_LINE_COMMENT>";

        $r0[8] = "<HASH_BANG_COMMENT>";

        $r0[9] = "<MULTI_LINE_COMMENT>";

        $r0[10] = "\"abstract\"";

        $r0[11] = "\"boolean\"";

        $r0[12] = "\"break\"";

        $r0[13] = "\"class\"";

        $r0[14] = "\"byte\"";

        $r0[15] = "\"case\"";

        $r0[16] = "\"catch\"";

        $r0[17] = "\"char\"";

        $r0[18] = "\"const\"";

        $r0[19] = "\"continue\"";

        $r0[20] = "\"default\"";

        $r0[21] = "\"do\"";

        $r0[22] = "\"double\"";

        $r0[23] = "\"else\"";

        $r0[24] = "\"enum\"";

        $r0[25] = "\"extends\"";

        $r0[26] = "\"false\"";

        $r0[27] = "\"final\"";

        $r0[28] = "\"finally\"";

        $r0[29] = "\"float\"";

        $r0[30] = "\"for\"";

        $r0[31] = "\"goto\"";

        $r0[32] = "\"if\"";

        $r0[33] = "\"implements\"";

        $r0[34] = "\"import\"";

        $r0[35] = "\"instanceof\"";

        $r0[36] = "\"int\"";

        $r0[37] = "\"interface\"";

        $r0[38] = "\"long\"";

        $r0[39] = "\"native\"";

        $r0[40] = "\"new\"";

        $r0[41] = "\"null\"";

        $r0[42] = "\"package\"";

        $r0[43] = "\"private\"";

        $r0[44] = "\"protected\"";

        $r0[45] = "\"public\"";

        $r0[46] = "\"return\"";

        $r0[47] = "\"short\"";

        $r0[48] = "\"static\"";

        $r0[49] = "\"strictfp\"";

        $r0[50] = "\"switch\"";

        $r0[51] = "\"synchronized\"";

        $r0[52] = "\"transient\"";

        $r0[53] = "\"throw\"";

        $r0[54] = "\"throws\"";

        $r0[55] = "\"true\"";

        $r0[56] = "\"try\"";

        $r0[57] = "\"void\"";

        $r0[58] = "\"volatile\"";

        $r0[59] = "\"while\"";

        $r0[60] = "<INTEGER_LITERAL>";

        $r0[61] = "<DECIMAL_LITERAL>";

        $r0[62] = "<HEX_LITERAL>";

        $r0[63] = "<OCTAL_LITERAL>";

        $r0[64] = "<FLOATING_POINT_LITERAL>";

        $r0[65] = "<EXPONENT>";

        $r0[66] = "<CHARACTER_LITERAL>";

        $r0[67] = "<STRING_LITERAL>";

        $r0[68] = "<FORMAL_COMMENT>";

        $r0[69] = "<IDENTIFIER>";

        $r0[70] = "<LETTER>";

        $r0[71] = "<DIGIT>";

        $r0[72] = "\"(\"";

        $r0[73] = "\")\"";

        $r0[74] = "\"{\"";

        $r0[75] = "\"}\"";

        $r0[76] = "\"[\"";

        $r0[77] = "\"]\"";

        $r0[78] = "\";\"";

        $r0[79] = "\",\"";

        $r0[80] = "\".\"";

        $r0[81] = "\"=\"";

        $r0[82] = "\">\"";

        $r0[83] = "\"@gt\"";

        $r0[84] = "\"<\"";

        $r0[85] = "\"@lt\"";

        $r0[86] = "\"!\"";

        $r0[87] = "\"~\"";

        $r0[88] = "\"?\"";

        $r0[89] = "\":\"";

        $r0[90] = "\"==\"";

        $r0[91] = "\"<=\"";

        $r0[92] = "\"@lteq\"";

        $r0[93] = "\">=\"";

        $r0[94] = "\"@gteq\"";

        $r0[95] = "\"!=\"";

        $r0[96] = "\"||\"";

        $r0[97] = "\"@or\"";

        $r0[98] = "\"&&\"";

        $r0[99] = "\"@and\"";

        $r0[100] = "\"++\"";

        $r0[101] = "\"--\"";

        $r0[102] = "\"+\"";

        $r0[103] = "\"-\"";

        $r0[104] = "\"*\"";

        $r0[105] = "\"/\"";

        $r0[106] = "\"&\"";

        $r0[107] = "\"@bitwise_and\"";

        $r0[108] = "\"|\"";

        $r0[109] = "\"@bitwise_or\"";

        $r0[110] = "\"^\"";

        $r0[111] = "\"%\"";

        $r0[112] = "\"<<\"";

        $r0[113] = "\"@left_shift\"";

        $r0[114] = "\">>\"";

        $r0[115] = "\"@right_shift\"";

        $r0[116] = "\">>>\"";

        $r0[117] = "\"@right_unsigned_shift\"";

        $r0[118] = "\"+=\"";

        $r0[119] = "\"-=\"";

        $r0[120] = "\"*=\"";

        $r0[121] = "\"/=\"";

        $r0[122] = "\"&=\"";

        $r0[123] = "\"@and_assign\"";

        $r0[124] = "\"|=\"";

        $r0[125] = "\"@or_assign\"";

        $r0[126] = "\"^=\"";

        $r0[127] = "\"%=\"";

        $r0[128] = "\"<<=\"";

        $r0[129] = "\"@left_shift_assign\"";

        $r0[130] = "\">>=\"";

        $r0[131] = "\"@right_shift_assign\"";

        $r0[132] = "\">>>=\"";

        $r0[133] = "\"@right_unsigned_shift_assign\"";

        org.gjt.sp.jedit.bsh.ParserConstants.tokenImage = $r0;

        return;
    }
}
