class org.gjt.sp.jedit.bsh.XThis$Handler extends java.lang.Object implements java.lang.reflect.InvocationHandler, java.io.Serializable
{
    final org.gjt.sp.jedit.bsh.XThis this$0;

    void <init>(org.gjt.sp.jedit.bsh.XThis)
    {
        org.gjt.sp.jedit.bsh.XThis$Handler r0;
        org.gjt.sp.jedit.bsh.XThis r1;

        r0 := @this;

        r1 := @parameter0;

        r0.this$0 = r1;

        specialinvoke r0.<init>();

        return;
    }

    public java.lang.Object invoke(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws java.lang.Throwable
    {
        org.gjt.sp.jedit.bsh.XThis$Handler r0;
        java.lang.Object r1, $r4;
        java.lang.reflect.Method r2;
        java.lang.Object[] r3;
        org.gjt.sp.jedit.bsh.EvalError $r5, r17;
        boolean $z0;
        java.lang.StringBuilder $r6, $r7, $r10, $r11, $r12;
        org.gjt.sp.jedit.bsh.XThis $r8;
        java.lang.String $r9, $r13;
        org.gjt.sp.jedit.bsh.TargetError $r14, r16;
        java.lang.Throwable $r15;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

     label1:
        $r4 = r0.invokeImpl(r1, r2, r3);

     label2:
        return $r4;

     label3:
        $r14 := @caughtexception;

        r16 = $r14;

        $r15 = r16.getTarget();

        throw $r15;

     label4:
        $r5 := @caughtexception;

        r17 = $r5;

        $z0 = org.gjt.sp.jedit.bsh.Interpreter.DEBUG;

        if $z0 == 0 goto label5;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<init>();

        $r7 = $r6.append("EvalError in scripted interface: ");

        $r8 = r0.this$0;

        $r9 = $r8.toString();

        $r10 = $r7.append($r9);

        $r11 = $r10.append(": ");

        $r12 = $r11.append(r17);

        $r13 = $r12.toString();

        org.gjt.sp.jedit.bsh.Interpreter.debug($r13);

     label5:
        throw r17;

        catch org.gjt.sp.jedit.bsh.TargetError from label1 to label2 with label3;
        catch org.gjt.sp.jedit.bsh.EvalError from label1 to label2 with label4;
    }

    public java.lang.Object invokeImpl(java.lang.Object, java.lang.reflect.Method, java.lang.Object[]) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.XThis$Handler r0;
        java.lang.Object r1, $r18, $r19, r42;
        java.lang.reflect.Method r2;
        java.lang.Object[] r3, $r17;
        java.lang.String r4, $r24, $r27, $r28, $r32, $r35, $r46;
        org.gjt.sp.jedit.bsh.CallStack r5, $r7;
        java.lang.StringBuilder r6, $r21, $r22, $r25, $r26, $r29, $r30, $r33, $r34;
        org.gjt.sp.jedit.bsh.XThis $r8, $r10, $r13, $r16, $r23;
        org.gjt.sp.jedit.bsh.NameSpace $r9, $r12, $r15;
        java.lang.Class[] $r11, $r14, r45, r47;
        boolean $z0, $z1, $z2, $z2_1, $z2_2;
        java.lang.Class $r20, $r31;
        int $i0, $i1, i2;
        java.lang.Boolean $r37;
        org.gjt.sp.jedit.bsh.UtilEvalError $r38, $r39, r41, r44;
        org.gjt.sp.jedit.bsh.BshMethod r40, r43, r40_1, r40_2, r40_3, r43_1, r43_2, r43_3;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        r4 = r2.getName();

        $r7 = new org.gjt.sp.jedit.bsh.CallStack;

        $r8 = r0.this$0;

        $r9 = $r8.namespace;

        specialinvoke $r7.<init>($r9);

        r5 = $r7;

        r40 = null;

     label01:
        $r10 = r0.this$0;

        $r12 = $r10.namespace;

        $r11 = newarray (java.lang.Class)[1];

(0)     $r11[0] = class "java/lang/Object";

(1)     r40_1 = $r12.getMethod("equals", $r11);

     label02:
(2)     goto label04;

     label03:
        $r38 := @caughtexception;

        r40_2 = Phi(r40 #0, r40_1 #1);

(3)     r41 = $r38;

     label04:
        r40_3 = Phi(r40_1 #2, r40_2 #3);

        $z0 = r4.equals("equals");

        if $z0 == 0 goto label07;

        if r40_3 != null goto label07;

        r42 = r3[0];

        $r37 = new java.lang.Boolean;

        if r1 != r42 goto label05;

        $z2 = 1;

(4)     goto label06;

     label05:
(5)     $z2_1 = 0;

     label06:
        $z2_2 = Phi($z2 #4, $z2_1 #5);

        specialinvoke $r37.<init>($z2_2);

        return $r37;

     label07:
        r43 = null;

     label08:
        $r13 = r0.this$0;

        $r15 = $r13.namespace;

(6)     $r14 = newarray (java.lang.Class)[0];

(7)     r43_1 = $r15.getMethod("toString", $r14);

     label09:
(8)     goto label11;

     label10:
        $r39 := @caughtexception;

        r43_2 = Phi(r43 #6, r43_1 #7);

(9)     r44 = $r39;

     label11:
        r43_3 = Phi(r43_1 #8, r43_2 #9);

        $z1 = r4.equals("toString");

        if $z1 == 0 goto label16;

        if r43_3 != null goto label16;

        $r20 = r1.getClass();

        r45 = $r20.getInterfaces();

        $r21 = new java.lang.StringBuilder;

        $r22 = new java.lang.StringBuilder;

        specialinvoke $r22.<init>();

        $r23 = r0.this$0;

        $r24 = $r23.toString();

        $r25 = $r22.append($r24);

        $r26 = $r25.append("\nimplements:");

        $r27 = $r26.toString();

        specialinvoke $r21.<init>($r27);

        r6 = $r21;

(10)    i2 = 0;

     label12:
        $r46 = Phi($r46 #10, $r46 #13);

        r40 = Phi(r40_3 #10, r40 #13);

        r43 = Phi(r43_3 #10, r43 #13);

        i2 = Phi(i2 #10, i2 #13);

        $i0 = lengthof r45;

        if i2 >= $i0 goto label15;

        $r29 = new java.lang.StringBuilder;

        specialinvoke $r29.<init>();

        $r30 = $r29.append(" ");

        $r31 = r45[i2];

        $r32 = $r31.getName();

        $r33 = $r30.append($r32);

        $i1 = lengthof r45;

        if $i1 <= 1 goto label13;

        $r46 = ",";

(11)    goto label14;

     label13:
(12)    $r46 = "";

     label14:
        $r46 = Phi($r46 #11, $r46 #12);

        $r34 = $r33.append($r46);

        $r35 = $r34.toString();

        r6.append($r35);

        i2 = i2 + 1;

(13)    goto label12;

     label15:
        $r28 = r6.toString();

        return $r28;

     label16:
        r47 = r2.getParameterTypes();

        $r16 = r0.this$0;

        $r17 = org.gjt.sp.jedit.bsh.Primitive.wrap(r3, r47);

        $r18 = $r16.invokeMethod(r4, $r17);

        $r19 = org.gjt.sp.jedit.bsh.Primitive.unwrap($r18);

        return $r19;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label01 to label02 with label03;
        catch org.gjt.sp.jedit.bsh.UtilEvalError from label08 to label09 with label10;
    }
}
