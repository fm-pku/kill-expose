public class org.gjt.sp.jedit.Buffer extends org.gjt.sp.jedit.buffer.JEditBuffer
{
    public static final java.lang.String BACKED_UP;
    public static final java.lang.String CARET;
    public static final java.lang.String CARET_POSITIONED;
    public static final java.lang.String SELECTION;
    public static final java.lang.String SCROLL_VERT;
    public static final java.lang.String SCROLL_HORIZ;
    public static final java.lang.String ENCODING_AUTODETECT;
    public static final java.lang.String TRAILING_EOL;
    public static final java.lang.String GZIPPED;
    public static final int FILE_NOT_CHANGED;
    public static final int FILE_CHANGED;
    public static final int FILE_DELETED;
    org.gjt.sp.jedit.Buffer prev;
    org.gjt.sp.jedit.Buffer next;
    private static final int CLOSED;
    private static final int NEW_FILE;
    private static final int UNTITLED;
    private static final int AUTOSAVE_DIRTY;
    private static final int AUTORELOAD;
    private static final int AUTORELOAD_DIALOG;
    private static final int TEMPORARY;
    private static final int MARKERS_CHANGED;
    private int flags;
    private int longLineLimit;
    private org.gjt.sp.jedit.syntax.TokenMarker textTokenMarker;
    private boolean autoreloadOverridden;
    private java.lang.String path;
    private java.lang.String symlinkPath;
    private java.lang.String name;
    private java.lang.String directory;
    private java.io.File file;
    private java.io.File autosaveFile;
    private long modTime;
    private byte[] md5hash;
    private int initialLength;
    private boolean longBufferMode;
    private final java.util.Vector markers;
    private java.net.Socket waitSocket;
    private java.util.List undoListeners;

    public void reload(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        java.lang.String[] r2, $r4;
        int i0;
        boolean $z0, $z1;
        org.gjt.sp.jedit.visitors.SaveCaretInfoVisitor $r3;
        java.lang.String $r5;

        r0 := @this;

        r1 := @parameter0;

        $z0 = specialinvoke r0.getFlag(4);

        if $z0 == 0 goto label1;

        return;

     label1:
        $z1 = r0.isDirty();

        if $z1 == 0 goto label2;

        $r4 = newarray (java.lang.String)[1];

        $r5 = r0.path;

        $r4[0] = $r5;

        r2 = $r4;

        i0 = org.gjt.sp.jedit.GUIUtilities.confirm(r1, "changedreload", r2, 0, 2);

        if i0 == 0 goto label2;

        return;

     label2:
        $r3 = new org.gjt.sp.jedit.visitors.SaveCaretInfoVisitor;

        specialinvoke $r3.<init>();

        r1.visit($r3);

        r0.load(r1, 1);

        return;
    }

    public boolean load(org.gjt.sp.jedit.View, boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, z10, z10_1, z10_2, z10_3, z10_4;
        java.io.File $r2, $r3, $r9, $r10, $r11, $r12;
        org.gjt.sp.jedit.Buffer$1 $r4, r16;
        org.gjt.sp.util.AwtRunnableQueue $r5;
        java.lang.String $r6, $r7, $r8;
        long $l0;
        org.gjt.sp.jedit.msg.BufferUpdate $r13;
        java.lang.Object $r14;
        org.gjt.sp.jedit.io.VFS r15;

        r0 := @this;

        r1 := @parameter0;

        z0 := @parameter1;

        $z1 = r0.isPerformingIO();

        if $z1 == 0 goto label01;

        org.gjt.sp.jedit.GUIUtilities.error(r1, "buffer-multiple-io", null);

        return 0;

     label01:
        r0.setBooleanProperty("BufferIORequest__error", 0);

        r0.setLoading(1);

        $z2 = specialinvoke r0.getFlag(10);

        if $z2 != 0 goto label02;

        $r13 = new org.gjt.sp.jedit.msg.BufferUpdate;

        $r14 = org.gjt.sp.jedit.msg.BufferUpdate.LOAD_STARTED;

        specialinvoke $r13.<init>(r0, r1, $r14);

        org.gjt.sp.jedit.EditBus.send($r13);

     label02:
        if z0 != 0 goto label03;

        $z9 = specialinvoke r0.getFlag(3);

        if $z9 != 0 goto label11;

     label03:
        $r2 = r0.file;

        if $r2 == null goto label04;

        $r12 = r0.file;

        Packer.Unpack(r0);

        $l0 = $r12.lastModified();

        Packer.Pack(r0);

        r0.modTime = $l0;

     label04:
        if z0 != 0 goto label05;

        $r10 = r0.autosaveFile;

        if $r10 == null goto label05;

        Packer.Unpack(r0);

        $r11 = r0.autosaveFile;

        $z8 = $r11.exists();

        Packer.Pack(r0);

        if $z8 == 0 goto label05;

        z10_1 = specialinvoke r0.recoverAutosave(r1);

(0)     goto label07;

     label05:
        $r3 = r0.autosaveFile;

        if $r3 == null goto label06;

        Packer.Unpack(r0);

        $r9 = r0.autosaveFile;

        $r9.delete();

     label06:
        Packer.Pack(r0);

(1)     z10_2 = 0;

     label07:
        z10_3 = Phi(z10_1 #0, z10_2 #1);

(2)     if z10_3 != 0 goto label12;

        $r6 = r0.path;

        r15 = org.gjt.sp.jedit.io.VFSManager.getVFSForPath($r6);

        $r7 = r0.path;

        $z4 = specialinvoke r0.checkFileForLoad(r1, r15, $r7);

        if $z4 != 0 goto label08;

        r0.setLoading(0);

        return 0;

     label08:
        if z0 != 0 goto label09;

        $z6 = specialinvoke r0.getFlag(3);

        if $z6 != 0 goto label10;

     label09:
        $r8 = r0.path;

        $z5 = r15.load(r1, r0, $r8);

        if $z5 != 0 goto label10;

        r0.setLoading(0);

        return 0;

     label10:
(3)     goto label12;

     label11:
(4)     z10 = 0;

     label12:
        z10_4 = Phi(z10_3 #2, z10_3 #3, z10 #4);

        $r4 = new org.gjt.sp.jedit.Buffer$1;

        specialinvoke $r4.<init>(r0, z0, z10_4, r1);

        r16 = $r4;

        $z3 = specialinvoke r0.getFlag(10);

        if $z3 == 0 goto label13;

        r16.run();

        goto label14;

     label13:
        $r5 = org.gjt.sp.util.AwtRunnableQueue.INSTANCE;

        $r5.runAfterIoTasks(r16);

     label14:
        return 1;
    }

    public boolean insertFile(org.gjt.sp.jedit.View, java.lang.String)
    {
        org.gjt.sp.jedit.Buffer r0, r2;
        org.gjt.sp.jedit.View r1;
        org.gjt.sp.jedit.io.VFS r3;
        boolean $z0, $z1;
        java.lang.String $r4, $r6, r7, r8;
        org.gjt.sp.jedit.textarea.JEditTextArea $r5;
        int $i0;

        r0 := @this;

        r1 := @parameter0;

        r7 := @parameter1;

        $z0 = r0.isPerformingIO();

        if $z0 == 0 goto label1;

        org.gjt.sp.jedit.GUIUtilities.error(r1, "buffer-multiple-io", null);

        return 0;

     label1:
        r0.setBooleanProperty("BufferIORequest__error", 0);

        $r4 = r0.path;

        r8 = org.gjt.sp.jedit.MiscUtilities.constructPath($r4, r7);

        r2 = org.gjt.sp.jedit.jEdit.getBuffer(r8);

        if r2 == null goto label2;

        $r5 = r1.getTextArea();

        $i0 = r2.getLength();

        $r6 = r2.getText(0, $i0);

        $r5.setSelectedText($r6);

        return 1;

     label2:
        r3 = org.gjt.sp.jedit.io.VFSManager.getVFSForPath(r8);

        $z1 = r3.insert(r1, r0, r8);

        return $z1;
    }

    public void autosave()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.io.File $r1, $r2, $r3, $r6;
        boolean $z0, $z1, $z2, $z3;
        org.gjt.sp.jedit.bufferio.BufferAutosaveRequest $r4;
        org.gjt.sp.jedit.io.VFS $r5;
        java.lang.String $r7;

        r0 := @this;

        $r1 = r0.autosaveFile;

        if $r1 == null goto label1;

        $z0 = specialinvoke r0.getFlag(5);

        if $z0 == 0 goto label1;

        $z1 = r0.isDirty();

        if $z1 == 0 goto label1;

        $z2 = r0.isPerformingIO();

        if $z2 != 0 goto label1;

        $r2 = r0.autosaveFile;

        Packer.Unpack(r0);

        $r3 = $r2.getParentFile();

        Packer.Pack(r0);

        $z3 = $r3.exists();

        if $z3 != 0 goto label2;

     label1:
        return;

     label2:
        specialinvoke r0.setFlag(5, 0);

        $r4 = new org.gjt.sp.jedit.bufferio.BufferAutosaveRequest;

        $r5 = org.gjt.sp.jedit.io.VFSManager.getFileVFS();

        $r6 = r0.autosaveFile;

        Packer.Unpack(r0);

        $r7 = $r6.getPath();

        Packer.Pack(r0);

        specialinvoke $r4.<init>(null, r0, null, $r5, $r7);

        org.gjt.sp.util.ThreadUtilities.runInBackground($r4);

        return;
    }

    public boolean saveAs(org.gjt.sp.jedit.View, boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        boolean z0, $z1, z2;
        org.gjt.sp.jedit.browser.VFSBrowser r2;
        java.lang.String $r3, $r5, r8, r8_1, r8_2;
        java.lang.StringBuilder $r4, $r6, $r7;
        org.gjt.sp.jedit.gui.DockableWindowManager r9;
        javax.swing.JComponent r10;
        java.lang.String[] r11;

        r0 := @this;

        r1 := @parameter0;

        z0 := @parameter1;

        r8 = r0.path;

        $z1 = org.gjt.sp.jedit.jEdit.getBooleanProperty("saveAsUsesFSB");

(0)     if $z1 == 0 goto label1;

        r9 = r1.getDockableWindowManager();

        r10 = r9.getDockable("vfs.browser");

        r2 = (org.gjt.sp.jedit.browser.VFSBrowser) r10;

(1)     if r2 == null goto label1;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        $r5 = r2.getDirectory();

        $r6 = $r4.append($r5);

        $r7 = $r6.append("/");

(2)     r8_1 = $r7.toString();

     label1:
        r8_2 = Phi(r8 #0, r8 #1, r8_1 #2);

        r11 = org.gjt.sp.jedit.GUIUtilities.showVFSFileDialog(r1, r8_2, 1, 0);

        if r11 != null goto label2;

        return 0;

     label2:
        $r3 = r11[0];

        z2 = r0.save(r1, $r3, z0);

        if z2 == 0 goto label3;

        r0.setReadOnly(0);

     label3:
        return z2;
    }

    public boolean save(org.gjt.sp.jedit.View, java.lang.String)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        java.lang.String r2;
        boolean $z0;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $z0 = r0.save(r1, r2, 1, 0);

        return $z0;
    }

    public boolean save(org.gjt.sp.jedit.View, java.lang.String, boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        java.lang.String r2;
        boolean z0, $z1;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        z0 := @parameter2;

        $z1 = r0.save(r1, r2, z0, 0);

        return $z1;
    }

    public boolean save(org.gjt.sp.jedit.View, java.lang.String, boolean, boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        java.lang.String r2, r3, $r16, $r21, $r24, $r27, $r30, $r33, $r36, $r40, $r43, $r46, r48, $r49, r50, r53, r54, r58, r59, $r49_1, $r49_2, r53_1, r53_2, r58_1, r58_2, r58_3, r53_3, r58_4, r53_4, r58_5, r53_5;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z7, $z8, $z9, $z10, $z11, $z12, $z13, z14, z15, z16, z17, z18, z19, $z13_1, $z13_2, $z13_3, $z13_4, $z13_5;
        java.lang.Object r4, $r8;
        java.lang.Throwable r5, $r37;
        java.io.IOException r6, $r22, $r25, $r28, $r31, $r34, $r38, $r41, $r44, r55, r56, r57, r60, r61, r62, r63;
        org.gjt.sp.jedit.msg.BufferUpdate $r7;
        org.gjt.sp.jedit.Buffer$2 $r9;
        org.gjt.sp.util.AwtRunnableQueue $r10;
        int $i0, $i1, i5, i6, i7;
        java.lang.Object[] $r11, $r17, $r20, r47;
        java.lang.StringBuilder $r12, $r13, $r14, $r15;
        java.io.File $r18, $r19;
        long $l2, l4;
        byte $b3;
        java.lang.String[] $r23, $r26, $r29, $r32, $r35, $r39, $r42, $r45;
        org.gjt.sp.jedit.io.VFS r51;
        org.gjt.sp.jedit.io.VFSFile r52;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        z0 := @parameter2;

        z1 := @parameter3;

        $z2 = r0.isPerformingIO();

        if $z2 == 0 goto label01;

        org.gjt.sp.jedit.GUIUtilities.error(r1, "buffer-multiple-io", null);

        return 0;

     label01:
        r0.setBooleanProperty("BufferIORequest__error", 0);

        if r2 != null goto label02;

        $z11 = specialinvoke r0.getFlag(3);

        if $z11 == 0 goto label02;

        $z12 = r0.saveAs(r1, z0);

        return $z12;

     label02:
        if r2 != null goto label04;

        $r18 = r0.file;

        if $r18 == null goto label04;

        $r19 = r0.file;

        Packer.Unpack(r0);

        l4 = $r19.lastModified();

        Packer.Pack(r0);

        $l2 = r0.modTime;

        $b3 = l4 cmp $l2;

        if $b3 == 0 goto label04;

        $z9 = r0.getAutoReload();

        if $z9 != 0 goto label03;

        $z10 = r0.getAutoReloadDialog();

        if $z10 == 0 goto label04;

     label03:
        $r20 = newarray (java.lang.Object)[1];

        $r21 = r0.path;

        $r20[0] = $r21;

        r47 = $r20;

        i5 = org.gjt.sp.jedit.GUIUtilities.confirm(r1, "filechanged-save", r47, 0, 2);

        if i5 == 0 goto label04;

        return 0;

     label04:
        $r7 = new org.gjt.sp.jedit.msg.BufferUpdate;

        $r8 = org.gjt.sp.jedit.msg.BufferUpdate.SAVING;

        specialinvoke $r7.<init>(r0, r1, $r8);

        org.gjt.sp.jedit.EditBus.send($r7);

        r0.setPerformingIO(1);

        r48 = r0.path;

        r3 = r0.symlinkPath;

        if r2 != null goto label05;

        $r49 = r0.path;

(0)     goto label06;

     label05:
(1)     $r49_1 = r2;

     label06:
        $r49_2 = Phi($r49 #0, $r49_1 #1);

        r50 = $r49_2;

        r51 = org.gjt.sp.jedit.io.VFSManager.getVFSForPath(r50);

        $z3 = org.gjt.sp.jedit.Buffer.checkFileForSave(r1, r51, r50);

        if $z3 != 0 goto label07;

        r0.setPerformingIO(0);

        return 0;

     label07:
        r4 = r51.createVFSSession(r50, r1);

        if r4 != null goto label08;

        r0.setPerformingIO(0);

        return 0;

     label08:
        r0.unsetProperty("overwriteReadonly");

(2)     r0.unsetProperty("forbidTwoStageSave");

     label09:
        r52 = r51._getFile(r4, r50, r1);

(3)     if r52 == null goto label37;

        $i0 = r51.getCapabilities();

        $i1 = $i0 & 16;

        if $i1 == 0 goto label10;

        $z13 = 1;

(4)     goto label11;

     label10:
(5)     $z13_1 = 0;

     label11:
        $z13_2 = Phi($z13 #4, $z13_1 #5);

(6)     z14 = $z13_2;

        $z5 = r52.isWriteable();

        if $z5 != 0 goto label29;

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<init>();

        $r13 = $r12.append("Buffer saving : File ");

        $r14 = $r13.append(r52);

        $r15 = $r14.append(" is readOnly");

        $r16 = $r15.toString();

        org.gjt.sp.util.Log.log(7, r0, $r16);

        if z14 == 0 goto label24;

        org.gjt.sp.util.Log.log(1, r0, "Buffer saving : VFS can rename files");

        r53 = r51._canonPath(r4, r50, r1);

        $z8 = org.gjt.sp.jedit.MiscUtilities.isURL(r53);

(7)     if $z8 != 0 goto label12;

(8)     r53_1 = org.gjt.sp.jedit.MiscUtilities.resolveSymlinks(r53);

     label12:
        r53_2 = Phi(r53 #7, r53_1 #8);

(9)     r54 = r51.getTwoStageSaveName(r53_2);

        if r54 != null goto label17;

        org.gjt.sp.util.Log.log(1, r0, "Buffer saving : two stage save impossible because path is null");

        org.gjt.sp.jedit.io.VFSManager.error(r1, r50, "ioerror.save-readonly-twostagefail", null);

        r0.setPerformingIO(0);

        z15 = 0;

     label13:
        r51._endVFSSession(r4, r1);

     label14:
        goto label16;

     label15:
        $r44 := @caughtexception;

        r55 = $r44;

        $r45 = newarray (java.lang.String)[1];

        $r46 = r55.toString();

        $r45[0] = $r46;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r50, "ioerror", $r45);

        r0.setPerformingIO(0);

        return 0;

     label16:
        return z15;

     label17:
        $r17 = newarray (java.lang.Object)[1];

        $r17[0] = r50;

        i6 = org.gjt.sp.jedit.GUIUtilities.confirm(r1, "vfs.overwrite-readonly", $r17, 0, 2);

        if i6 != 0 goto label18;

        org.gjt.sp.util.Log.log(7, r0, "Buffer saving : two stage save will be used to save buffer");

        r0.setBooleanProperty("overwriteReadonly", 1);

        goto label23;

     label18:
        org.gjt.sp.util.Log.log(1, r0, "Buffer not saved");

        r0.setPerformingIO(0);

        z16 = 0;

     label19:
        r51._endVFSSession(r4, r1);

     label20:
        goto label22;

     label21:
        $r28 := @caughtexception;

        r56 = $r28;

        $r29 = newarray (java.lang.String)[1];

        $r30 = r56.toString();

        $r29[0] = $r30;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r50, "ioerror", $r29);

        r0.setPerformingIO(0);

        return 0;

     label22:
        return z16;

     label23:
(10)    goto label37;

     label24:
        org.gjt.sp.util.Log.log(7, r0, "Buffer saving : file is readonly and vfs cannot do two stage save");

        org.gjt.sp.jedit.io.VFSManager.error(r1, r50, "ioerror.write-error-readonly", null);

        r0.setPerformingIO(0);

        z17 = 0;

     label25:
        r51._endVFSSession(r4, r1);

     label26:
        goto label28;

     label27:
        $r25 := @caughtexception;

        r57 = $r25;

        $r26 = newarray (java.lang.String)[1];

        $r27 = r57.toString();

        $r26[0] = $r27;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r50, "ioerror", $r26);

        r0.setPerformingIO(0);

        return 0;

     label28:
        return z17;

     label29:
        r58 = r51._canonPath(r4, r50, r1);

        $z6 = org.gjt.sp.jedit.MiscUtilities.isURL(r58);

(11)    if $z6 != 0 goto label30;

(12)    r58_1 = org.gjt.sp.jedit.MiscUtilities.resolveSymlinks(r58);

     label30:
        r58_2 = Phi(r58 #11, r58_1 #12);

(13)    r59 = r51.getTwoStageSaveName(r58_2);

        $z7 = org.gjt.sp.jedit.jEdit.getBooleanProperty("twoStageSave");

(14)    if $z7 == 0 goto label37;

        if z14 == 0 goto label31;

(15)    if r59 != null goto label37;

     label31:
        $r11 = newarray (java.lang.Object)[1];

        $r11[0] = r50;

        i7 = org.gjt.sp.jedit.GUIUtilities.confirm(r1, "vfs.twostageimpossible", $r11, 0, 2);

        if i7 != 0 goto label32;

        org.gjt.sp.util.Log.log(7, r0, "Buffer saving : two stage save cannot be used");

        r0.setBooleanProperty("forbidTwoStageSave", 1);

(16)    goto label37;

     label32:
        org.gjt.sp.util.Log.log(1, r0, "Buffer not saved");

        r0.setPerformingIO(0);

        z18 = 0;

     label33:
        r51._endVFSSession(r4, r1);

     label34:
        goto label36;

     label35:
        $r41 := @caughtexception;

        r60 = $r41;

        $r42 = newarray (java.lang.String)[1];

        $r43 = r60.toString();

        $r42[0] = $r43;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r50, "ioerror", $r42);

        r0.setPerformingIO(0);

        return 0;

     label36:
        return z18;

     label37:
        r58_3 = Phi(r58 #3, r58 #10, r58_2 #14, r58_2 #15, r58_2 #16);

        $z13_3 = Phi($z13 #3, $z13_2 #10, $z13_2 #14, $z13_2 #15, $z13_2 #16);

        r53_3 = Phi(r53 #3, r53_2 #10, r53 #14, r53 #15, r53 #16);

(17)    r51._endVFSSession(r4, r1);

     label38:
        goto label50;

     label39:
        $r22 := @caughtexception;

        r58_4 = Phi(r58 #3, r58_2 #14, r58_3 #17);

        $z13_4 = Phi($z13 #3, $z13_2 #10, $z13_2 #14, $z13_3 #17);

        r53_4 = Phi(r53 #3, r53_2 #10, r53_3 #17);

        r61 = $r22;

        $r23 = newarray (java.lang.String)[1];

        $r24 = r61.toString();

        $r23[0] = $r24;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r50, "ioerror", $r23);

        r0.setPerformingIO(0);

        return 0;

     label40:
        $r31 := @caughtexception;

        r58_5 = Phi(r58 #2, r58_1 #12, r58_2 #13);

        $z13_5 = Phi($z13 #2, $z13_2 #6);

(18)    r53_5 = Phi(r53 #2, r53_1 #8, r53_2 #9);

        r62 = $r31;

        $r32 = newarray (java.lang.String)[1];

        $r33 = r62.toString();

        $r32[0] = $r33;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r50, "ioerror", $r32);

        r0.setPerformingIO(0);

        z19 = 0;

     label41:
        r51._endVFSSession(r4, r1);

     label42:
        goto label44;

     label43:
        $r38 := @caughtexception;

        r63 = $r38;

        $r39 = newarray (java.lang.String)[1];

        $r40 = r63.toString();

        $r39[0] = $r40;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r50, "ioerror", $r39);

        r0.setPerformingIO(0);

        return 0;

     label44:
        return z19;

     label45:
        $r37 := @caughtexception;

        r58 = Phi(r58 #2, r58_1 #12, r58_2 #13, r58_5 #18, r58 #19);

        $z13 = Phi($z13 #2, $z13_2 #6, $z13_1 #5, $z13_5 #18, $z13 #19);

        $r49 = Phi($r49_2 #2, $r49 #19);

(19)    r53 = Phi(r53 #2, r53_1 #8, r53_2 #9, r53_5 #18, r53 #19);

        r5 = $r37;

     label46:
        r51._endVFSSession(r4, r1);

     label47:
        goto label49;

     label48:
        $r34 := @caughtexception;

        r6 = $r34;

        $r35 = newarray (java.lang.String)[1];

        $r36 = r6.toString();

        $r35[0] = $r36;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r50, "ioerror", $r35);

        r0.setPerformingIO(0);

        return 0;

     label49:
        throw r5;

     label50:
        $z4 = r51.save(r1, r0, r50);

        if $z4 != 0 goto label51;

        r0.setPerformingIO(0);

        return 0;

     label51:
        $r10 = org.gjt.sp.util.AwtRunnableQueue.INSTANCE;

        $r9 = new org.gjt.sp.jedit.Buffer$2;

        specialinvoke $r9.<init>(r0, r1, r48, r3, r50, z0);

        $r10.runAfterIoTasks($r9);

        return 1;

        catch java.io.IOException from label13 to label14 with label15;
        catch java.io.IOException from label19 to label20 with label21;
        catch java.io.IOException from label25 to label26 with label27;
        catch java.io.IOException from label33 to label34 with label35;
        catch java.io.IOException from label37 to label38 with label39;
        catch java.io.IOException from label09 to label13 with label40;
        catch java.io.IOException from label17 to label19 with label40;
        catch java.io.IOException from label23 to label25 with label40;
        catch java.io.IOException from label29 to label33 with label40;
        catch java.io.IOException from label41 to label42 with label43;
        catch java.lang.Throwable from label09 to label13 with label45;
        catch java.lang.Throwable from label17 to label19 with label45;
        catch java.lang.Throwable from label23 to label25 with label45;
        catch java.lang.Throwable from label29 to label33 with label45;
        catch java.lang.Throwable from label40 to label41 with label45;
        catch java.io.IOException from label46 to label47 with label48;
        catch java.lang.Throwable from label45 to label46 with label45;
    }

    public int checkFileStatus(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        boolean z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, $z7_1, $z7_2, $z7_3;
        long l0, l1;
        java.io.File $r2, $r3, $r4, $r5, $r8;
        byte $b2;
        org.gjt.sp.jedit.msg.BufferUpdate $r6;
        java.lang.Object $r7;

        r0 := @this;

        r1 := @parameter0;

        $z1 = r0.isPerformingIO();

(0)     if $z1 != 0 goto label5;

        $r2 = r0.file;

(1)     if $r2 == null goto label5;

        $z2 = specialinvoke r0.getFlag(3);

(2)     if $z2 != 0 goto label5;

        $r3 = r0.file;

        Packer.Unpack(r0);

        $z3 = $r3.exists();

        Packer.Pack(r0);

        if $z3 == 0 goto label1;

        Packer.Unpack(r0);

        $r8 = r0.file;

        $z6 = $r8.canWrite();

        Packer.Pack(r0);

        if $z6 != 0 goto label1;

        $z7 = 1;

(3)     goto label2;

     label1:
(4)     $z7_1 = 0;

     label2:
        $z7_2 = Phi($z7 #3, $z7_1 #4);

        z0 = $z7_2;

        $z4 = r0.isFileReadOnly();

        if z0 == $z4 goto label3;

        r0.setFileReadOnly(z0);

        $r6 = new org.gjt.sp.jedit.msg.BufferUpdate;

        $r7 = org.gjt.sp.jedit.msg.BufferUpdate.DIRTY_CHANGED;

        specialinvoke $r6.<init>(r0, null, $r7);

        org.gjt.sp.jedit.EditBus.send($r6);

     label3:
        l0 = r0.modTime;

        $r4 = r0.file;

        Packer.Unpack(r0);

        l1 = $r4.lastModified();

        Packer.Pack(r0);

        $b2 = l1 cmp l0;

(5)     if $b2 == 0 goto label5;

        Packer.Unpack(r0);

        r0.modTime = l1;

        $r5 = r0.file;

        $z5 = $r5.exists();

        Packer.Pack(r0);

        if $z5 != 0 goto label4;

        specialinvoke r0.setFlag(3, 1);

        r0.setDirty(1);

        return 2;

     label4:
        return 1;

     label5:
        $z7_3 = Phi($z7 #0, $z7 #1, $z7 #2, $z7_2 #5);

        return 0;
    }

    public long getLastModified()
    {
        org.gjt.sp.jedit.Buffer r0;
        long $l0;

        r0 := @this;

        $l0 = r0.modTime;

        return $l0;
    }

    public void setLastModified(long)
    {
        org.gjt.sp.jedit.Buffer r0;
        long l0;

        r0 := @this;

        l0 := @parameter0;

        r0.modTime = l0;

        return;
    }

    public boolean getAutoReload()
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean $z0;

        r0 := @this;

        $z0 = specialinvoke r0.getFlag(6);

        return $z0;
    }

    public void setAutoReload(boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean z0, $z1;

        r0 := @this;

        z0 := @parameter0;

        specialinvoke r0.setFlag(6, z0);

        $z1 = specialinvoke r0.isAutoreloadPropertyOverriden();

        r0.autoreloadOverridden = $z1;

        return;
    }

    public boolean getAutoReloadDialog()
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean $z0;

        r0 := @this;

        $z0 = specialinvoke r0.getFlag(7);

        return $z0;
    }

    public void setAutoReloadDialog(boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean z0, $z1;

        r0 := @this;

        z0 := @parameter0;

        specialinvoke r0.setFlag(7, z0);

        $z1 = specialinvoke r0.isAutoreloadPropertyOverriden();

        r0.autoreloadOverridden = $z1;

        return;
    }

    public org.gjt.sp.jedit.io.VFS getVFS()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String $r1;
        org.gjt.sp.jedit.io.VFS $r2;

        r0 := @this;

        $r1 = r0.path;

        $r2 = org.gjt.sp.jedit.io.VFSManager.getVFSForPath($r1);

        return $r2;
    }

    public java.io.File getAutosaveFile()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.io.File $r1;

        r0 := @this;

        $r1 = r0.autosaveFile;

        return $r1;
    }

    public void removeAutosaveFile()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.io.File $r1, $r2;

        r0 := @this;

        $r1 = r0.autosaveFile;

        if $r1 == null goto label1;

        $r2 = r0.autosaveFile;

        Packer.Unpack(r0);

        $r2.delete();

        Packer.Pack(r0);

        specialinvoke r0.setFlag(5, 1);

     label1:
        return;
    }

    public java.lang.String getName()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 = r0.name;

        return $r1;
    }

    public java.lang.String getPath()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 = r0.path;

        return $r1;
    }

    public java.lang.String getPath(java.lang.Boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.Boolean r1;
        boolean $z0;
        java.lang.String $r2, $r3, $r3_1, $r3_2;

        r0 := @this;

        r1 := @parameter0;

        $z0 = r1.booleanValue();

        if $z0 == 0 goto label1;

        $r2 = r0.path;

        $r3 = org.gjt.sp.jedit.MiscUtilities.abbreviateView($r2);

(0)     goto label2;

     label1:
(1)     $r3_1 = r0.getPath();

     label2:
        $r3_2 = Phi($r3 #0, $r3_1 #1);

        return $r3_2;
    }

    public java.lang.String getSymlinkPath()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 = r0.symlinkPath;

        return $r1;
    }

    public java.lang.String getDirectory()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String $r1;

        r0 := @this;

        $r1 = r0.directory;

        return $r1;
    }

    public boolean isClosed()
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean $z0;

        r0 := @this;

        $z0 = specialinvoke r0.getFlag(0);

        return $z0;
    }

    public boolean isLoaded()
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean $z0, $z1, $z1_1, $z1_2;

        r0 := @this;

        $z0 = r0.isLoading();

        if $z0 != 0 goto label1;

        $z1 = 1;

(0)     goto label2;

     label1:
(1)     $z1_1 = 0;

     label2:
        $z1_2 = Phi($z1 #0, $z1_1 #1);

        return $z1_2;
    }

    public boolean isNewFile()
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean $z0;

        r0 := @this;

        $z0 = specialinvoke r0.getFlag(3);

        return $z0;
    }

    public void setNewFile(boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean z0;

        r0 := @this;

        z0 := @parameter0;

        specialinvoke r0.setFlag(3, z0);

        if z0 != 0 goto label1;

        specialinvoke r0.setFlag(4, 0);

     label1:
        return;
    }

    public boolean isUntitled()
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean $z0;

        r0 := @this;

        $z0 = specialinvoke r0.getFlag(4);

        return $z0;
    }

    public void setDirty(boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean z0, z1, $z2, $z4, $z5, $z6, z7, $z8, z7_1, z7_2, $z8_1, $z8_2, z7_3, z7_4, $z8_3;
        java.io.File $r1, $r4;
        org.gjt.sp.jedit.msg.BufferUpdate $r2;
        java.lang.Object $r3;
        int $i0, $i1;
        byte[] $r5, $r6;

        r0 := @this;

        z7 := @parameter0;

        z0 = r0.isDirty();

        $z2 = r0.isUntitled();

(0)     if $z2 == 0 goto label1;

        $z6 = org.gjt.sp.jedit.jEdit.getBooleanProperty("suppressNotSavedConfirmUntitled");

(1)     if $z6 == 0 goto label1;

(2)     z7_1 = 0;

     label1:
        z7_2 = Phi(z7 #0, z7 #1, z7_1 #2);

(3)     if z7_2 == 0 goto label4;

        $i0 = r0.getLength();

        $i1 = r0.initialLength;

(4)     if $i0 != $i1 goto label4;

        $z4 = org.gjt.sp.jedit.jEdit.getBooleanProperty("useMD5forDirtyCalculation");

(5)     if $z4 == 0 goto label4;

        $r5 = specialinvoke r0.calculateHash();

        $r6 = r0.md5hash;

        $z5 = java.util.Arrays.equals($r5, $r6);

        if $z5 != 0 goto label2;

        $z8 = 1;

(6)     goto label3;

     label2:
(7)     $z8_1 = 0;

     label3:
        $z8_2 = Phi($z8 #6, $z8_1 #7);

(8)     z7_3 = $z8_2;

     label4:
        z7_4 = Phi(z7_2 #3, z7_2 #4, z7_2 #5, z7_3 #8);

        $z8_3 = Phi($z8 #3, $z8 #4, $z8 #5, $z8_2 #8);

        specialinvoke r0.setDirty(z7_4);

        z1 = r0.isEditable();

        if z7_4 == 0 goto label5;

        if z1 == 0 goto label6;

        specialinvoke r0.setFlag(5, 1);

        goto label6;

     label5:
        specialinvoke r0.setFlag(5, 0);

        $r1 = r0.autosaveFile;

        if $r1 == null goto label6;

        $r4 = r0.autosaveFile;

        Packer.Unpack(r0);

        $r4.delete();

     label6:
        Packer.Pack(r0);

        if z7_4 == z0 goto label7;

        if z1 == 0 goto label7;

        $r2 = new org.gjt.sp.jedit.msg.BufferUpdate;

        $r3 = org.gjt.sp.jedit.msg.BufferUpdate.DIRTY_CHANGED;

        specialinvoke $r2.<init>(r0, null, $r3);

        org.gjt.sp.jedit.EditBus.send($r2);

     label7:
        return;
    }

    public boolean isTemporary()
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean $z0;

        r0 := @this;

        $z0 = specialinvoke r0.getFlag(10);

        return $z0;
    }

    public javax.swing.Icon getIcon()
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean $z0, $z1, $z2;
        javax.swing.Icon $r1, $r2, $r3, $r4;

        r0 := @this;

        $z0 = r0.isDirty();

        if $z0 == 0 goto label1;

        $r4 = org.gjt.sp.jedit.GUIUtilities.loadIcon("dirty.gif");

        return $r4;

     label1:
        $z1 = r0.isReadOnly();

        if $z1 == 0 goto label2;

        $r3 = org.gjt.sp.jedit.GUIUtilities.loadIcon("readonly.gif");

        return $r3;

     label2:
        $z2 = specialinvoke r0.getFlag(3);

        if $z2 == 0 goto label3;

        $r2 = org.gjt.sp.jedit.GUIUtilities.loadIcon("new.gif");

        return $r2;

     label3:
        $r1 = org.gjt.sp.jedit.GUIUtilities.loadIcon("normal.gif");

        return $r1;
    }

    public void propertiesChanged()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String r1, $r2, $r5;
        int $i0;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z6_1, $z6_2;
        org.gjt.sp.jedit.msg.BufferUpdate $r3;
        java.lang.Object $r4;

        r0 := @this;

        specialinvoke r0.propertiesChanged();

        $i0 = org.gjt.sp.jedit.jEdit.getIntegerProperty("longLineLimit", 4000);

        r0.longLineLimit = $i0;

        r1 = r0.getStringProperty("largefilemode");

        $r2 = "limited";

        $z0 = $r2.equals(r1);

        if $z0 != 0 goto label1;

        $r5 = "nohighlight";

        $z5 = $r5.equals(r1);

        if $z5 == 0 goto label2;

     label1:
        $z6_1 = 1;

(0)     goto label3;

     label2:
(1)     $z6 = 0;

     label3:
        $z6_2 = Phi($z6_1 #0, $z6 #1);

        r0.longBufferMode = $z6_2;

        $z1 = r0.autoreloadOverridden;

        if $z1 != 0 goto label4;

        $z3 = org.gjt.sp.jedit.jEdit.getBooleanProperty("autoReloadDialog");

        r0.setAutoReloadDialog($z3);

        $z4 = org.gjt.sp.jedit.jEdit.getBooleanProperty("autoReload");

        r0.setAutoReload($z4);

     label4:
        $z2 = r0.isTemporary();

        if $z2 != 0 goto label5;

        $r3 = new org.gjt.sp.jedit.msg.BufferUpdate;

        $r4 = org.gjt.sp.jedit.msg.BufferUpdate.PROPERTIES_CHANGED;

        specialinvoke $r3.<init>(r0, null, $r4);

        org.gjt.sp.jedit.EditBus.send($r3);

     label5:
        return;
    }

    public java.lang.Object getDefaultProperty(java.lang.String)
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String r1, r2, $r8;
        java.lang.NumberFormatException r3, $r11;
        org.gjt.sp.jedit.Mode $r4, $r10;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.Integer $r9;
        java.lang.Object r12;
        java.lang.Comparable r13, r13_1, r13_2;

        r0 := @this;

        r1 := @parameter0;

        $r4 = r0.mode;

        if $r4 == null goto label2;

        $r10 = r0.mode;

        r12 = $r10.getProperty(r1);

        if r12 != null goto label1;

        return null;

     label1:
        r0.setDefaultProperty(r1, r12);

        return r12;

     label2:
        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<init>();

        $r6 = $r5.append("buffer.");

        $r7 = $r6.append(r1);

        $r8 = $r7.toString();

        r2 = org.gjt.sp.jedit.jEdit.getProperty($r8);

        if r2 != null goto label3;

        return null;

     label3:
        $r9 = new java.lang.Integer;

        specialinvoke $r9.<init>(r2);

        r13 = $r9;

     label4:
(0)     goto label6;

     label5:
        $r11 := @caughtexception;

        r3 = $r11;

(1)     r13_1 = r2;

     label6:
        r13_2 = Phi(r13 #0, r13_1 #1);

        return r13_2;

        catch java.lang.NumberFormatException from label3 to label4 with label5;
    }

    public void toggleWordWrap(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        java.lang.String r2, $r5, $r6, $r7, r8, r8_1, r8_2, r8_3, r8_4, r8_5, r8_6;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.gjt.sp.jedit.gui.StatusBar $r3;
        java.lang.String[] $r4;

        r0 := @this;

        r1 := @parameter0;

        r8 = r0.getStringProperty("wrap");

        $z0 = r8.equals("none");

        if $z0 == 0 goto label4;

        r2 = r0.getStringProperty("largefilemode");

        $r6 = "limited";

        $z3 = $r6.equals(r2);

        if $z3 != 0 goto label1;

        $r7 = "nohighlight";

        $z4 = $r7.equals(r2);

        if $z4 == 0 goto label2;

     label1:
        r8_2 = "hard";

(0)     goto label3;

     label2:
(1)     r8_1 = "soft";

     label3:
        r8_3 = Phi(r8_2 #0, r8_1 #1);

(2)     goto label6;

     label4:
        $z1 = r8.equals("soft");

        if $z1 == 0 goto label5;

        r8_4 = "hard";

(3)     goto label6;

     label5:
        $z2 = r8.equals("hard");

(4)     if $z2 == 0 goto label6;

(5)     r8_5 = "none";

     label6:
        r8_6 = Phi(r8_3 #2, r8_4 #3, r8 #4, r8_5 #5);

        $r3 = r1.getStatus();

        $r4 = newarray (java.lang.String)[1];

        $r4[0] = r8_6;

        $r5 = org.gjt.sp.jedit.jEdit.getProperty("view.status.wrap-changed", $r4);

        $r3.setMessageAndClear($r5);

        r0.setProperty("wrap", r8_6);

        r0.propertiesChanged();

        return;
    }

    public void toggleAutoIndent(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        boolean $z0, $z1, $z2;
        org.gjt.sp.jedit.gui.StatusBar $r2;
        java.lang.String[] $r3;
        java.lang.String $r4, r5, r5_1, r5_2, r5_3, r5_4;

        r0 := @this;

        r1 := @parameter0;

        r5 = r0.getStringProperty("autoIndent");

        $z0 = r5.equals("none");

        if $z0 == 0 goto label1;

        r5_1 = "simple";

(0)     goto label3;

     label1:
        $z1 = r5.equals("simple");

        if $z1 == 0 goto label2;

        r5_2 = "full";

(1)     goto label3;

     label2:
        $z2 = r5.equals("full");

(2)     if $z2 == 0 goto label3;

(3)     r5_3 = "none";

     label3:
        r5_4 = Phi(r5_1 #0, r5_2 #1, r5 #2, r5_3 #3);

        r0.setProperty("autoIndent", r5_4);

        $r2 = r1.getStatus();

        $r3 = newarray (java.lang.String)[1];

        $r3[0] = r5_4;

        $r4 = org.gjt.sp.jedit.jEdit.getProperty("view.status.autoindent-changed", $r3);

        $r2.setMessageAndClear($r4);

        return;
    }

    public void toggleLineSeparator(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        java.lang.String $r2, $r3, $r4, $r10, $r11, $r12, r13, r14, r13_1, r14_1, r13_2, r14_2, r13_3, r14_3, r13_4, r14_4;
        boolean $z0, $z1, $z2;
        org.gjt.sp.jedit.gui.StatusBar $r5;
        java.lang.String[] $r6;
        java.lang.StringBuilder $r7, $r8, $r9;

        r0 := @this;

        r1 := @parameter0;

        r13 = null;

        r14 = r0.getStringProperty("lineSeparator");

        $r2 = "\n";

        $z0 = $r2.equals(r14);

        if $z0 == 0 goto label1;

        r13_1 = "windows";

        r14_1 = "\r\n";

(0)     goto label3;

     label1:
        $r3 = "\r\n";

        $z1 = $r3.equals(r14);

        if $z1 == 0 goto label2;

        r13_2 = "mac";

        r14_2 = "\r";

(1)     goto label3;

     label2:
        $r4 = "\r";

        $z2 = $r4.equals(r14);

(2)     if $z2 == 0 goto label3;

        r13_3 = "unix";

(3)     r14_3 = "\n";

     label3:
        r13_4 = Phi(r13_1 #0, r13_2 #1, r13 #2, r13_3 #3);

        r14_4 = Phi(r14_1 #0, r14_2 #1, r14 #2, r14_3 #3);

        $r5 = r1.getStatus();

        $r6 = newarray (java.lang.String)[1];

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<init>();

        $r8 = $r7.append("lineSep.");

        $r9 = $r8.append(r13_4);

        $r10 = $r9.toString();

        $r11 = org.gjt.sp.jedit.jEdit.getProperty($r10);

        $r6[0] = $r11;

        $r12 = org.gjt.sp.jedit.jEdit.getProperty("view.status.linesep-changed", $r6);

        $r5.setMessageAndClear($r12);

        r0.setProperty("lineSeparator", r14_4);

        r0.setDirty(1);

        r0.propertiesChanged();

        return;
    }

    public java.lang.String getContextSensitiveProperty(int, java.lang.String)
    {
        org.gjt.sp.jedit.Buffer r0;
        int i0;
        java.lang.String r1, $r3, $r4;
        org.gjt.sp.jedit.syntax.ParserRuleSet r2;
        org.gjt.sp.jedit.Mode $r5, $r6;
        java.lang.Object r7, r7_1, r7_2, r7_3;

        r0 := @this;

        i0 := @parameter0;

        r1 := @parameter1;

        r7 = specialinvoke r0.getContextSensitiveProperty(i0, r1);

(0)     if r7 != null goto label1;

        r2 = r0.getRuleSetAtOffset(i0);

        $r4 = r2.getModeName();

        $r5 = org.gjt.sp.jedit.jEdit.getMode($r4);

        r7_1 = $r5.getProperty(r1);

(1)     if r7_1 != null goto label1;

        $r6 = r0.mode;

(2)     r7_2 = $r6.getProperty(r1);

     label1:
        r7_3 = Phi(r7 #0, r7_1 #1, r7_2 #2);

        if r7_3 != null goto label2;

        return null;

     label2:
        $r3 = java.lang.String.valueOf(r7_3);

        return $r3;
    }

    public void setMode()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String r1, r2, $r4, $r5, $r6, $r7, $r9, $r12, $r13, $r15, $r16, $r17, $r18, $r21, $r22, r25;
        boolean z0, $z1, $z2, $z3, $z4, $z5;
        javax.swing.JTextPane r3, $r8;
        int i0, $i1, i2;
        org.gjt.sp.jedit.View $r10;
        java.lang.String[] $r11, $r14;
        org.gjt.sp.jedit.syntax.ModeProvider $r19, $r23;
        org.gjt.sp.jedit.io.VFS $r20;
        org.gjt.sp.jedit.Mode r24, r26, r27, r24_1, r24_2, r24_3, r24_4, r24_5, r24_6;

        r0 := @this;

        r24 = null;

        r1 = r0.getStringProperty("mode");

(0)     if r1 == null goto label01;

        r0.unsetProperty("mode");

        $r23 = org.gjt.sp.jedit.syntax.ModeProvider.instance;

(1)     r24_1 = $r23.getMode(r1);

     label01:
        r24_2 = Phi(r24 #0, r24_1 #1);

(2)     if r24_2 != null goto label02;

        r25 = r0.getLineText(0);

        $r19 = org.gjt.sp.jedit.syntax.ModeProvider.instance;

        $r20 = r0.getVFS();

        $r21 = r0.path;

        $r22 = $r20.getFilePath($r21);

(3)     r24_3 = $r19.getModeForFile($r22, null, r25);

     label02:
        r24_4 = Phi(r24_2 #2, r24_3 #3);

        if r24_4 == null goto label11;

        i2 = org.gjt.sp.jedit.jEdit.getIntegerProperty("largeBufferSize", 4000000);

        $z1 = specialinvoke r0.getFlag(10);

(4)     if $z1 != 0 goto label10;

        $i1 = r0.getLength();

(5)     if $i1 <= i2 goto label10;

(6)     if i2 <= 0 goto label10;

        r24_4.loadIfNecessary();

        z0 = r24_4.getBooleanProperty("contextInsensitive");

        r2 = org.gjt.sp.jedit.jEdit.getProperty("largefilemode", "ask");

        $r4 = "ask";

        $z2 = $r4.equals(r2);

        if $z2 == 0 goto label07;

(7)     if z0 != 0 goto label10;

        $r8 = new javax.swing.JTextPane;

        specialinvoke $r8.<init>();

        r3 = $r8;

        r3.setEditable(0);

        $r9 = org.gjt.sp.jedit.jEdit.getProperty("largeBufferDialog.message");

        r3.setText($r9);

        $r10 = org.gjt.sp.jedit.jEdit.getActiveView();

        $r11 = newarray (java.lang.String)[1];

        $r12 = r0.name;

        $r11[0] = $r12;

        $r13 = org.gjt.sp.jedit.jEdit.getProperty("largeBufferDialog.title", $r11);

        $r14 = newarray (java.lang.String)[3];

        $r15 = org.gjt.sp.jedit.jEdit.getProperty("largeBufferDialog.fullSyntax");

        $r14[0] = $r15;

        $r16 = org.gjt.sp.jedit.jEdit.getProperty("largeBufferDialog.contextInsensitive");

        $r14[1] = $r16;

        $r17 = org.gjt.sp.jedit.jEdit.getProperty("largeBufferDialog.defaultMode");

        $r14[2] = $r17;

        $r18 = org.gjt.sp.jedit.jEdit.getProperty("largeBufferDialog.contextInsensitive");

        i0 = javax.swing.JOptionPane.showOptionDialog($r10, r3, $r13, -1, 2, null, $r14, $r18);

        tableswitch(i0)
        {
            case 0: goto label03;
            case 1: goto label04;
            case 2: goto label05;
            default: goto label06;
        };

     label03:
        r0.setProperty("largefilemode", "full");

        r0.setMode(r24_4);

        return;

     label04:
        r0.setProperty("largefilemode", "limited");

        r0.setMode(r24_4, 1);

        return;

     label05:
        r0.setProperty("largefilemode", "nohighlight");

        r26 = org.gjt.sp.jedit.Buffer.getDefaultMode();

        r0.setMode(r26);

        return;

     label06:
(8)     goto label10;

     label07:
        $r5 = "full";

        $z3 = $r5.equals(r2);

        if $z3 == 0 goto label08;

        r0.setProperty("largefilemode", "full");

        r0.setMode(r24_4);

(9)     goto label10;

     label08:
        $r6 = "limited";

        $z4 = $r6.equals(r2);

        if $z4 == 0 goto label09;

        r0.setProperty("largefilemode", "limited");

        r0.setMode(r24_4, 1);

(10)    goto label10;

     label09:
        $r7 = "nohighlight";

        $z5 = $r7.equals(r2);

(11)    if $z5 == 0 goto label10;

        r0.setProperty("largefilemode", "nohighlight");

        r24_5 = org.gjt.sp.jedit.Buffer.getDefaultMode();

(12)    r0.setMode(r24_5);

     label10:
        r24_6 = Phi(r24_4 #4, r24_4 #5, r24_4 #6, r24_4 #7, r24_4 #8, r24_4 #9, r24_4 #10, r24_4 #11, r24_5 #12);

        r0.setMode(r24_6);

        return;

     label11:
        r27 = org.gjt.sp.jedit.Buffer.getDefaultMode();

        if r27 == null goto label12;

        r0.setMode(r27);

     label12:
        return;
    }

    private static org.gjt.sp.jedit.Mode getDefaultMode()
    {
        java.lang.String $r0;
        org.gjt.sp.jedit.Mode r1, r1_1, r1_2;

        $r0 = org.gjt.sp.jedit.jEdit.getProperty("buffer.defaultMode");

        r1 = org.gjt.sp.jedit.jEdit.getMode($r0);

(0)     if r1 != null goto label1;

(1)     r1_1 = org.gjt.sp.jedit.jEdit.getMode("text");

     label1:
        r1_2 = Phi(r1 #0, r1_1 #1);

        return r1_2;
    }

    public java.io.File getFile()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.io.File $r1;

        r0 := @this;

        $r1 = r0.file;

        return $r1;
    }

    public java.util.Vector getMarkers()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.util.Vector $r1;

        r0 := @this;

        $r1 = r0.markers;

        return $r1;
    }

    public java.lang.String getMarkerStatusPrompt(java.lang.String)
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String r1, $r5, $r7, $r8;
        java.lang.StringBuilder $r2, $r3, $r4;
        java.lang.String[] $r6;

        r0 := @this;

        r1 := @parameter0;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<init>();

        $r3 = $r2.append("view.status.");

        $r4 = $r3.append(r1);

        $r5 = $r4.toString();

        $r6 = newarray (java.lang.String)[1];

        $r7 = r0.getMarkerNameString();

        $r6[0] = $r7;

        $r8 = org.gjt.sp.jedit.jEdit.getProperty($r5, $r6);

        return $r8;
    }

    public java.lang.String getMarkerNameString()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.StringBuilder r1, $r4;
        java.util.Iterator r2;
        org.gjt.sp.jedit.Marker r3;
        java.util.Vector $r5;
        boolean $z0;
        int $i0, $i2;
        java.lang.String $r6, $r7;
        java.lang.Object $r8;
        char $c1, $c3;

        r0 := @this;

        $r4 = new java.lang.StringBuilder;

        specialinvoke $r4.<init>();

        r1 = $r4;

        $r5 = r0.markers;

        r2 = $r5.iterator();

     label1:
        $z0 = r2.hasNext();

        if $z0 == 0 goto label4;

        $r8 = r2.next();

        r3 = (org.gjt.sp.jedit.Marker) $r8;

        $c1 = r3.getShortcut();

        if $c1 == 0 goto label3;

        $i2 = r1.length();

        if $i2 == 0 goto label2;

        r1.append(32);

     label2:
        $c3 = r3.getShortcut();

        r1.append($c3);

     label3:
        goto label1;

     label4:
        $i0 = r1.length();

        if $i0 != 0 goto label5;

        $r7 = org.gjt.sp.jedit.jEdit.getProperty("view.status.no-markers");

        return $r7;

     label5:
        $r6 = r1.toString();

        return $r6;
    }

    public void addOrRemoveMarker(char, int)
    {
        org.gjt.sp.jedit.Buffer r0;
        char c0;
        int i1, i2;
        org.gjt.sp.jedit.Marker $r1;

        r0 := @this;

        c0 := @parameter0;

        i1 := @parameter1;

        i2 = r0.getLineOfOffset(i1);

        $r1 = r0.getMarkerAtLine(i2);

        if $r1 == null goto label1;

        r0.removeMarker(i2);

        goto label2;

     label1:
        r0.addMarker(c0, i1);

     label2:
        return;
    }

    public void addMarker(char, int)
    {
        org.gjt.sp.jedit.Buffer r0;
        char c0, $c6;
        int i1, $i2, $i3, $i4, $i5, i7, i8;
        org.gjt.sp.jedit.Marker r1, $r2, r14, r15;
        boolean $z0, $z1, $z2, z3;
        org.gjt.sp.jedit.msg.BufferUpdate $r3;
        java.lang.Object $r4, $r9, $r12;
        java.util.Vector $r5, $r6, $r7, $r8, $r10, $r11, $r13;

        r0 := @this;

        c0 := @parameter0;

        i1 := @parameter1;

        $r2 = new org.gjt.sp.jedit.Marker;

        specialinvoke $r2.<init>(r0, c0, i1);

        r1 = $r2;

        z3 = 0;

        $z0 = r0.isLoaded();

(0)     if $z0 == 0 goto label7;

        specialinvoke r0.setFlag(12, 1);

        r1.createPosition();

(1)     i7 = 0;

     label1:
        z3 = Phi(z3 #1, z3 #4);

        i7 = Phi(i7 #1, i7 #4);

        $r6 = r0.markers;

        $i2 = $r6.size();

        if i7 >= $i2 goto label4;

        $r11 = r0.markers;

        $r12 = $r11.get(i7);

        r14 = (org.gjt.sp.jedit.Marker) $r12;

        if c0 == 0 goto label2;

        $c6 = r14.getShortcut();

        if $c6 != c0 goto label2;

        r14.setShortcut(0);

     label2:
        $i5 = r14.getPosition();

(2)     if $i5 != i1 goto label3;

        $r13 = r0.markers;

        $r13.removeElementAt(i7);

(3)     i7 = i7 + -1;

     label3:
        i7 = Phi(i7 #2, i7 #3);

        i7 = i7 + 1;

(4)     goto label1;

     label4:
(5)     i8 = 0;

     label5:
        i8 = Phi(i8 #5, i8 #8);

        z3 = Phi(z3 #5, z3 #8);

        i7 = Phi(i7 #5, i7 #8);

        $r7 = r0.markers;

        $i3 = $r7.size();

(6)     if i8 >= $i3 goto label7;

        $r8 = r0.markers;

        $r9 = $r8.get(i8);

        r15 = (org.gjt.sp.jedit.Marker) $r9;

        $i4 = r15.getPosition();

        if $i4 <= i1 goto label6;

        $r10 = r0.markers;

        $r10.insertElementAt(r1, i8);

        z3 = 1;

(7)     goto label7;

     label6:
        i8 = i8 + 1;

(8)     goto label5;

     label7:
        i8 = Phi(i8 #0, i8 #6, i8 #7);

        z3 = Phi(z3 #0, z3 #6, z3 #7);

        i7 = Phi(i7 #0, i7 #6, i7 #7);

        if z3 != 0 goto label8;

        $r5 = r0.markers;

        $r5.addElement(r1);

     label8:
        $z1 = r0.isLoaded();

        if $z1 == 0 goto label9;

        $z2 = specialinvoke r0.getFlag(10);

        if $z2 != 0 goto label9;

        $r3 = new org.gjt.sp.jedit.msg.BufferUpdate;

        $r4 = org.gjt.sp.jedit.msg.BufferUpdate.MARKERS_CHANGED;

        specialinvoke $r3.<init>(r0, null, $r4);

        org.gjt.sp.jedit.EditBus.send($r3);

     label9:
        return;
    }

    public org.gjt.sp.jedit.Marker getMarkerInRange(int, int)
    {
        org.gjt.sp.jedit.Buffer r0;
        int i0, i1, i2;
        java.util.Iterator r1;
        org.gjt.sp.jedit.Marker r2;
        java.util.Vector $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this;

        i0 := @parameter0;

        i1 := @parameter1;

        $r3 = r0.markers;

        r1 = $r3.iterator();

     label1:
        $z0 = r1.hasNext();

        if $z0 == 0 goto label3;

        $r4 = r1.next();

        r2 = (org.gjt.sp.jedit.Marker) $r4;

        i2 = r2.getPosition();

        if i2 < i0 goto label2;

        if i2 >= i1 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public org.gjt.sp.jedit.Marker getMarkerAtLine(int)
    {
        org.gjt.sp.jedit.Buffer r0;
        int i0, $i1, $i2;
        java.util.Iterator r1;
        org.gjt.sp.jedit.Marker r2;
        java.util.Vector $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this;

        i0 := @parameter0;

        $r3 = r0.markers;

        r1 = $r3.iterator();

     label1:
        $z0 = r1.hasNext();

        if $z0 == 0 goto label3;

        $r4 = r1.next();

        r2 = (org.gjt.sp.jedit.Marker) $r4;

        $i1 = r2.getPosition();

        $i2 = r0.getLineOfOffset($i1);

        if $i2 != i0 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public void removeMarker(int)
    {
        org.gjt.sp.jedit.Buffer r0;
        int i0, $i1, $i2, $i3, i4;
        org.gjt.sp.jedit.Marker r1;
        java.util.Vector $r2, $r5, $r7;
        org.gjt.sp.jedit.msg.BufferUpdate $r3;
        java.lang.Object $r4, $r6;

        r0 := @this;

        i0 := @parameter0;

(0)     i4 = 0;

     label1:
        i4 = Phi(i4 #0, i4 #3);

        $r2 = r0.markers;

        $i1 = $r2.size();

        if i4 >= $i1 goto label3;

        $r5 = r0.markers;

        $r6 = $r5.get(i4);

        r1 = (org.gjt.sp.jedit.Marker) $r6;

        $i2 = r1.getPosition();

        $i3 = r0.getLineOfOffset($i2);

(1)     if $i3 != i0 goto label2;

        specialinvoke r0.setFlag(12, 1);

        r1.removePosition();

        $r7 = r0.markers;

        $r7.removeElementAt(i4);

(2)     i4 = i4 + -1;

     label2:
        i4 = Phi(i4 #1, i4 #2);

        i4 = i4 + 1;

(3)     goto label1;

     label3:
        $r3 = new org.gjt.sp.jedit.msg.BufferUpdate;

        $r4 = org.gjt.sp.jedit.msg.BufferUpdate.MARKERS_CHANGED;

        specialinvoke $r3.<init>(r0, null, $r4);

        org.gjt.sp.jedit.EditBus.send($r3);

        return;
    }

    public void removeAllMarkers()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.util.Iterator r1;
        org.gjt.sp.jedit.Marker r2;
        java.util.Vector $r3, $r4;
        boolean $z0, $z1;
        org.gjt.sp.jedit.msg.BufferUpdate $r5;
        java.lang.Object $r6, $r7;

        r0 := @this;

        specialinvoke r0.setFlag(12, 1);

        $r3 = r0.markers;

        r1 = $r3.iterator();

     label1:
        $z0 = r1.hasNext();

        if $z0 == 0 goto label2;

        $r7 = r1.next();

        r2 = (org.gjt.sp.jedit.Marker) $r7;

        r2.removePosition();

        goto label1;

     label2:
        $r4 = r0.markers;

        $r4.removeAllElements();

        $z1 = r0.isLoaded();

        if $z1 == 0 goto label3;

        $r5 = new org.gjt.sp.jedit.msg.BufferUpdate;

        $r6 = org.gjt.sp.jedit.msg.BufferUpdate.MARKERS_CHANGED;

        specialinvoke $r5.<init>(r0, null, $r6);

        org.gjt.sp.jedit.EditBus.send($r5);

     label3:
        return;
    }

    public org.gjt.sp.jedit.Marker getMarker(char)
    {
        org.gjt.sp.jedit.Buffer r0;
        char c0, $c1;
        java.util.Iterator r1;
        org.gjt.sp.jedit.Marker r2;
        java.util.Vector $r3;
        boolean $z0;
        java.lang.Object $r4;

        r0 := @this;

        c0 := @parameter0;

        $r3 = r0.markers;

        r1 = $r3.iterator();

     label1:
        $z0 = r1.hasNext();

        if $z0 == 0 goto label3;

        $r4 = r1.next();

        r2 = (org.gjt.sp.jedit.Marker) $r4;

        $c1 = r2.getShortcut();

        if $c1 != c0 goto label2;

        return r2;

     label2:
        goto label1;

     label3:
        return null;
    }

    public static java.lang.String getMarkersPath(org.gjt.sp.jedit.io.VFS, java.lang.String)
    {
        org.gjt.sp.jedit.io.VFS r0;
        java.lang.String r1, $r3, $r6, $r9;
        java.lang.StringBuilder $r2, $r4, $r5, $r7, $r8;

        r0 := @parameter0;

        r1 := @parameter1;

        $r2 = new java.lang.StringBuilder;

        specialinvoke $r2.<init>();

        $r3 = r0.getParentOfPath(r1);

        $r4 = $r2.append($r3);

        $r5 = $r4.append(46);

        $r6 = r0.getFileName(r1);

        $r7 = $r5.append($r6);

        $r8 = $r7.append(".marks");

        $r9 = $r8.toString();

        return $r9;
    }

    public boolean updateMarkersFile(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        org.gjt.sp.jedit.io.VFS r2;
        java.lang.Object r3;
        boolean $z0, $z1;
        java.lang.String $r4, $r6, $r7, $r9;
        int $i0, $i1;
        java.lang.String[] $r5;
        org.gjt.sp.jedit.bufferio.MarkersSaveRequest $r8;

        r0 := @this;

        r1 := @parameter0;

        $z0 = r0.markersChanged();

        if $z0 != 0 goto label1;

        return 1;

     label1:
        $r4 = r0.getPath();

        r2 = org.gjt.sp.jedit.io.VFSManager.getVFSForPath($r4);

        $i0 = r2.getCapabilities();

        $i1 = $i0 & 2;

        if $i1 == 0 goto label2;

        $z1 = r2.isMarkersFileSupported();

        if $z1 != 0 goto label3;

     label2:
        $r6 = r0.path;

        $r5 = newarray (java.lang.String)[1];

        $r5[0] = "markers file";

        org.gjt.sp.jedit.io.VFSManager.error(r1, $r6, "vfs.not-supported.save", $r5);

        return 0;

     label3:
        $r7 = r0.path;

        r3 = r2.createVFSSession($r7, r1);

        if r3 != null goto label4;

        return 0;

     label4:
        $r8 = new org.gjt.sp.jedit.bufferio.MarkersSaveRequest;

        $r9 = r0.path;

        specialinvoke $r8.<init>(r1, r0, r3, r2, $r9);

        org.gjt.sp.util.ThreadUtilities.runInBackground($r8);

        return 1;
    }

    public boolean markersChanged()
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean $z0;

        r0 := @this;

        $z0 = specialinvoke r0.getFlag(12);

        return $z0;
    }

    public void setMarkersChanged(boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean z0;

        r0 := @this;

        z0 := @parameter0;

        specialinvoke r0.setFlag(12, z0);

        return;
    }

    public void setWaitSocket(java.net.Socket)
    {
        org.gjt.sp.jedit.Buffer r0;
        java.net.Socket r1;

        r0 := @this;

        r1 := @parameter0;

        Packer.Unpack(r0);

        r0.waitSocket = r1;

        Packer.Pack(r0);

        return;
    }

    public org.gjt.sp.jedit.Buffer getNext()
    {
        org.gjt.sp.jedit.Buffer r0, $r1;

        r0 := @this;

        $r1 = r0.next;

        return $r1;
    }

    public org.gjt.sp.jedit.Buffer getPrev()
    {
        org.gjt.sp.jedit.Buffer r0, $r1;

        r0 := @this;

        $r1 = r0.prev;

        return $r1;
    }

    public int getIndex()
    {
        org.gjt.sp.jedit.Buffer r0, r1;
        int i0;

        r0 := @this;

        i0 = 0;

(0)     r1 = r0.prev;

     label1:
        i0 = Phi(i0 #0, i0 #1);

        r1 = Phi(r1 #0, r1 #1);

        if r1 != null goto label2;

        goto label3;

     label2:
        i0 = i0 + 1;

        r1 = r1.prev;

(1)     goto label1;

     label3:
        return i0;
    }

    public java.lang.String toString()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.StringBuilder $r1, $r3, $r4, $r7, $r8;
        java.lang.String $r2, $r5, $r6, $r9;

        r0 := @this;

        $r1 = new java.lang.StringBuilder;

        specialinvoke $r1.<init>();

        $r2 = r0.name;

        $r3 = $r1.append($r2);

        $r4 = $r3.append(" (");

        $r5 = r0.directory;

        $r6 = org.gjt.sp.jedit.MiscUtilities.abbreviateView($r5);

        $r7 = $r4.append($r6);

        $r8 = $r7.append(41);

        $r9 = $r8.toString();

        return $r9;
    }

    public void addBufferUndoListener(org.gjt.sp.jedit.buffer.BufferUndoListener)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.buffer.BufferUndoListener r1;
        java.util.List $r2;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.undoListeners;

        Packer.Unpack(r0);

        $r2.add(r1);

        Packer.Pack(r0);

        return;
    }

    public void removeBufferUndoListener(org.gjt.sp.jedit.buffer.BufferUndoListener)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.buffer.BufferUndoListener r1;
        java.util.List $r2;

        r0 := @this;

        r1 := @parameter0;

        $r2 = r0.undoListeners;

        Packer.Unpack(r0);

        $r2.remove(r1);

        Packer.Pack(r0);

        return;
    }

    void <init>(java.lang.String, boolean, boolean, java.util.Map)
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String r1;
        boolean z0, z1, $z2, $z3;
        java.util.Map r2;
        org.gjt.sp.jedit.Mode $r3;
        org.gjt.sp.jedit.syntax.TokenMarker $r4;
        java.util.Vector $r5, $r6;

        r0 := @this;

        r1 := @parameter0;

        z0 := @parameter1;

        z1 := @parameter2;

        r2 := @parameter3;

        specialinvoke r0.<init>(r2);

        $r3 = org.gjt.sp.jedit.jEdit.getMode("text");

        $r4 = $r3.getTokenMarker();

        Packer.Unpack(r0);

        r0.textTokenMarker = $r4;

        Packer.Pack(r0);

        $r5 = new java.util.Vector;

        specialinvoke $r5.<init>();

        r0.markers = $r5;

        specialinvoke r0.setFlag(10, z1);

        specialinvoke r0.setPath(r1);

        specialinvoke r0.setFlag(4, z0);

        specialinvoke r0.setFlag(3, z0);

        $z2 = org.gjt.sp.jedit.jEdit.getBooleanProperty("autoReload");

        specialinvoke r0.setFlag(6, $z2);

        $z3 = org.gjt.sp.jedit.jEdit.getBooleanProperty("autoReloadDialog");

        specialinvoke r0.setFlag(7, $z3);

        $r6 = new java.util.Vector;

        Packer.Unpack(r0);

        specialinvoke $r6.<init>();

        r0.undoListeners = $r6;

        Packer.Pack(r0);

        return;
    }

    void commitTemporary()
    {
        org.gjt.sp.jedit.Buffer r0;

        r0 := @this;

        specialinvoke r0.setFlag(10, 0);

        specialinvoke r0.finishLoading();

        return;
    }

    void close()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.io.IOException r1, $r14;
        java.io.File $r2, $r13;
        java.net.Socket $r3, $r4, $r6, $r8, $r10, $r12;
        java.io.OutputStream $r5, $r7, $r11;
        java.io.InputStream $r9;

        r0 := @this;

        specialinvoke r0.setFlag(0, 1);

        $r2 = r0.autosaveFile;

        if $r2 == null goto label1;

        $r13 = r0.autosaveFile;

        Packer.Unpack(r0);

        $r13.delete();

     label1:
        Packer.Pack(r0);

        $r3 = r0.waitSocket;

        if $r3 == null goto label5;

     label2:
        Packer.Unpack(r0);

        $r4 = r0.waitSocket;

        $r5 = $r4.getOutputStream();

        $r5.write(0);

        $r6 = r0.waitSocket;

        $r7 = $r6.getOutputStream();

        $r7.flush();

        $r8 = r0.waitSocket;

        $r9 = $r8.getInputStream();

        $r9.close();

        $r10 = r0.waitSocket;

        $r11 = $r10.getOutputStream();

        $r11.close();

        $r12 = r0.waitSocket;

        $r12.close();

     label3:
        Packer.Pack(r0);

        goto label5;

     label4:
        $r14 := @caughtexception;

        r1 = $r14;

     label5:
        return;

        catch java.io.IOException from label2 to label3 with label4;
    }

    protected org.gjt.sp.jedit.syntax.TokenMarker$LineContext markTokens(javax.swing.text.Segment, org.gjt.sp.jedit.syntax.TokenMarker$LineContext, org.gjt.sp.jedit.syntax.TokenHandler)
    {
        org.gjt.sp.jedit.Buffer r0;
        javax.swing.text.Segment r1;
        org.gjt.sp.jedit.syntax.TokenMarker$LineContext r2, r6, r6_1, r6_2;
        org.gjt.sp.jedit.syntax.TokenHandler r3;
        boolean $z0;
        org.gjt.sp.jedit.syntax.TokenMarker $r4, $r5;
        int $i0, $i1, $i2;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        $z0 = r0.longBufferMode;

        if $z0 == 0 goto label1;

        $i0 = r0.longLineLimit;

        if $i0 == 0 goto label1;

        $i1 = r0.longLineLimit;

        $i2 = r1.length();

        if $i1 >= $i2 goto label1;

        $r5 = r0.textTokenMarker;

        Packer.Unpack(r0);

        r6 = $r5.markTokens(r2, r3, r1);

        Packer.Pack(r0);

(0)     goto label2;

     label1:
        $r4 = r0.tokenMarker;

(1)     r6_1 = $r4.markTokens(r2, r3, r1);

     label2:
        r6_2 = Phi(r6 #0, r6_1 #1);

        return r6_2;
    }

    protected void fireBeginUndo()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.util.Iterator r1;
        org.gjt.sp.jedit.buffer.BufferUndoListener r2;
        java.lang.Throwable r3, $r6;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this;

        $r4 = r0.undoListeners;

        Packer.Unpack(r0);

        r1 = $r4.iterator();

     label1:
        Packer.Pack(r0);

        $z0 = r1.hasNext();

        if $z0 == 0 goto label6;

        $r5 = r1.next();

        r2 = (org.gjt.sp.jedit.buffer.BufferUndoListener) $r5;

     label2:
        r2.beginUndo(r0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<init>();

        $r8 = $r7.append("Exception while sending buffer undo event to ");

        $r9 = $r8.append(r2);

        $r10 = $r9.append(" :");

        $r11 = $r10.toString();

        org.gjt.sp.util.Log.log(9, r0, $r11);

        org.gjt.sp.util.Log.log(9, r0, r3);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    protected void fireEndUndo()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.util.Iterator r1;
        org.gjt.sp.jedit.buffer.BufferUndoListener r2;
        java.lang.Throwable r3, $r6;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this;

        $r4 = r0.undoListeners;

        Packer.Unpack(r0);

        r1 = $r4.iterator();

     label1:
        Packer.Pack(r0);

        $z0 = r1.hasNext();

        if $z0 == 0 goto label6;

        $r5 = r1.next();

        r2 = (org.gjt.sp.jedit.buffer.BufferUndoListener) $r5;

     label2:
        r2.endUndo(r0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<init>();

        $r8 = $r7.append("Exception while sending buffer undo event to ");

        $r9 = $r8.append(r2);

        $r10 = $r9.append(" :");

        $r11 = $r10.toString();

        org.gjt.sp.util.Log.log(9, r0, $r11);

        org.gjt.sp.util.Log.log(9, r0, r3);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    protected void fireBeginRedo()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.util.Iterator r1;
        org.gjt.sp.jedit.buffer.BufferUndoListener r2;
        java.lang.Throwable r3, $r6;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this;

        $r4 = r0.undoListeners;

        Packer.Unpack(r0);

        r1 = $r4.iterator();

     label1:
        Packer.Pack(r0);

        $z0 = r1.hasNext();

        if $z0 == 0 goto label6;

        $r5 = r1.next();

        r2 = (org.gjt.sp.jedit.buffer.BufferUndoListener) $r5;

     label2:
        r2.beginRedo(r0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<init>();

        $r8 = $r7.append("Exception while sending buffer begin redo event to ");

        $r9 = $r8.append(r2);

        $r10 = $r9.append(" :");

        $r11 = $r10.toString();

        org.gjt.sp.util.Log.log(9, r0, $r11);

        org.gjt.sp.util.Log.log(9, r0, r3);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    protected void fireEndRedo()
    {
        org.gjt.sp.jedit.Buffer r0;
        java.util.Iterator r1;
        org.gjt.sp.jedit.buffer.BufferUndoListener r2;
        java.lang.Throwable r3, $r6;
        java.util.List $r4;
        boolean $z0;
        java.lang.Object $r5;
        java.lang.StringBuilder $r7, $r8, $r9, $r10;
        java.lang.String $r11;

        r0 := @this;

        $r4 = r0.undoListeners;

        Packer.Unpack(r0);

        r1 = $r4.iterator();

     label1:
        Packer.Pack(r0);

        $z0 = r1.hasNext();

        if $z0 == 0 goto label6;

        $r5 = r1.next();

        r2 = (org.gjt.sp.jedit.buffer.BufferUndoListener) $r5;

     label2:
        r2.endRedo(r0);

     label3:
        goto label5;

     label4:
        $r6 := @caughtexception;

        r3 = $r6;

        $r7 = new java.lang.StringBuilder;

        specialinvoke $r7.<init>();

        $r8 = $r7.append("Exception while sending buffer end redo event to ");

        $r9 = $r8.append(r2);

        $r10 = $r9.append(" :");

        $r11 = $r10.toString();

        org.gjt.sp.util.Log.log(9, r0, $r11);

        org.gjt.sp.util.Log.log(9, r0, r3);

     label5:
        goto label1;

     label6:
        return;

        catch java.lang.Throwable from label2 to label3 with label4;
    }

    private void setFlag(int, boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        int i0, $i1, $i2, $i3, $i4, $i5, $i6, $i7;
        boolean z0;

        r0 := @this;

        i0 := @parameter0;

        z0 := @parameter1;

        if z0 == 0 goto label1;

        $i6 = r0.flags;

        $i5 = 1 << i0;

        $i7 = $i6 | $i5;

        r0.flags = $i7;

        goto label2;

     label1:
        $i3 = r0.flags;

        $i1 = 1 << i0;

        $i2 = $i1 ^ -1;

        $i4 = $i3 & $i2;

        r0.flags = $i4;

     label2:
        return;
    }

    private boolean getFlag(int)
    {
        org.gjt.sp.jedit.Buffer r0;
        int i0, i1, $i2, $i3;
        boolean $z0, $z0_1, $z0_2;

        r0 := @this;

        i0 := @parameter0;

        i1 = 1 << i0;

        $i2 = r0.flags;

        $i3 = $i2 & i1;

        if $i3 != i1 goto label1;

        $z0 = 1;

(0)     goto label2;

     label1:
(1)     $z0_1 = 0;

     label2:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        return $z0_2;
    }

    private boolean isAutoreloadPropertyOverriden()
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean $z0, $z1, $z2, $z3, $z4, $z4_1, $z4_2;

        r0 := @this;

        $z0 = specialinvoke r0.getFlag(6);

        $z1 = org.gjt.sp.jedit.jEdit.getBooleanProperty("autoReload");

        if $z0 != $z1 goto label1;

        $z2 = specialinvoke r0.getFlag(7);

        $z3 = org.gjt.sp.jedit.jEdit.getBooleanProperty("autoReloadDialog");

        if $z2 == $z3 goto label2;

     label1:
        $z4_1 = 1;

(0)     goto label3;

     label2:
(1)     $z4 = 0;

     label3:
        $z4_2 = Phi($z4_1 #0, $z4 #1);

        return $z4_2;
    }

    private void setPath(java.lang.String)
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String r1, $r4, $r5, $r7, $r11, $r14, $r17;
        org.gjt.sp.jedit.io.VFS r2;
        org.gjt.sp.jedit.Buffer$3 $r3;
        int $i0, $i1;
        boolean $z0;
        java.io.File $r6, $r8, $r9, $r10, $r18;
        java.lang.StringBuilder $r12, $r13, $r15, $r16;

        r0 := @this;

        r1 := @parameter0;

        $r3 = new org.gjt.sp.jedit.Buffer$3;

        specialinvoke $r3.<init>(r0, r1);

        org.gjt.sp.jedit.jEdit.visit($r3);

        r0.path = r1;

        r2 = org.gjt.sp.jedit.io.VFSManager.getVFSForPath(r1);

        $i0 = r2.getCapabilities();

        $i1 = $i0 & 2;

        if $i1 != 0 goto label1;

        r0.setFileReadOnly(1);

     label1:
        $r4 = r2.getFileName(r1);

        r0.name = $r4;

        $r5 = r2.getParentOfPath(r1);

        r0.directory = $r5;

        $z0 = r2 instanceof org.gjt.sp.jedit.io.FileVFS;

        if $z0 == 0 goto label3;

        $r6 = new java.io.File;

        Packer.Unpack(r0);

        specialinvoke $r6.<init>(r1);

        r0.file = $r6;

        $r7 = org.gjt.sp.jedit.MiscUtilities.resolveSymlinks(r1);

        r0.symlinkPath = $r7;

        $r8 = r0.autosaveFile;

        if $r8 == null goto label2;

        $r18 = r0.autosaveFile;

        $r18.delete();

     label2:
        $r9 = new java.io.File;

        $r10 = r0.file;

        $r11 = $r10.getParent();

        $r12 = new java.lang.StringBuilder;

        specialinvoke $r12.<init>();

        $r13 = $r12.append(35);

        $r14 = r0.name;

        $r15 = $r13.append($r14);

        $r16 = $r15.append(35);

        $r17 = $r16.toString();

        specialinvoke $r9.<init>($r11, $r17);

        r0.autosaveFile = $r9;

        Packer.Pack(r0);

        goto label4;

     label3:
        Packer.Unpack(r0);

        r0.file = null;

        r0.autosaveFile = null;

        Packer.Pack(r0);

        r0.symlinkPath = r1;

     label4:
        return;
    }

    private boolean recoverAutosave(org.gjt.sp.jedit.View)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        java.lang.Object[] r2, $r4;
        int i0;
        java.io.File $r3, $r5, $r8;
        boolean $z0;
        java.lang.String $r6, $r9;
        org.gjt.sp.jedit.io.VFS $r7;
        org.gjt.sp.jedit.Buffer$4 $r10;
        org.gjt.sp.util.AwtRunnableQueue $r11;

        r0 := @this;

        r1 := @parameter0;

        $r3 = r0.autosaveFile;

        Packer.Unpack(r0);

        $z0 = $r3.canRead();

        Packer.Pack(r0);

        if $z0 != 0 goto label1;

        return 0;

     label1:
        Packer.Unpack(r0);

        org.gjt.sp.jedit.GUIUtilities.hideSplashScreen();

        $r4 = newarray (java.lang.Object)[1];

        $r5 = r0.autosaveFile;

        $r6 = $r5.getPath();

        Packer.Pack(r0);

        $r4[0] = $r6;

        r2 = $r4;

        i0 = org.gjt.sp.jedit.GUIUtilities.confirm(r1, "autosave-found", r2, 0, 2);

        if i0 != 0 goto label2;

        Packer.Unpack(r0);

        $r7 = org.gjt.sp.jedit.io.VFSManager.getFileVFS();

        $r8 = r0.autosaveFile;

        $r9 = $r8.getPath();

        Packer.Pack(r0);

        $r7.load(r1, r0, $r9);

        $r11 = org.gjt.sp.util.AwtRunnableQueue.INSTANCE;

        $r10 = new org.gjt.sp.jedit.Buffer$4;

        specialinvoke $r10.<init>(r0, r1, r2);

        $r11.runAfterIoTasks($r10);

        return 1;

     label2:
        return 0;
    }

    private boolean checkFileForLoad(org.gjt.sp.jedit.View, org.gjt.sp.jedit.io.VFS, java.lang.String)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        org.gjt.sp.jedit.io.VFS r2;
        java.lang.String r3, $r10, $r13, $r16, $r19, $r22, $r25, $r28;
        java.lang.Object r4;
        java.lang.Throwable r5, $r7;
        java.io.IOException r6, $r8, $r11, $r14, $r17, $r20, $r23, $r26, r30, r31, r32, r33, r34, r35;
        int $i0, $i1, $i2;
        boolean $z0, $z1, z2, z3, $z4, z5, z6, $z4_1, $z4_2, $z4_3, $z4_4;
        java.lang.String[] $r9, $r12, $r15, $r18, $r21, $r24, $r27;
        org.gjt.sp.jedit.io.VFSFile r29;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        $i0 = r2.getCapabilities();

        $i1 = $i0 & 64;

(0)     if $i1 == 0 goto label31;

        r4 = r2.createVFSSession(r3, r1);

(1)     if r4 != null goto label01;

        return 0;

     label01:
        r29 = r2._getFile(r4, r3, r1);

        if r29 != null goto label06;

        r0.setNewFile(1);

        z2 = 1;

     label02:
        r2._endVFSSession(r4, r1);

     label03:
        goto label05;

     label04:
        $r14 := @caughtexception;

        r30 = $r14;

        $r15 = newarray (java.lang.String)[1];

        $r16 = r30.toString();

        $r15[0] = $r16;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r3, "ioerror", $r15);

        return 0;

     label05:
        return z2;

     label06:
        $z0 = r29.isReadable();

        if $z0 != 0 goto label11;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r3, "ioerror.no-read", null);

        r0.setNewFile(0);

        z3 = 0;

     label07:
        r2._endVFSSession(r4, r1);

     label08:
        goto label10;

     label09:
        $r8 := @caughtexception;

        r31 = $r8;

        $r9 = newarray (java.lang.String)[1];

        $r10 = r31.toString();

        $r9[0] = $r10;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r3, "ioerror", $r9);

        return 0;

     label10:
        return z3;

     label11:
        $z1 = r29.isWriteable();

        if $z1 != 0 goto label12;

        $z4 = 1;

(2)     goto label13;

     label12:
(3)     $z4_1 = 0;

     label13:
        $z4_2 = Phi($z4 #2, $z4_1 #3);

(4)     r0.setFileReadOnly($z4_2);

        $i2 = r29.getType();

        if $i2 == 0 goto label18;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r3, "ioerror.open-directory", null);

        r0.setNewFile(0);

        z5 = 0;

     label14:
        r2._endVFSSession(r4, r1);

     label15:
        goto label17;

     label16:
        $r23 := @caughtexception;

        r32 = $r23;

        $r24 = newarray (java.lang.String)[1];

        $r25 = r32.toString();

        $r24[0] = $r25;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r3, "ioerror", $r24);

        return 0;

     label17:
        return z5;

     label18:
        r2._endVFSSession(r4, r1);

     label19:
(5)     goto label31;

     label20:
        $r20 := @caughtexception;

        r33 = $r20;

        $r21 = newarray (java.lang.String)[1];

        $r22 = r33.toString();

        $r21[0] = $r22;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r3, "ioerror", $r21);

        return 0;

     label21:
        $r17 := @caughtexception;

(6)     $z4_3 = Phi($z4 #1, $z4_1 #3, $z4_2 #4);

        r34 = $r17;

        $r18 = newarray (java.lang.String)[1];

        $r19 = r34.toString();

        $r18[0] = $r19;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r3, "ioerror", $r18);

        z6 = 0;

     label22:
        r2._endVFSSession(r4, r1);

     label23:
        goto label25;

     label24:
        $r11 := @caughtexception;

        r35 = $r11;

        $r12 = newarray (java.lang.String)[1];

        $r13 = r35.toString();

        $r12[0] = $r13;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r3, "ioerror", $r12);

        return 0;

     label25:
        return z6;

     label26:
        $r7 := @caughtexception;

(7)     $z4 = Phi($z4 #1, $z4_1 #3, $z4_2 #4, $z4_3 #6, $z4 #7);

        r5 = $r7;

     label27:
        r2._endVFSSession(r4, r1);

     label28:
        goto label30;

     label29:
        $r26 := @caughtexception;

        r6 = $r26;

        $r27 = newarray (java.lang.String)[1];

        $r28 = r6.toString();

        $r27[0] = $r28;

        org.gjt.sp.jedit.io.VFSManager.error(r1, r3, "ioerror", $r27);

        return 0;

     label30:
        throw r5;

     label31:
        $z4_4 = Phi($z4 #0, $z4_2 #5);

        return 1;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label14 to label15 with label16;
        catch java.io.IOException from label18 to label19 with label20;
        catch java.io.IOException from label01 to label02 with label21;
        catch java.io.IOException from label06 to label07 with label21;
        catch java.io.IOException from label11 to label14 with label21;
        catch java.io.IOException from label22 to label23 with label24;
        catch java.lang.Throwable from label01 to label02 with label26;
        catch java.lang.Throwable from label06 to label07 with label26;
        catch java.lang.Throwable from label11 to label14 with label26;
        catch java.lang.Throwable from label21 to label22 with label26;
        catch java.io.IOException from label27 to label28 with label29;
        catch java.lang.Throwable from label26 to label27 with label26;
    }

    private static boolean checkFileForSave(org.gjt.sp.jedit.View, org.gjt.sp.jedit.io.VFS, java.lang.String)
    {
        org.gjt.sp.jedit.View r0;
        org.gjt.sp.jedit.io.VFS r1;
        java.lang.String r2, $r8, $r11, $r15, $r18, $r21, $r24;
        java.lang.Object r3;
        java.lang.Throwable r4, $r12;
        java.io.IOException r5, $r6, $r9, $r13, $r16, $r19, $r22, r26, r27, r28, r29, r30;
        int $i0, $i1, $i2;
        java.lang.String[] $r7, $r10, $r14, $r17, $r20, $r23;
        org.gjt.sp.jedit.io.VFSFile r25;
        boolean z0, z1, z2;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        $i0 = r1.getCapabilities();

        $i1 = $i0 & 64;

        if $i1 == 0 goto label24;

        r3 = r1.createVFSSession(r2, r0);

        if r3 != null goto label01;

        return 0;

     label01:
        r25 = r1._getFile(r3, r2, r0);

        if r25 != null goto label06;

        z0 = 1;

     label02:
        r1._endVFSSession(r3, r0);

     label03:
        goto label05;

     label04:
        $r6 := @caughtexception;

        r26 = $r6;

        $r7 = newarray (java.lang.String)[1];

        $r8 = r26.toString();

        $r7[0] = $r8;

        org.gjt.sp.jedit.io.VFSManager.error(r0, r2, "ioerror", $r7);

        return 0;

     label05:
        return z0;

     label06:
        $i2 = r25.getType();

        if $i2 == 0 goto label11;

        org.gjt.sp.jedit.io.VFSManager.error(r0, r2, "ioerror.save-directory", null);

        z1 = 0;

     label07:
        r1._endVFSSession(r3, r0);

     label08:
        goto label10;

     label09:
        $r19 := @caughtexception;

        r27 = $r19;

        $r20 = newarray (java.lang.String)[1];

        $r21 = r27.toString();

        $r20[0] = $r21;

        org.gjt.sp.jedit.io.VFSManager.error(r0, r2, "ioerror", $r20);

        return 0;

     label10:
        return z1;

     label11:
        r1._endVFSSession(r3, r0);

     label12:
        goto label24;

     label13:
        $r9 := @caughtexception;

        r28 = $r9;

        $r10 = newarray (java.lang.String)[1];

        $r11 = r28.toString();

        $r10[0] = $r11;

        org.gjt.sp.jedit.io.VFSManager.error(r0, r2, "ioerror", $r10);

        return 0;

     label14:
        $r16 := @caughtexception;

        r29 = $r16;

        $r17 = newarray (java.lang.String)[1];

        $r18 = r29.toString();

        $r17[0] = $r18;

        org.gjt.sp.jedit.io.VFSManager.error(r0, r2, "ioerror", $r17);

        z2 = 0;

     label15:
        r1._endVFSSession(r3, r0);

     label16:
        goto label18;

     label17:
        $r22 := @caughtexception;

        r30 = $r22;

        $r23 = newarray (java.lang.String)[1];

        $r24 = r30.toString();

        $r23[0] = $r24;

        org.gjt.sp.jedit.io.VFSManager.error(r0, r2, "ioerror", $r23);

        return 0;

     label18:
        return z2;

     label19:
        $r12 := @caughtexception;

        r4 = $r12;

     label20:
        r1._endVFSSession(r3, r0);

     label21:
        goto label23;

     label22:
        $r13 := @caughtexception;

        r5 = $r13;

        $r14 = newarray (java.lang.String)[1];

        $r15 = r5.toString();

        $r14[0] = $r15;

        org.gjt.sp.jedit.io.VFSManager.error(r0, r2, "ioerror", $r14);

        return 0;

     label23:
        throw r4;

     label24:
        return 1;

        catch java.io.IOException from label02 to label03 with label04;
        catch java.io.IOException from label07 to label08 with label09;
        catch java.io.IOException from label11 to label12 with label13;
        catch java.io.IOException from label01 to label02 with label14;
        catch java.io.IOException from label06 to label07 with label14;
        catch java.io.IOException from label15 to label16 with label17;
        catch java.lang.Throwable from label01 to label02 with label19;
        catch java.lang.Throwable from label06 to label07 with label19;
        catch java.lang.Throwable from label14 to label15 with label19;
        catch java.io.IOException from label20 to label21 with label22;
        catch java.lang.Throwable from label19 to label20 with label19;
    }

    private byte[] calculateHash()
    {
        org.gjt.sp.jedit.Buffer r0;
        byte[] r1, $r3;
        boolean $z0;
        int $i0;
        java.lang.CharSequence $r2;

        r0 := @this;

        r1 = newarray (byte)[1];

        $z0 = org.gjt.sp.jedit.jEdit.getBooleanProperty("useMD5forDirtyCalculation");

        if $z0 != 0 goto label1;

        return r1;

     label1:
        $i0 = r0.getLength();

        $r2 = r0.getSegment(0, $i0);

        $r3 = org.gjt.sp.util.StandardUtilities.md5($r2);

        return $r3;
    }

    private void updateHash()
    {
        org.gjt.sp.jedit.Buffer r0;
        int $i0;
        byte[] $r1;

        r0 := @this;

        $i0 = r0.getLength();

        r0.initialLength = $i0;

        $r1 = specialinvoke r0.calculateHash();

        r0.md5hash = $r1;

        return;
    }

    private void finishLoading()
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.buffer.FoldHandler r1, $r4;
        java.util.Iterator r2;
        org.gjt.sp.jedit.Marker r3;
        int i0, $i1, $i2;
        java.util.Vector $r5;
        boolean $z0;
        java.lang.Object $r6;

        r0 := @this;

        specialinvoke r0.updateHash();

        r0.parseBufferLocalProperties();

        r1 = r0.getFoldHandler();

        r0.setMode();

        $r4 = r0.getFoldHandler();

        if $r4 != r1 goto label1;

        r0.invalidateFoldLevels();

        r0.fireFoldHandlerChanged();

     label1:
        $r5 = r0.markers;

        r2 = $r5.iterator();

     label2:
        $z0 = r2.hasNext();

        if $z0 == 0 goto label5;

        $r6 = r2.next();

        r3 = (org.gjt.sp.jedit.Marker) $r6;

        r3.removePosition();

        i0 = r3.getPosition();

        $i1 = r0.getLength();

        if i0 <= $i1 goto label3;

        $i2 = r0.getLength();

        r3.setPosition($i2);

        goto label4;

     label3:
        if i0 >= 0 goto label4;

        r3.setPosition(0);

     label4:
        r3.createPosition();

        goto label2;

     label5:
        return;
    }

    private void finishSaving(org.gjt.sp.jedit.View, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)
    {
        org.gjt.sp.jedit.Buffer r0, r22;
        org.gjt.sp.jedit.View r1;
        java.lang.String r2, r3, r4, $r8, $r14, $r18, $r20, r23;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z6, $z8, $z9, $z11;
        java.lang.Throwable r5, $r21;
        java.io.File $r6, $r7, $r16, $r17;
        org.gjt.sp.jedit.msg.BufferUpdate $r9, $r11;
        java.lang.Object $r10, $r12;
        org.gjt.sp.jedit.Mode $r13;
        org.gjt.sp.jedit.buffer.UndoManager $r15;
        long $l0;
        org.gjt.sp.jedit.Buffer$5 $r19;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        r3 := @parameter2;

        r4 := @parameter3;

        z0 := @parameter4;

        z1 := @parameter5;

        if z1 != 0 goto label03;

        $z8 = r4.equals(r2);

        if $z8 != 0 goto label03;

        r22 = org.gjt.sp.jedit.jEdit.getBuffer(r4);

        if z0 == 0 goto label02;

        if r22 == null goto label01;

        $r20 = r22.getPath();

        $z11 = $r20.equals(r2);

        if $z11 != 0 goto label01;

        r22.setDirty(0);

        org.gjt.sp.jedit.jEdit.closeBuffer(r1, r22);

     label01:
        specialinvoke r0.setPath(r4);

        $r19 = new org.gjt.sp.jedit.Buffer$5;

        specialinvoke $r19.<init>(r0);

        org.gjt.sp.jedit.jEdit.visit($r19);

        goto label03;

     label02:
        if r22 == null goto label03;

        $r18 = r22.getPath();

        $z9 = $r18.equals(r2);

        if $z9 != 0 goto label03;

        r22.load(r1, 1);

     label03:
        if z0 == 0 goto label14;

        $r6 = r0.file;

        if $r6 == null goto label04;

        $r17 = r0.file;

        Packer.Unpack(r0);

        $l0 = $r17.lastModified();

        Packer.Pack(r0);

        r0.modTime = $l0;

     label04:
        if z1 != 0 goto label14;

     label05:
        r0.writeLock();

        $r7 = r0.autosaveFile;

        if $r7 == null goto label06;

        $r16 = r0.autosaveFile;

        Packer.Unpack(r0);

        $r16.delete();

     label06:
        Packer.Pack(r0);

        specialinvoke r0.setFlag(5, 0);

        r0.setFileReadOnly(0);

        specialinvoke r0.setFlag(3, 0);

        specialinvoke r0.setFlag(4, 0);

        specialinvoke r0.setDirty(0);

        $z2 = org.gjt.sp.jedit.jEdit.getBooleanProperty("resetUndoOnSave");

        if $z2 == 0 goto label07;

        $r15 = r0.undoMgr;

        $r15.clear();

     label07:
        r0.writeUnlock();

        goto label10;

     label08:
        $r21 := @caughtexception;

        r5 = $r21;

     label09:
        r0.writeUnlock();

        throw r5;

     label10:
        r0.parseBufferLocalProperties();

        $r8 = r0.getPath();

        $z3 = $r8.equals(r2);

        if $z3 != 0 goto label12;

        $z6 = r0.isTemporary();

        if $z6 != 0 goto label11;

        org.gjt.sp.jedit.jEdit.updatePosition(r3, r0);

     label11:
        r0.setMode();

        goto label13;

     label12:
        r23 = r0.getStringProperty("mode");

        if r23 == null goto label13;

        $r13 = r0.getMode();

        $r14 = $r13.getName();

        $z5 = r23.equals($r14);

        if $z5 != 0 goto label13;

        r0.setMode();

     label13:
        specialinvoke r0.updateHash();

        $z4 = r0.isTemporary();

        if $z4 != 0 goto label14;

        $r9 = new org.gjt.sp.jedit.msg.BufferUpdate;

        $r10 = org.gjt.sp.jedit.msg.BufferUpdate.DIRTY_CHANGED;

        specialinvoke $r9.<init>(r0, r1, $r10);

        org.gjt.sp.jedit.EditBus.send($r9);

        $r11 = new org.gjt.sp.jedit.msg.BufferUpdate;

        $r12 = org.gjt.sp.jedit.msg.BufferUpdate.SAVED;

        specialinvoke $r11.<init>(r0, r1, $r12);

        org.gjt.sp.jedit.EditBus.send($r11);

     label14:
        return;

        catch java.lang.Throwable from label05 to label07 with label08;
        catch java.lang.Throwable from label08 to label09 with label08;
    }

    static void access$000(org.gjt.sp.jedit.Buffer, javax.swing.text.Segment, org.gjt.sp.util.IntegerArray)
    {
        org.gjt.sp.jedit.Buffer r0;
        javax.swing.text.Segment r1;
        org.gjt.sp.util.IntegerArray r2;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        r0.loadText(r1, r2);

        return;
    }

    static org.gjt.sp.jedit.buffer.UndoManager access$100(org.gjt.sp.jedit.Buffer)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.buffer.UndoManager $r1;

        r0 := @parameter0;

        $r1 = r0.undoMgr;

        return $r1;
    }

    static org.gjt.sp.jedit.buffer.UndoManager access$200(org.gjt.sp.jedit.Buffer)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.buffer.UndoManager $r1;

        r0 := @parameter0;

        $r1 = r0.undoMgr;

        return $r1;
    }

    static boolean access$300(org.gjt.sp.jedit.Buffer, int)
    {
        org.gjt.sp.jedit.Buffer r0;
        int i0;
        boolean $z0;

        r0 := @parameter0;

        i0 := @parameter1;

        $z0 = specialinvoke r0.getFlag(i0);

        return $z0;
    }

    static void access$400(org.gjt.sp.jedit.Buffer)
    {
        org.gjt.sp.jedit.Buffer r0;

        r0 := @parameter0;

        specialinvoke r0.finishLoading();

        return;
    }

    static void access$500(org.gjt.sp.jedit.Buffer, java.lang.String)
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String r1;

        r0 := @parameter0;

        r1 := @parameter1;

        specialinvoke r0.setPath(r1);

        return;
    }

    static void access$601(org.gjt.sp.jedit.Buffer, boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        boolean z0;

        r0 := @parameter0;

        z0 := @parameter1;

        specialinvoke r0.setDirty(z0);

        return;
    }

    static void access$700(org.gjt.sp.jedit.Buffer)
    {
        org.gjt.sp.jedit.Buffer r0;

        r0 := @parameter0;

        r0.fireBufferLoaded();

        return;
    }

    static void access$800(org.gjt.sp.jedit.Buffer, org.gjt.sp.jedit.View, java.lang.String, java.lang.String, java.lang.String, boolean, boolean)
    {
        org.gjt.sp.jedit.Buffer r0;
        org.gjt.sp.jedit.View r1;
        java.lang.String r2, r3, r4;
        boolean z0, z1;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        r3 := @parameter3;

        r4 := @parameter4;

        z0 := @parameter5;

        z1 := @parameter6;

        specialinvoke r0.finishSaving(r1, r2, r3, r4, z0, z1);

        return;
    }

    static java.lang.String access$900(org.gjt.sp.jedit.Buffer)
    {
        org.gjt.sp.jedit.Buffer r0;
        java.lang.String $r1;

        r0 := @parameter0;

        $r1 = r0.path;

        return $r1;
    }
}
