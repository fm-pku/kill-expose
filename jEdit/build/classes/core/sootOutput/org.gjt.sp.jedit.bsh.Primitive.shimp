public final class org.gjt.sp.jedit.bsh.Primitive extends java.lang.Object implements org.gjt.sp.jedit.bsh.ParserConstants, java.io.Serializable
{
    static java.util.Hashtable wrapperMap;
    private java.lang.Object value;
    public static final org.gjt.sp.jedit.bsh.Primitive NULL;
    public static final org.gjt.sp.jedit.bsh.Primitive VOID;

    public void <init>(java.lang.Object)
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        java.lang.Object r1;
        org.gjt.sp.jedit.bsh.Primitive$Special $r2, $r3;
        java.lang.Class $r4;
        boolean $z0;
        org.gjt.sp.jedit.bsh.InterpreterError $r5, $r10;
        java.lang.StringBuilder $r6, $r7, $r8;
        java.lang.String $r9;

        r0 := @this;

        r1 := @parameter0;

        specialinvoke r0.<init>();

        if r1 != null goto label1;

        $r10 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r10.<init>("Use Primitve.NULL instead of Primitive(null)");

        throw $r10;

     label1:
        $r2 = org.gjt.sp.jedit.bsh.Primitive$Special.NULL_VALUE;

        if r1 == $r2 goto label2;

        $r3 = org.gjt.sp.jedit.bsh.Primitive$Special.VOID_TYPE;

        if r1 == $r3 goto label2;

        $r4 = r1.getClass();

        $z0 = org.gjt.sp.jedit.bsh.Primitive.isWrapperType($r4);

        if $z0 != 0 goto label2;

        $r5 = new org.gjt.sp.jedit.bsh.InterpreterError;

        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<init>();

        $r7 = $r6.append("Not a wrapper type: ");

        $r8 = $r7.append(r1);

        $r9 = $r8.toString();

        specialinvoke $r5.<init>($r9);

        throw $r5;

     label2:
        r0.value = r1;

        return;
    }

    public void <init>(boolean)
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        boolean z0;
        java.lang.Boolean $r1;

        r0 := @this;

        z0 := @parameter0;

        $r1 = new java.lang.Boolean;

        specialinvoke $r1.<init>(z0);

        specialinvoke r0.<init>($r1);

        return;
    }

    public void <init>(byte)
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        byte b0;
        java.lang.Byte $r1;

        r0 := @this;

        b0 := @parameter0;

        $r1 = new java.lang.Byte;

        specialinvoke $r1.<init>(b0);

        specialinvoke r0.<init>($r1);

        return;
    }

    public void <init>(short)
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        short s0;
        java.lang.Short $r1;

        r0 := @this;

        s0 := @parameter0;

        $r1 = new java.lang.Short;

        specialinvoke $r1.<init>(s0);

        specialinvoke r0.<init>($r1);

        return;
    }

    public void <init>(char)
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        char c0;
        java.lang.Character $r1;

        r0 := @this;

        c0 := @parameter0;

        $r1 = new java.lang.Character;

        specialinvoke $r1.<init>(c0);

        specialinvoke r0.<init>($r1);

        return;
    }

    public void <init>(int)
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        int i0;
        java.lang.Integer $r1;

        r0 := @this;

        i0 := @parameter0;

        $r1 = new java.lang.Integer;

        specialinvoke $r1.<init>(i0);

        specialinvoke r0.<init>($r1);

        return;
    }

    public void <init>(long)
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        long l0;
        java.lang.Long $r1;

        r0 := @this;

        l0 := @parameter0;

        $r1 = new java.lang.Long;

        specialinvoke $r1.<init>(l0);

        specialinvoke r0.<init>($r1);

        return;
    }

    public void <init>(float)
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        float f0;
        java.lang.Float $r1;

        r0 := @this;

        f0 := @parameter0;

        $r1 = new java.lang.Float;

        specialinvoke $r1.<init>(f0);

        specialinvoke r0.<init>($r1);

        return;
    }

    public void <init>(double)
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        double d0;
        java.lang.Double $r1;

        r0 := @this;

        d0 := @parameter0;

        $r1 = new java.lang.Double;

        specialinvoke $r1.<init>(d0);

        specialinvoke r0.<init>($r1);

        return;
    }

    public java.lang.Object getValue()
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        org.gjt.sp.jedit.bsh.Primitive$Special $r1, $r3;
        java.lang.Object $r2, $r4, $r5;
        org.gjt.sp.jedit.bsh.InterpreterError $r6;

        r0 := @this;

        $r2 = r0.value;

        $r1 = org.gjt.sp.jedit.bsh.Primitive$Special.NULL_VALUE;

        if $r2 != $r1 goto label1;

        return null;

     label1:
        $r4 = r0.value;

        $r3 = org.gjt.sp.jedit.bsh.Primitive$Special.VOID_TYPE;

        if $r4 != $r3 goto label2;

        $r6 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r6.<init>("attempt to unwrap void type");

        throw $r6;

     label2:
        $r5 = r0.value;

        return $r5;
    }

    public java.lang.String toString()
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        org.gjt.sp.jedit.bsh.Primitive$Special $r1, $r3;
        java.lang.Object $r2, $r4, $r5;
        java.lang.String $r6;

        r0 := @this;

        $r2 = r0.value;

        $r1 = org.gjt.sp.jedit.bsh.Primitive$Special.NULL_VALUE;

        if $r2 != $r1 goto label1;

        return "null";

     label1:
        $r4 = r0.value;

        $r3 = org.gjt.sp.jedit.bsh.Primitive$Special.VOID_TYPE;

        if $r4 != $r3 goto label2;

        return "void";

     label2:
        $r5 = r0.value;

        $r6 = $r5.toString();

        return $r6;
    }

    public java.lang.Class getType()
    {
        org.gjt.sp.jedit.bsh.Primitive r0, $r1, $r2;
        java.lang.Object $r3;
        java.lang.Class $r4, $r5, $r6;

        r0 := @this;

        $r1 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r0 != $r1 goto label1;

        $r6 = java.lang.Void.TYPE;

        return $r6;

     label1:
        $r2 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r0 != $r2 goto label2;

        return null;

     label2:
        $r3 = r0.value;

        $r4 = $r3.getClass();

        $r5 = org.gjt.sp.jedit.bsh.Primitive.unboxType($r4);

        return $r5;
    }

    public static java.lang.Object binaryOperation(java.lang.Object, java.lang.Object, int) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        int i0;
        java.lang.Class r0, r1, $r13, $r14, $r19, $r22;
        java.lang.Object[] r2;
        java.lang.Object r3, r4, r5, r29, r30, r29_1, r29_2, r30_1, r30_2;
        java.lang.ArithmeticException r6, $r27;
        org.gjt.sp.jedit.bsh.Primitive $r7, $r9, $r10, $r12, $r15, $r25, $r26;
        org.gjt.sp.jedit.bsh.UtilEvalError $r8, $r11, $r16;
        boolean $z0, $z1, $z2;
        java.lang.StringBuilder $r17, $r18, $r20, $r21, $r23;
        java.lang.String $r24;
        org.gjt.sp.jedit.bsh.UtilTargetError $r28;

        r29 := @parameter0;

        r30 := @parameter1;

        i0 := @parameter2;

        $r7 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r29 == $r7 goto label01;

        $r9 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r30 != $r9 goto label02;

     label01:
        $r8 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r8.<init>("Null value or \'null\' literal in binary operation");

        throw $r8;

     label02:
        $r10 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r29 == $r10 goto label03;

        $r12 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r30 != $r12 goto label04;

     label03:
        $r11 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r11.<init>("Undefined variable, class, or \'void\' literal in binary operation");

        throw $r11;

     label04:
        r0 = r29.getClass();

        r1 = r30.getClass();

        $z0 = r29 instanceof org.gjt.sp.jedit.bsh.Primitive;

(0)     if $z0 == 0 goto label05;

        $r26 = (org.gjt.sp.jedit.bsh.Primitive) r29;

(1)     r29_1 = $r26.getValue();

     label05:
        r29_2 = Phi(r29 #0, r29_1 #1);

        $z1 = r30 instanceof org.gjt.sp.jedit.bsh.Primitive;

(2)     if $z1 == 0 goto label06;

        $r25 = (org.gjt.sp.jedit.bsh.Primitive) r30;

(3)     r30_1 = $r25.getValue();

     label06:
        r30_2 = Phi(r30 #2, r30_1 #3);

        r2 = org.gjt.sp.jedit.bsh.Primitive.promotePrimitives(r29_2, r30_2);

        r3 = r2[0];

        r4 = r2[1];

        $r13 = r3.getClass();

        $r14 = r4.getClass();

        if $r13 == $r14 goto label07;

        $r16 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        $r17 = new java.lang.StringBuilder;

        specialinvoke $r17.<init>();

        $r18 = $r17.append("Type mismatch in operator.  ");

        $r19 = r3.getClass();

        $r20 = $r18.append($r19);

        $r21 = $r20.append(" cannot be used with ");

        $r22 = r4.getClass();

        $r23 = $r21.append($r22);

        $r24 = $r23.toString();

        specialinvoke $r16.<init>($r24);

        throw $r16;

     label07:
        r5 = org.gjt.sp.jedit.bsh.Primitive.binaryOperationImpl(r3, r4, i0);

     label08:
        goto label10;

     label09:
        $r27 := @caughtexception;

        r6 = $r27;

        $r28 = new org.gjt.sp.jedit.bsh.UtilTargetError;

        specialinvoke $r28.<init>("Arithemetic Exception in binary op", r6);

        throw $r28;

     label10:
        if r0 != class "org/gjt/sp/jedit/bsh/Primitive" goto label11;

        if r1 == class "org/gjt/sp/jedit/bsh/Primitive" goto label12;

     label11:
        $z2 = r5 instanceof java.lang.Boolean;

        if $z2 == 0 goto label13;

     label12:
        $r15 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r15.<init>(r5);

        return $r15;

     label13:
        return r5;

        catch java.lang.ArithmeticException from label07 to label08 with label09;
    }

    static java.lang.Object binaryOperationImpl(java.lang.Object, java.lang.Object, int) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        java.lang.Object r0, r1, $r5, $r8, $r11, $r14;
        int i0;
        boolean $z0, $z1, $z2, $z3, $z4;
        org.gjt.sp.jedit.bsh.UtilEvalError $r2;
        java.lang.Double $r3, $r4;
        java.lang.Float $r6, $r7;
        java.lang.Long $r9, $r10;
        java.lang.Integer $r12, $r13;
        java.lang.Boolean $r15, $r16, $r17;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        $z0 = r0 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r16 = (java.lang.Boolean) r0;

        $r15 = (java.lang.Boolean) r1;

        $r17 = org.gjt.sp.jedit.bsh.Primitive.booleanBinaryOperation($r16, $r15, i0);

        return $r17;

     label1:
        $z1 = r0 instanceof java.lang.Integer;

        if $z1 == 0 goto label2;

        $r13 = (java.lang.Integer) r0;

        $r12 = (java.lang.Integer) r1;

        $r14 = org.gjt.sp.jedit.bsh.Primitive.intBinaryOperation($r13, $r12, i0);

        return $r14;

     label2:
        $z2 = r0 instanceof java.lang.Long;

        if $z2 == 0 goto label3;

        $r10 = (java.lang.Long) r0;

        $r9 = (java.lang.Long) r1;

        $r11 = org.gjt.sp.jedit.bsh.Primitive.longBinaryOperation($r10, $r9, i0);

        return $r11;

     label3:
        $z3 = r0 instanceof java.lang.Float;

        if $z3 == 0 goto label4;

        $r7 = (java.lang.Float) r0;

        $r6 = (java.lang.Float) r1;

        $r8 = org.gjt.sp.jedit.bsh.Primitive.floatBinaryOperation($r7, $r6, i0);

        return $r8;

     label4:
        $z4 = r0 instanceof java.lang.Double;

        if $z4 == 0 goto label5;

        $r4 = (java.lang.Double) r0;

        $r3 = (java.lang.Double) r1;

        $r5 = org.gjt.sp.jedit.bsh.Primitive.doubleBinaryOperation($r4, $r3, i0);

        return $r5;

     label5:
        $r2 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r2.<init>("Invalid types in binary operator");

        throw $r2;
    }

    static java.lang.Boolean booleanBinaryOperation(java.lang.Boolean, java.lang.Boolean, int)
    {
        java.lang.Boolean r0, r1, $r2, $r3, $r4, $r5;
        int i0;
        boolean z0, z1, $z2, $z3, $z4, $z5, $z2_1, $z2_2, $z3_1, $z3_2, $z4_1, $z4_2, $z5_1, $z5_2;
        org.gjt.sp.jedit.bsh.InterpreterError $r6;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        z0 = r0.booleanValue();

        z1 = r1.booleanValue();

        tableswitch(i0)
        {
            case 90: goto label01;
            case 91: goto label14;
            case 92: goto label14;
            case 93: goto label14;
            case 94: goto label14;
            case 95: goto label04;
            case 96: goto label07;
            case 97: goto label07;
            case 98: goto label11;
            case 99: goto label11;
            default: goto label14;
        };

     label01:
        $r2 = new java.lang.Boolean;

        if z0 != z1 goto label02;

        $z2 = 1;

(0)     goto label03;

     label02:
(1)     $z2_1 = 0;

     label03:
        $z2_2 = Phi($z2 #0, $z2_1 #1);

        specialinvoke $r2.<init>($z2_2);

        return $r2;

     label04:
        $r5 = new java.lang.Boolean;

        if z0 == z1 goto label05;

        $z3 = 1;

(2)     goto label06;

     label05:
(3)     $z3_1 = 0;

     label06:
        $z3_2 = Phi($z3 #2, $z3_1 #3);

        specialinvoke $r5.<init>($z3_2);

        return $r5;

     label07:
        $r4 = new java.lang.Boolean;

        if z0 != 0 goto label08;

        if z1 == 0 goto label09;

     label08:
        $z4_1 = 1;

(4)     goto label10;

     label09:
(5)     $z4 = 0;

     label10:
        $z4_2 = Phi($z4_1 #4, $z4 #5);

        specialinvoke $r4.<init>($z4_2);

        return $r4;

     label11:
        $r3 = new java.lang.Boolean;

        if z0 == 0 goto label12;

        if z1 == 0 goto label12;

        $z5 = 1;

(6)     goto label13;

     label12:
(7)     $z5_1 = 0;

     label13:
        $z5_2 = Phi($z5 #6, $z5_1 #7);

        specialinvoke $r3.<init>($z5_2);

        return $r3;

     label14:
        $r6 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r6.<init>("unimplemented binary operator");

        throw $r6;
    }

    static java.lang.Object longBinaryOperation(java.lang.Long, java.lang.Long, int)
    {
        java.lang.Long r0, r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int i0, $i4, $i6, $i8;
        long l1, l2, $l5, $l7, $l9, $l10, $l11, $l12, $l13, $l14, $l15, $l16, $l17;
        java.lang.Boolean $r2, $r14, $r15, $r16, $r17, $r18;
        byte $b3, $b18, $b19, $b20, $b21, $b22;
        org.gjt.sp.jedit.bsh.InterpreterError $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z0_1, $z0_2, $z1_1, $z1_2, $z2_1, $z2_2, $z3_1, $z3_2, $z4_1, $z4_2, $z5_1, $z5_2;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        l1 = r0.longValue();

        l2 = r1.longValue();

        tableswitch(i0)
        {
            case 82: goto label04;
            case 83: goto label04;
            case 84: goto label01;
            case 85: goto label01;
            case 86: goto label30;
            case 87: goto label30;
            case 88: goto label30;
            case 89: goto label30;
            case 90: goto label07;
            case 91: goto label10;
            case 92: goto label10;
            case 93: goto label13;
            case 94: goto label13;
            case 95: goto label16;
            case 96: goto label30;
            case 97: goto label30;
            case 98: goto label30;
            case 99: goto label30;
            case 100: goto label30;
            case 101: goto label30;
            case 102: goto label19;
            case 103: goto label20;
            case 104: goto label21;
            case 105: goto label22;
            case 106: goto label27;
            case 107: goto label27;
            case 108: goto label28;
            case 109: goto label28;
            case 110: goto label29;
            case 111: goto label23;
            case 112: goto label24;
            case 113: goto label24;
            case 114: goto label25;
            case 115: goto label25;
            case 116: goto label26;
            case 117: goto label26;
            default: goto label30;
        };

     label01:
        $r2 = new java.lang.Boolean;

        $b3 = l1 cmp l2;

        if $b3 >= 0 goto label02;

        $z0 = 1;

(0)     goto label03;

     label02:
(1)     $z0_1 = 0;

     label03:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        specialinvoke $r2.<init>($z0_2);

        return $r2;

     label04:
        $r18 = new java.lang.Boolean;

        $b22 = l1 cmp l2;

        if $b22 <= 0 goto label05;

        $z1 = 1;

(2)     goto label06;

     label05:
(3)     $z1_1 = 0;

     label06:
        $z1_2 = Phi($z1 #2, $z1_1 #3);

        specialinvoke $r18.<init>($z1_2);

        return $r18;

     label07:
        $r17 = new java.lang.Boolean;

        $b21 = l1 cmp l2;

        if $b21 != 0 goto label08;

        $z2 = 1;

(4)     goto label09;

     label08:
(5)     $z2_1 = 0;

     label09:
        $z2_2 = Phi($z2 #4, $z2_1 #5);

        specialinvoke $r17.<init>($z2_2);

        return $r17;

     label10:
        $r16 = new java.lang.Boolean;

        $b20 = l1 cmp l2;

        if $b20 > 0 goto label11;

        $z3 = 1;

(6)     goto label12;

     label11:
(7)     $z3_1 = 0;

     label12:
        $z3_2 = Phi($z3 #6, $z3_1 #7);

        specialinvoke $r16.<init>($z3_2);

        return $r16;

     label13:
        $r15 = new java.lang.Boolean;

        $b19 = l1 cmp l2;

        if $b19 < 0 goto label14;

        $z4 = 1;

(8)     goto label15;

     label14:
(9)     $z4_1 = 0;

     label15:
        $z4_2 = Phi($z4 #8, $z4_1 #9);

        specialinvoke $r15.<init>($z4_2);

        return $r15;

     label16:
        $r14 = new java.lang.Boolean;

        $b18 = l1 cmp l2;

        if $b18 == 0 goto label17;

        $z5 = 1;

(10)    goto label18;

     label17:
(11)    $z5_1 = 0;

     label18:
        $z5_2 = Phi($z5 #10, $z5_1 #11);

        specialinvoke $r14.<init>($z5_2);

        return $r14;

     label19:
        $r13 = new java.lang.Long;

        $l17 = l1 + l2;

        specialinvoke $r13.<init>($l17);

        return $r13;

     label20:
        $r12 = new java.lang.Long;

        $l16 = l1 - l2;

        specialinvoke $r12.<init>($l16);

        return $r12;

     label21:
        $r11 = new java.lang.Long;

        $l15 = l1 * l2;

        specialinvoke $r11.<init>($l15);

        return $r11;

     label22:
        $r10 = new java.lang.Long;

        $l14 = l1 / l2;

        specialinvoke $r10.<init>($l14);

        return $r10;

     label23:
        $r6 = new java.lang.Long;

        $l10 = l1 % l2;

        specialinvoke $r6.<init>($l10);

        return $r6;

     label24:
        $r5 = new java.lang.Long;

        $i8 = (int) l2;

        $l9 = l1 << $i8;

        specialinvoke $r5.<init>($l9);

        return $r5;

     label25:
        $r4 = new java.lang.Long;

        $i6 = (int) l2;

        $l7 = l1 >> $i6;

        specialinvoke $r4.<init>($l7);

        return $r4;

     label26:
        $r3 = new java.lang.Long;

        $i4 = (int) l2;

        $l5 = l1 >>> $i4;

        specialinvoke $r3.<init>($l5);

        return $r3;

     label27:
        $r9 = new java.lang.Long;

        $l13 = l1 & l2;

        specialinvoke $r9.<init>($l13);

        return $r9;

     label28:
        $r8 = new java.lang.Long;

        $l12 = l1 | l2;

        specialinvoke $r8.<init>($l12);

        return $r8;

     label29:
        $r7 = new java.lang.Long;

        $l11 = l1 ^ l2;

        specialinvoke $r7.<init>($l11);

        return $r7;

     label30:
        $r19 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r19.<init>("Unimplemented binary long operator");

        throw $r19;
    }

    static java.lang.Object intBinaryOperation(java.lang.Integer, java.lang.Integer, int)
    {
        java.lang.Integer r0, r1, $r3, $r4, $r5, $r6, $r7, $r8, $r9, $r10, $r11, $r12, $r13;
        int i0, i1, i2, $i3, $i4, $i5, $i6, $i7, $i8, $i9, $i10, $i11, $i12, $i13;
        java.lang.Boolean $r2, $r14, $r15, $r16, $r17, $r18;
        org.gjt.sp.jedit.bsh.InterpreterError $r19;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z0_1, $z0_2, $z1_1, $z1_2, $z2_1, $z2_2, $z3_1, $z3_2, $z4_1, $z4_2, $z5_1, $z5_2;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        i1 = r0.intValue();

        i2 = r1.intValue();

        tableswitch(i0)
        {
            case 82: goto label04;
            case 83: goto label04;
            case 84: goto label01;
            case 85: goto label01;
            case 86: goto label30;
            case 87: goto label30;
            case 88: goto label30;
            case 89: goto label30;
            case 90: goto label07;
            case 91: goto label10;
            case 92: goto label10;
            case 93: goto label13;
            case 94: goto label13;
            case 95: goto label16;
            case 96: goto label30;
            case 97: goto label30;
            case 98: goto label30;
            case 99: goto label30;
            case 100: goto label30;
            case 101: goto label30;
            case 102: goto label19;
            case 103: goto label20;
            case 104: goto label21;
            case 105: goto label22;
            case 106: goto label27;
            case 107: goto label27;
            case 108: goto label28;
            case 109: goto label28;
            case 110: goto label29;
            case 111: goto label23;
            case 112: goto label24;
            case 113: goto label24;
            case 114: goto label25;
            case 115: goto label25;
            case 116: goto label26;
            case 117: goto label26;
            default: goto label30;
        };

     label01:
        $r2 = new java.lang.Boolean;

        if i1 >= i2 goto label02;

        $z0 = 1;

(0)     goto label03;

     label02:
(1)     $z0_1 = 0;

     label03:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        specialinvoke $r2.<init>($z0_2);

        return $r2;

     label04:
        $r18 = new java.lang.Boolean;

        if i1 <= i2 goto label05;

        $z1 = 1;

(2)     goto label06;

     label05:
(3)     $z1_1 = 0;

     label06:
        $z1_2 = Phi($z1 #2, $z1_1 #3);

        specialinvoke $r18.<init>($z1_2);

        return $r18;

     label07:
        $r17 = new java.lang.Boolean;

        if i1 != i2 goto label08;

        $z2 = 1;

(4)     goto label09;

     label08:
(5)     $z2_1 = 0;

     label09:
        $z2_2 = Phi($z2 #4, $z2_1 #5);

        specialinvoke $r17.<init>($z2_2);

        return $r17;

     label10:
        $r16 = new java.lang.Boolean;

        if i1 > i2 goto label11;

        $z3 = 1;

(6)     goto label12;

     label11:
(7)     $z3_1 = 0;

     label12:
        $z3_2 = Phi($z3 #6, $z3_1 #7);

        specialinvoke $r16.<init>($z3_2);

        return $r16;

     label13:
        $r15 = new java.lang.Boolean;

        if i1 < i2 goto label14;

        $z4 = 1;

(8)     goto label15;

     label14:
(9)     $z4_1 = 0;

     label15:
        $z4_2 = Phi($z4 #8, $z4_1 #9);

        specialinvoke $r15.<init>($z4_2);

        return $r15;

     label16:
        $r14 = new java.lang.Boolean;

        if i1 == i2 goto label17;

        $z5 = 1;

(10)    goto label18;

     label17:
(11)    $z5_1 = 0;

     label18:
        $z5_2 = Phi($z5 #10, $z5_1 #11);

        specialinvoke $r14.<init>($z5_2);

        return $r14;

     label19:
        $r13 = new java.lang.Integer;

        $i13 = i1 + i2;

        specialinvoke $r13.<init>($i13);

        return $r13;

     label20:
        $r12 = new java.lang.Integer;

        $i12 = i1 - i2;

        specialinvoke $r12.<init>($i12);

        return $r12;

     label21:
        $r11 = new java.lang.Integer;

        $i11 = i1 * i2;

        specialinvoke $r11.<init>($i11);

        return $r11;

     label22:
        $r10 = new java.lang.Integer;

        $i10 = i1 / i2;

        specialinvoke $r10.<init>($i10);

        return $r10;

     label23:
        $r6 = new java.lang.Integer;

        $i6 = i1 % i2;

        specialinvoke $r6.<init>($i6);

        return $r6;

     label24:
        $r5 = new java.lang.Integer;

        $i5 = i1 << i2;

        specialinvoke $r5.<init>($i5);

        return $r5;

     label25:
        $r4 = new java.lang.Integer;

        $i4 = i1 >> i2;

        specialinvoke $r4.<init>($i4);

        return $r4;

     label26:
        $r3 = new java.lang.Integer;

        $i3 = i1 >>> i2;

        specialinvoke $r3.<init>($i3);

        return $r3;

     label27:
        $r9 = new java.lang.Integer;

        $i9 = i1 & i2;

        specialinvoke $r9.<init>($i9);

        return $r9;

     label28:
        $r8 = new java.lang.Integer;

        $i8 = i1 | i2;

        specialinvoke $r8.<init>($i8);

        return $r8;

     label29:
        $r7 = new java.lang.Integer;

        $i7 = i1 ^ i2;

        specialinvoke $r7.<init>($i7);

        return $r7;

     label30:
        $r19 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r19.<init>("Unimplemented binary integer operator");

        throw $r19;
    }

    static java.lang.Object doubleBinaryOperation(java.lang.Double, java.lang.Double, int) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        java.lang.Double r0, r1, $r4, $r5, $r6, $r7, $r8;
        int i0;
        double d0, d1, $d2, $d3, $d4, $d5, $d6;
        java.lang.Boolean $r2, $r9, $r10, $r11, $r12, $r13;
        byte $b1, $b2, $b3, $b4, $b5, $b6;
        org.gjt.sp.jedit.bsh.UtilEvalError $r3;
        org.gjt.sp.jedit.bsh.InterpreterError $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z0_1, $z0_2, $z1_1, $z1_2, $z2_1, $z2_2, $z3_1, $z3_2, $z4_1, $z4_2, $z5_1, $z5_2;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        d0 = r0.doubleValue();

        d1 = r1.doubleValue();

        tableswitch(i0)
        {
            case 82: goto label04;
            case 83: goto label04;
            case 84: goto label01;
            case 85: goto label01;
            case 86: goto label25;
            case 87: goto label25;
            case 88: goto label25;
            case 89: goto label25;
            case 90: goto label07;
            case 91: goto label10;
            case 92: goto label10;
            case 93: goto label13;
            case 94: goto label13;
            case 95: goto label16;
            case 96: goto label25;
            case 97: goto label25;
            case 98: goto label25;
            case 99: goto label25;
            case 100: goto label25;
            case 101: goto label25;
            case 102: goto label19;
            case 103: goto label20;
            case 104: goto label21;
            case 105: goto label22;
            case 106: goto label25;
            case 107: goto label25;
            case 108: goto label25;
            case 109: goto label25;
            case 110: goto label25;
            case 111: goto label23;
            case 112: goto label24;
            case 113: goto label24;
            case 114: goto label24;
            case 115: goto label24;
            case 116: goto label24;
            case 117: goto label24;
            default: goto label25;
        };

     label01:
        $r2 = new java.lang.Boolean;

        $b1 = d0 cmpg d1;

        if $b1 >= 0 goto label02;

        $z0 = 1;

(0)     goto label03;

     label02:
(1)     $z0_1 = 0;

     label03:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        specialinvoke $r2.<init>($z0_2);

        return $r2;

     label04:
        $r13 = new java.lang.Boolean;

        $b6 = d0 cmpl d1;

        if $b6 <= 0 goto label05;

        $z1 = 1;

(2)     goto label06;

     label05:
(3)     $z1_1 = 0;

     label06:
        $z1_2 = Phi($z1 #2, $z1_1 #3);

        specialinvoke $r13.<init>($z1_2);

        return $r13;

     label07:
        $r12 = new java.lang.Boolean;

        $b5 = d0 cmpl d1;

        if $b5 != 0 goto label08;

        $z2 = 1;

(4)     goto label09;

     label08:
(5)     $z2_1 = 0;

     label09:
        $z2_2 = Phi($z2 #4, $z2_1 #5);

        specialinvoke $r12.<init>($z2_2);

        return $r12;

     label10:
        $r11 = new java.lang.Boolean;

        $b4 = d0 cmpg d1;

        if $b4 > 0 goto label11;

        $z3 = 1;

(6)     goto label12;

     label11:
(7)     $z3_1 = 0;

     label12:
        $z3_2 = Phi($z3 #6, $z3_1 #7);

        specialinvoke $r11.<init>($z3_2);

        return $r11;

     label13:
        $r10 = new java.lang.Boolean;

        $b3 = d0 cmpl d1;

        if $b3 < 0 goto label14;

        $z4 = 1;

(8)     goto label15;

     label14:
(9)     $z4_1 = 0;

     label15:
        $z4_2 = Phi($z4 #8, $z4_1 #9);

        specialinvoke $r10.<init>($z4_2);

        return $r10;

     label16:
        $r9 = new java.lang.Boolean;

        $b2 = d0 cmpl d1;

        if $b2 == 0 goto label17;

        $z5 = 1;

(10)    goto label18;

     label17:
(11)    $z5_1 = 0;

     label18:
        $z5_2 = Phi($z5 #10, $z5_1 #11);

        specialinvoke $r9.<init>($z5_2);

        return $r9;

     label19:
        $r8 = new java.lang.Double;

        $d6 = d0 + d1;

        specialinvoke $r8.<init>($d6);

        return $r8;

     label20:
        $r7 = new java.lang.Double;

        $d5 = d0 - d1;

        specialinvoke $r7.<init>($d5);

        return $r7;

     label21:
        $r6 = new java.lang.Double;

        $d4 = d0 * d1;

        specialinvoke $r6.<init>($d4);

        return $r6;

     label22:
        $r5 = new java.lang.Double;

        $d3 = d0 / d1;

        specialinvoke $r5.<init>($d3);

        return $r5;

     label23:
        $r4 = new java.lang.Double;

        $d2 = d0 % d1;

        specialinvoke $r4.<init>($d2);

        return $r4;

     label24:
        $r3 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r3.<init>("Can\'t shift doubles");

        throw $r3;

     label25:
        $r14 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r14.<init>("Unimplemented binary double operator");

        throw $r14;
    }

    static java.lang.Object floatBinaryOperation(java.lang.Float, java.lang.Float, int) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        java.lang.Float r0, r1, $r4, $r5, $r6, $r7, $r8;
        int i0;
        float f0, f1, $f2, $f3, $f4, $f5, $f6;
        java.lang.Boolean $r2, $r9, $r10, $r11, $r12, $r13;
        byte $b1, $b2, $b3, $b4, $b5, $b6;
        org.gjt.sp.jedit.bsh.UtilEvalError $r3;
        org.gjt.sp.jedit.bsh.InterpreterError $r14;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z0_1, $z0_2, $z1_1, $z1_2, $z2_1, $z2_2, $z3_1, $z3_2, $z4_1, $z4_2, $z5_1, $z5_2;

        r0 := @parameter0;

        r1 := @parameter1;

        i0 := @parameter2;

        f0 = r0.floatValue();

        f1 = r1.floatValue();

        tableswitch(i0)
        {
            case 82: goto label04;
            case 83: goto label04;
            case 84: goto label01;
            case 85: goto label01;
            case 86: goto label25;
            case 87: goto label25;
            case 88: goto label25;
            case 89: goto label25;
            case 90: goto label07;
            case 91: goto label10;
            case 92: goto label10;
            case 93: goto label13;
            case 94: goto label13;
            case 95: goto label16;
            case 96: goto label25;
            case 97: goto label25;
            case 98: goto label25;
            case 99: goto label25;
            case 100: goto label25;
            case 101: goto label25;
            case 102: goto label19;
            case 103: goto label20;
            case 104: goto label21;
            case 105: goto label22;
            case 106: goto label25;
            case 107: goto label25;
            case 108: goto label25;
            case 109: goto label25;
            case 110: goto label25;
            case 111: goto label23;
            case 112: goto label24;
            case 113: goto label24;
            case 114: goto label24;
            case 115: goto label24;
            case 116: goto label24;
            case 117: goto label24;
            default: goto label25;
        };

     label01:
        $r2 = new java.lang.Boolean;

        $b1 = f0 cmpg f1;

        if $b1 >= 0 goto label02;

        $z0 = 1;

(0)     goto label03;

     label02:
(1)     $z0_1 = 0;

     label03:
        $z0_2 = Phi($z0 #0, $z0_1 #1);

        specialinvoke $r2.<init>($z0_2);

        return $r2;

     label04:
        $r13 = new java.lang.Boolean;

        $b6 = f0 cmpl f1;

        if $b6 <= 0 goto label05;

        $z1 = 1;

(2)     goto label06;

     label05:
(3)     $z1_1 = 0;

     label06:
        $z1_2 = Phi($z1 #2, $z1_1 #3);

        specialinvoke $r13.<init>($z1_2);

        return $r13;

     label07:
        $r12 = new java.lang.Boolean;

        $b5 = f0 cmpl f1;

        if $b5 != 0 goto label08;

        $z2 = 1;

(4)     goto label09;

     label08:
(5)     $z2_1 = 0;

     label09:
        $z2_2 = Phi($z2 #4, $z2_1 #5);

        specialinvoke $r12.<init>($z2_2);

        return $r12;

     label10:
        $r11 = new java.lang.Boolean;

        $b4 = f0 cmpg f1;

        if $b4 > 0 goto label11;

        $z3 = 1;

(6)     goto label12;

     label11:
(7)     $z3_1 = 0;

     label12:
        $z3_2 = Phi($z3 #6, $z3_1 #7);

        specialinvoke $r11.<init>($z3_2);

        return $r11;

     label13:
        $r10 = new java.lang.Boolean;

        $b3 = f0 cmpl f1;

        if $b3 < 0 goto label14;

        $z4 = 1;

(8)     goto label15;

     label14:
(9)     $z4_1 = 0;

     label15:
        $z4_2 = Phi($z4 #8, $z4_1 #9);

        specialinvoke $r10.<init>($z4_2);

        return $r10;

     label16:
        $r9 = new java.lang.Boolean;

        $b2 = f0 cmpl f1;

        if $b2 == 0 goto label17;

        $z5 = 1;

(10)    goto label18;

     label17:
(11)    $z5_1 = 0;

     label18:
        $z5_2 = Phi($z5 #10, $z5_1 #11);

        specialinvoke $r9.<init>($z5_2);

        return $r9;

     label19:
        $r8 = new java.lang.Float;

        $f6 = f0 + f1;

        specialinvoke $r8.<init>($f6);

        return $r8;

     label20:
        $r7 = new java.lang.Float;

        $f5 = f0 - f1;

        specialinvoke $r7.<init>($f5);

        return $r7;

     label21:
        $r6 = new java.lang.Float;

        $f4 = f0 * f1;

        specialinvoke $r6.<init>($f4);

        return $r6;

     label22:
        $r5 = new java.lang.Float;

        $f3 = f0 / f1;

        specialinvoke $r5.<init>($f3);

        return $r5;

     label23:
        $r4 = new java.lang.Float;

        $f2 = f0 % f1;

        specialinvoke $r4.<init>($f2);

        return $r4;

     label24:
        $r3 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r3.<init>("Can\'t shift floats ");

        throw $r3;

     label25:
        $r14 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r14.<init>("Unimplemented binary float operator");

        throw $r14;
    }

    static java.lang.Object promoteToInteger(java.lang.Object)
    {
        java.lang.Object r0;
        boolean $z0, $z1, $z2;
        java.lang.Integer $r1, $r3;
        java.lang.Number $r2;
        int $i0;
        java.lang.Character $r4;
        char $c1;

        r0 := @parameter0;

        $z0 = r0 instanceof java.lang.Character;

        if $z0 == 0 goto label1;

        $r3 = new java.lang.Integer;

        $r4 = (java.lang.Character) r0;

        $c1 = $r4.charValue();

        specialinvoke $r3.<init>($c1);

        return $r3;

     label1:
        $z1 = r0 instanceof java.lang.Byte;

        if $z1 != 0 goto label2;

        $z2 = r0 instanceof java.lang.Short;

        if $z2 == 0 goto label3;

     label2:
        $r1 = new java.lang.Integer;

        $r2 = (java.lang.Number) r0;

        $i0 = $r2.intValue();

        specialinvoke $r1.<init>($i0);

        return $r1;

     label3:
        return r0;
    }

    static java.lang.Object[] promotePrimitives(java.lang.Object, java.lang.Object)
    {
        java.lang.Number r0, r1;
        boolean $z0, $z1, $z2, $z3, $z4, $z5, $z6, $z7, z8, z9, z10;
        java.lang.Object[] $r2;
        java.lang.Double $r3, $r4;
        double $d0, $d1;
        java.lang.Float $r5, $r6;
        float $f0, $f1;
        java.lang.Long $r7, $r8;
        long $l0, $l1;
        java.lang.Object r9, r10, r11, r12, r12_1, r11_1, r12_2, r11_2, r12_3, r11_3, r11_4, r12_4;

        r9 := @parameter0;

        r10 := @parameter1;

        r11 = org.gjt.sp.jedit.bsh.Primitive.promoteToInteger(r9);

        r12 = org.gjt.sp.jedit.bsh.Primitive.promoteToInteger(r10);

        $z0 = r11 instanceof java.lang.Number;

(0)     if $z0 == 0 goto label9;

        $z1 = r12 instanceof java.lang.Number;

(1)     if $z1 == 0 goto label9;

        r0 = (java.lang.Number) r11;

        r1 = (java.lang.Number) r12;

        $z2 = r0 instanceof java.lang.Double;

        z8 = $z2;

        if $z2 != 0 goto label1;

        $z3 = r1 instanceof java.lang.Double;

        if $z3 == 0 goto label3;

     label1:
        if z8 == 0 goto label2;

        $r4 = new java.lang.Double;

        $d1 = r1.doubleValue();

        specialinvoke $r4.<init>($d1);

        r12_3 = $r4;

(2)     goto label9;

     label2:
        $r3 = new java.lang.Double;

        $d0 = r0.doubleValue();

        specialinvoke $r3.<init>($d0);

        r11_3 = $r3;

(3)     goto label9;

     label3:
        $z4 = r0 instanceof java.lang.Float;

        z9 = $z4;

        if $z4 != 0 goto label4;

        $z5 = r1 instanceof java.lang.Float;

        if $z5 == 0 goto label6;

     label4:
        if z9 == 0 goto label5;

        $r6 = new java.lang.Float;

        $f1 = r1.floatValue();

        specialinvoke $r6.<init>($f1);

        r12_2 = $r6;

(4)     goto label9;

     label5:
        $r5 = new java.lang.Float;

        $f0 = r0.floatValue();

        specialinvoke $r5.<init>($f0);

        r11_2 = $r5;

(5)     goto label9;

     label6:
        $z6 = r0 instanceof java.lang.Long;

        z10 = $z6;

        if $z6 != 0 goto label7;

        $z7 = r1 instanceof java.lang.Long;

(6)     if $z7 == 0 goto label9;

     label7:
        if z10 == 0 goto label8;

        $r8 = new java.lang.Long;

        $l1 = r1.longValue();

        specialinvoke $r8.<init>($l1);

        r12_1 = $r8;

(7)     goto label9;

     label8:
        $r7 = new java.lang.Long;

        $l0 = r0.longValue();

        specialinvoke $r7.<init>($l0);

(8)     r11_1 = $r7;

     label9:
        r11_4 = Phi(r11 #0, r11 #1, r11 #2, r11_3 #3, r11 #4, r11_2 #5, r11 #6, r11 #7, r11_1 #8);

        r12_4 = Phi(r12 #0, r12 #1, r12_3 #2, r12 #3, r12_2 #4, r12 #5, r12 #6, r12_1 #7, r12 #8);

        $r2 = newarray (java.lang.Object)[2];

        $r2[0] = r11_4;

        $r2[1] = r12_4;

        return $r2;
    }

    public static org.gjt.sp.jedit.bsh.Primitive unaryOperation(org.gjt.sp.jedit.bsh.Primitive, int) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Primitive r0, $r3, $r4, $r7, $r9, $r11, $r17, $r18, $r19, $r20, $r21;
        int i0, i1;
        java.lang.Class r1, $r14, $r15, $r16;
        java.lang.Object r2, $r5;
        boolean $z0, $z1, $z2, $z3, $z4, $z5;
        org.gjt.sp.jedit.bsh.InterpreterError $r6;
        java.lang.Double $r8;
        double $d0;
        java.lang.Float $r10;
        float $f0;
        java.lang.Long $r12;
        long $l2;
        java.lang.Integer $r13;
        char $c3;
        short $s4;
        byte $b5;
        java.lang.Boolean $r22;
        org.gjt.sp.jedit.bsh.UtilEvalError $r23, $r24;

        r0 := @parameter0;

        i0 := @parameter1;

        $r3 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r0 != $r3 goto label01;

        $r24 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r24.<init>("illegal use of null object or \'null\' literal");

        throw $r24;

     label01:
        $r4 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r0 != $r4 goto label02;

        $r23 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r23.<init>("illegal use of undefined object or \'void\' literal");

        throw $r23;

     label02:
        r1 = r0.getType();

        $r5 = r0.getValue();

        r2 = org.gjt.sp.jedit.bsh.Primitive.promoteToInteger($r5);

        $z0 = r2 instanceof java.lang.Boolean;

        if $z0 == 0 goto label03;

        $r21 = new org.gjt.sp.jedit.bsh.Primitive;

        $r22 = (java.lang.Boolean) r2;

        $z5 = org.gjt.sp.jedit.bsh.Primitive.booleanUnaryOperation($r22, i0);

        specialinvoke $r21.<init>($z5);

        return $r21;

     label03:
        $z1 = r2 instanceof java.lang.Integer;

        if $z1 == 0 goto label08;

        $r13 = (java.lang.Integer) r2;

        i1 = org.gjt.sp.jedit.bsh.Primitive.intUnaryOperation($r13, i0);

        if i0 == 100 goto label04;

        if i0 != 101 goto label07;

     label04:
        $r14 = java.lang.Byte.TYPE;

        if r1 != $r14 goto label05;

        $r20 = new org.gjt.sp.jedit.bsh.Primitive;

        $b5 = (byte) i1;

        specialinvoke $r20.<init>($b5);

        return $r20;

     label05:
        $r15 = java.lang.Short.TYPE;

        if r1 != $r15 goto label06;

        $r19 = new org.gjt.sp.jedit.bsh.Primitive;

        $s4 = (short) i1;

        specialinvoke $r19.<init>($s4);

        return $r19;

     label06:
        $r16 = java.lang.Character.TYPE;

        if r1 != $r16 goto label07;

        $r18 = new org.gjt.sp.jedit.bsh.Primitive;

        $c3 = (char) i1;

        specialinvoke $r18.<init>($c3);

        return $r18;

     label07:
        $r17 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r17.<init>(i1);

        return $r17;

     label08:
        $z2 = r2 instanceof java.lang.Long;

        if $z2 == 0 goto label09;

        $r11 = new org.gjt.sp.jedit.bsh.Primitive;

        $r12 = (java.lang.Long) r2;

        $l2 = org.gjt.sp.jedit.bsh.Primitive.longUnaryOperation($r12, i0);

        specialinvoke $r11.<init>($l2);

        return $r11;

     label09:
        $z3 = r2 instanceof java.lang.Float;

        if $z3 == 0 goto label10;

        $r9 = new org.gjt.sp.jedit.bsh.Primitive;

        $r10 = (java.lang.Float) r2;

        $f0 = org.gjt.sp.jedit.bsh.Primitive.floatUnaryOperation($r10, i0);

        specialinvoke $r9.<init>($f0);

        return $r9;

     label10:
        $z4 = r2 instanceof java.lang.Double;

        if $z4 == 0 goto label11;

        $r7 = new org.gjt.sp.jedit.bsh.Primitive;

        $r8 = (java.lang.Double) r2;

        $d0 = org.gjt.sp.jedit.bsh.Primitive.doubleUnaryOperation($r8, i0);

        specialinvoke $r7.<init>($d0);

        return $r7;

     label11:
        $r6 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r6.<init>("An error occurred.  Please call technical support.");

        throw $r6;
    }

    static boolean booleanUnaryOperation(java.lang.Boolean, int) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        java.lang.Boolean r0;
        int i0;
        boolean z0, $z1, $z1_1, $z1_2;
        org.gjt.sp.jedit.bsh.UtilEvalError $r1;

        r0 := @parameter0;

        i0 := @parameter1;

        z0 = r0.booleanValue();

        lookupswitch(i0)
        {
            case 86: goto label1;
            default: goto label4;
        };

     label1:
        if z0 != 0 goto label2;

        $z1 = 1;

(0)     goto label3;

     label2:
(1)     $z1_1 = 0;

     label3:
        $z1_2 = Phi($z1 #0, $z1_1 #1);

        return $z1_2;

     label4:
        $r1 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r1.<init>("Operator inappropriate for boolean");

        throw $r1;
    }

    static int intUnaryOperation(java.lang.Integer, int)
    {
        java.lang.Integer r0;
        int i0, i1, $i2, $i3, $i4, $i5;
        org.gjt.sp.jedit.bsh.InterpreterError $r1;

        r0 := @parameter0;

        i0 := @parameter1;

        i1 = r0.intValue();

        lookupswitch(i0)
        {
            case 87: goto label3;
            case 100: goto label4;
            case 101: goto label5;
            case 102: goto label1;
            case 103: goto label2;
            default: goto label6;
        };

     label1:
        return i1;

     label2:
        $i2 = neg i1;

        return $i2;

     label3:
        $i5 = i1 ^ -1;

        return $i5;

     label4:
        $i4 = i1 + 1;

        return $i4;

     label5:
        $i3 = i1 - 1;

        return $i3;

     label6:
        $r1 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r1.<init>("bad integer unaryOperation");

        throw $r1;
    }

    static long longUnaryOperation(java.lang.Long, int)
    {
        java.lang.Long r0;
        int i0;
        long l1, $l2, $l3, $l4, $l5;
        org.gjt.sp.jedit.bsh.InterpreterError $r1;

        r0 := @parameter0;

        i0 := @parameter1;

        l1 = r0.longValue();

        lookupswitch(i0)
        {
            case 87: goto label3;
            case 100: goto label4;
            case 101: goto label5;
            case 102: goto label1;
            case 103: goto label2;
            default: goto label6;
        };

     label1:
        return l1;

     label2:
        $l2 = neg l1;

        return $l2;

     label3:
        $l5 = l1 ^ -1L;

        return $l5;

     label4:
        $l4 = l1 + 1L;

        return $l4;

     label5:
        $l3 = l1 - 1L;

        return $l3;

     label6:
        $r1 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r1.<init>("bad long unaryOperation");

        throw $r1;
    }

    static float floatUnaryOperation(java.lang.Float, int)
    {
        java.lang.Float r0;
        int i0;
        float f0, $f1;
        org.gjt.sp.jedit.bsh.InterpreterError $r1;

        r0 := @parameter0;

        i0 := @parameter1;

        f0 = r0.floatValue();

        lookupswitch(i0)
        {
            case 102: goto label1;
            case 103: goto label2;
            default: goto label3;
        };

     label1:
        return f0;

     label2:
        $f1 = neg f0;

        return $f1;

     label3:
        $r1 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r1.<init>("bad float unaryOperation");

        throw $r1;
    }

    static double doubleUnaryOperation(java.lang.Double, int)
    {
        java.lang.Double r0;
        int i0;
        double d0, $d1;
        org.gjt.sp.jedit.bsh.InterpreterError $r1;

        r0 := @parameter0;

        i0 := @parameter1;

        d0 = r0.doubleValue();

        lookupswitch(i0)
        {
            case 102: goto label1;
            case 103: goto label2;
            default: goto label3;
        };

     label1:
        return d0;

     label2:
        $d1 = neg d0;

        return $d1;

     label3:
        $r1 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r1.<init>("bad double unaryOperation");

        throw $r1;
    }

    public int intValue() throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        java.lang.Object $r1, $r3;
        boolean $z0;
        org.gjt.sp.jedit.bsh.UtilEvalError $r2;
        java.lang.Number $r4;
        int $i0;

        r0 := @this;

        $r1 = r0.value;

        $z0 = $r1 instanceof java.lang.Number;

        if $z0 == 0 goto label1;

        $r3 = r0.value;

        $r4 = (java.lang.Number) $r3;

        $i0 = $r4.intValue();

        return $i0;

     label1:
        $r2 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r2.<init>("Primitive not a number");

        throw $r2;
    }

    public boolean booleanValue() throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        java.lang.Object $r1, $r3;
        boolean $z0, $z1;
        org.gjt.sp.jedit.bsh.UtilEvalError $r2;
        java.lang.Boolean $r4;

        r0 := @this;

        $r1 = r0.value;

        $z0 = $r1 instanceof java.lang.Boolean;

        if $z0 == 0 goto label1;

        $r3 = r0.value;

        $r4 = (java.lang.Boolean) $r3;

        $z1 = $r4.booleanValue();

        return $z1;

     label1:
        $r2 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r2.<init>("Primitive not a boolean");

        throw $r2;
    }

    public boolean isNumber()
    {
        org.gjt.sp.jedit.bsh.Primitive r0, $r2, $r3;
        java.lang.Object $r1;
        boolean $z0, $z1, $z1_1, $z1_2;

        r0 := @this;

        $r1 = r0.value;

        $z0 = $r1 instanceof java.lang.Boolean;

        if $z0 != 0 goto label1;

        $r2 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r0 == $r2 goto label1;

        $r3 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r0 == $r3 goto label1;

        $z1 = 1;

(0)     goto label2;

     label1:
(1)     $z1_1 = 0;

     label2:
        $z1_2 = Phi($z1 #0, $z1_1 #1);

        return $z1_2;
    }

    public java.lang.Number numberValue() throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        boolean $z0, $z1;
        org.gjt.sp.jedit.bsh.UtilEvalError $r1;
        java.lang.Number $r2;
        java.lang.Integer $r3;
        java.lang.Character $r4;
        char $c0;
        java.lang.Object r5, r5_1, r5_2;

        r0 := @this;

        r5 = r0.value;

        $z0 = r5 instanceof java.lang.Character;

(0)     if $z0 == 0 goto label1;

        $r3 = new java.lang.Integer;

        $r4 = (java.lang.Character) r5;

        $c0 = $r4.charValue();

        specialinvoke $r3.<init>($c0);

(1)     r5_1 = $r3;

     label1:
        r5_2 = Phi(r5 #0, r5_1 #1);

        $z1 = r5_2 instanceof java.lang.Number;

        if $z1 == 0 goto label2;

        $r2 = (java.lang.Number) r5_2;

        return $r2;

     label2:
        $r1 = new org.gjt.sp.jedit.bsh.UtilEvalError;

        specialinvoke $r1.<init>("Primitive not a number");

        throw $r1;
    }

    public boolean equals(java.lang.Object)
    {
        org.gjt.sp.jedit.bsh.Primitive r0, $r2;
        java.lang.Object r1, $r3, $r4;
        boolean $z0, $z1;

        r0 := @this;

        r1 := @parameter0;

        $z0 = r1 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z0 == 0 goto label1;

        $r2 = (org.gjt.sp.jedit.bsh.Primitive) r1;

        $r4 = $r2.value;

        $r3 = r0.value;

        $z1 = $r4.equals($r3);

        return $z1;

     label1:
        return 0;
    }

    public int hashCode()
    {
        org.gjt.sp.jedit.bsh.Primitive r0;
        java.lang.Object $r1;
        int $i0, $i1;

        r0 := @this;

        $r1 = r0.value;

        $i0 = $r1.hashCode();

        $i1 = $i0 * 21;

        return $i1;
    }

    public static java.lang.Object unwrap(java.lang.Object)
    {
        java.lang.Object r0, $r3;
        org.gjt.sp.jedit.bsh.Primitive $r1, $r2;
        boolean $z0;

        r0 := @parameter0;

        $r1 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r0 != $r1 goto label1;

        return null;

     label1:
        $z0 = r0 instanceof org.gjt.sp.jedit.bsh.Primitive;

        if $z0 == 0 goto label2;

        $r2 = (org.gjt.sp.jedit.bsh.Primitive) r0;

        $r3 = $r2.getValue();

        return $r3;

     label2:
        return r0;
    }

    public static java.lang.Object[] unwrap(java.lang.Object[])
    {
        java.lang.Object[] r0, r1;
        int $i0, $i1, i2;
        java.lang.Object $r2, $r3;

        r0 := @parameter0;

        $i0 = lengthof r0;

        r1 = newarray (java.lang.Object)[$i0];

(0)     i2 = 0;

     label1:
        i2 = Phi(i2 #0, i2 #1);

        $i1 = lengthof r0;

        if i2 >= $i1 goto label2;

        $r2 = r0[i2];

        $r3 = org.gjt.sp.jedit.bsh.Primitive.unwrap($r2);

        r1[i2] = $r3;

        i2 = i2 + 1;

(1)     goto label1;

     label2:
        return r1;
    }

    public static java.lang.Object[] wrap(java.lang.Object[], java.lang.Class[])
    {
        java.lang.Object[] r0, r2;
        java.lang.Class[] r1;
        int $i0, $i1, i2;
        java.lang.Class $r3;
        java.lang.Object $r4, $r5;

        r0 := @parameter0;

        r1 := @parameter1;

        if r0 != null goto label1;

        return null;

     label1:
        $i0 = lengthof r0;

        r2 = newarray (java.lang.Object)[$i0];

(0)     i2 = 0;

     label2:
        i2 = Phi(i2 #0, i2 #1);

        $i1 = lengthof r0;

        if i2 >= $i1 goto label3;

        $r4 = r0[i2];

        $r3 = r1[i2];

        $r5 = org.gjt.sp.jedit.bsh.Primitive.wrap($r4, $r3);

        r2[i2] = $r5;

        i2 = i2 + 1;

(1)     goto label2;

     label3:
        return r2;
    }

    public static java.lang.Object wrap(java.lang.Object, java.lang.Class)
    {
        java.lang.Object r0;
        java.lang.Class r1, $r2;
        boolean $z0;
        org.gjt.sp.jedit.bsh.Primitive $r3, $r4, $r5;

        r0 := @parameter0;

        r1 := @parameter1;

        $r2 = java.lang.Void.TYPE;

        if r1 != $r2 goto label1;

        $r5 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        return $r5;

     label1:
        if r0 != null goto label2;

        $r4 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        return $r4;

     label2:
        $z0 = r1.isPrimitive();

        if $z0 == 0 goto label3;

        $r3 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r3.<init>(r0);

        return $r3;

     label3:
        return r0;
    }

    public static org.gjt.sp.jedit.bsh.Primitive getDefaultValue(java.lang.Class)
    {
        java.lang.Class r0, $r3;
        org.gjt.sp.jedit.bsh.UtilEvalError r1, $r7;
        org.gjt.sp.jedit.bsh.Primitive $r2, $r4, $r5, $r6;
        boolean $z0;
        org.gjt.sp.jedit.bsh.InterpreterError $r8;

        r0 := @parameter0;

        if r0 == null goto label1;

        $z0 = r0.isPrimitive();

        if $z0 != 0 goto label2;

     label1:
        $r2 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        return $r2;

     label2:
        $r3 = java.lang.Boolean.TYPE;

        if r0 != $r3 goto label3;

        $r6 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r6.<init>(0);

        return $r6;

     label3:
        $r4 = new org.gjt.sp.jedit.bsh.Primitive;

        specialinvoke $r4.<init>(0);

        $r5 = $r4.castToType(r0, 0);

     label4:
        return $r5;

     label5:
        $r7 := @caughtexception;

        r1 = $r7;

        $r8 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r8.<init>("bad cast");

        throw $r8;

        catch org.gjt.sp.jedit.bsh.UtilEvalError from label3 to label4 with label5;
    }

    public static java.lang.Class boxType(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.gjt.sp.jedit.bsh.InterpreterError $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @parameter0;

        $r2 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r3 = $r2.get(r0);

        r1 = (java.lang.Class) $r3;

        if r1 == null goto label1;

        return r1;

     label1:
        $r4 = new org.gjt.sp.jedit.bsh.InterpreterError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<init>();

        $r6 = $r5.append("Not a primitive type: ");

        $r7 = $r6.append(r0);

        $r8 = $r7.toString();

        specialinvoke $r4.<init>($r8);

        throw $r4;
    }

    public static java.lang.Class unboxType(java.lang.Class)
    {
        java.lang.Class r0, r1;
        java.util.Hashtable $r2;
        java.lang.Object $r3;
        org.gjt.sp.jedit.bsh.InterpreterError $r4;
        java.lang.StringBuilder $r5, $r6, $r7;
        java.lang.String $r8;

        r0 := @parameter0;

        $r2 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r3 = $r2.get(r0);

        r1 = (java.lang.Class) $r3;

        if r1 == null goto label1;

        return r1;

     label1:
        $r4 = new org.gjt.sp.jedit.bsh.InterpreterError;

        $r5 = new java.lang.StringBuilder;

        specialinvoke $r5.<init>();

        $r6 = $r5.append("Not a primitive wrapper type: ");

        $r7 = $r6.append(r0);

        $r8 = $r7.toString();

        specialinvoke $r4.<init>($r8);

        throw $r4;
    }

    public org.gjt.sp.jedit.bsh.Primitive castToType(java.lang.Class, int) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        org.gjt.sp.jedit.bsh.Primitive r0, $r3;
        java.lang.Class r1, $r2;
        int i0;

        r0 := @this;

        r1 := @parameter0;

        i0 := @parameter1;

        $r2 = r0.getType();

        $r3 = org.gjt.sp.jedit.bsh.Primitive.castPrimitive(r1, $r2, r0, 0, i0);

        return $r3;
    }

    static org.gjt.sp.jedit.bsh.Primitive castPrimitive(java.lang.Class, java.lang.Class, org.gjt.sp.jedit.bsh.Primitive, boolean, int) throws org.gjt.sp.jedit.bsh.UtilEvalError
    {
        java.lang.Class r0, r1, $r5, $r12, $r16, $r28;
        org.gjt.sp.jedit.bsh.Primitive r2, $r3, $r4, $r11, $r15, $r18, $r24, $r27, $r39, $r40, $r41, $r40_1, $r40_2, $r41_1, $r41_2, $r39_1, $r39_2;
        boolean z0, $z1, $z2, $z3;
        int i0;
        java.lang.StringBuilder $r6, $r7, $r8, $r19, $r20, $r21, $r32, $r33, $r34;
        java.lang.String $r9, $r22, $r25, $r35;
        org.gjt.sp.jedit.bsh.UtilEvalError $r10, $r14, $r17, $r23, $r26;
        java.lang.Object $r13, r38, r38_1, r38_2;
        org.gjt.sp.jedit.bsh.InterpreterError $r29, $r30, $r31, $r36, $r37;

        r0 := @parameter0;

        r1 := @parameter1;

        r2 := @parameter2;

        z0 := @parameter3;

        i0 := @parameter4;

        if z0 == 0 goto label01;

        if r2 == null goto label01;

        $r37 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r37.<init>("bad cast param 1");

        throw $r37;

     label01:
        if z0 != 0 goto label02;

        if r2 != null goto label02;

        $r36 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r36.<init>("bad cast param 2");

        throw $r36;

     label02:
        if r1 == null goto label03;

        $z3 = r1.isPrimitive();

        if $z3 != 0 goto label03;

        $r31 = new org.gjt.sp.jedit.bsh.InterpreterError;

        $r32 = new java.lang.StringBuilder;

        specialinvoke $r32.<init>();

        $r33 = $r32.append("bad fromType:");

        $r34 = $r33.append(r1);

        $r35 = $r34.toString();

        specialinvoke $r31.<init>($r35);

        throw $r31;

     label03:
        $r3 = org.gjt.sp.jedit.bsh.Primitive.NULL;

        if r2 != $r3 goto label04;

        if r1 == null goto label04;

        $r30 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r30.<init>("inconsistent args 1");

        throw $r30;

     label04:
        $r4 = org.gjt.sp.jedit.bsh.Primitive.VOID;

        if r2 != $r4 goto label05;

        $r28 = java.lang.Void.TYPE;

        if r1 == $r28 goto label05;

        $r29 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r29.<init>("inconsistent args 2");

        throw $r29;

     label05:
        $r5 = java.lang.Void.TYPE;

        if r1 != $r5 goto label07;

        if z0 == 0 goto label06;

        $r27 = org.gjt.sp.jedit.bsh.Types.INVALID_CAST;

        return $r27;

     label06:
        $r25 = org.gjt.sp.jedit.bsh.Reflect.normalizeClassName(r0);

        $r26 = org.gjt.sp.jedit.bsh.Types.castError($r25, "void value", i0);

        throw $r26;

     label07:
        r38 = null;

(0)     if r2 == null goto label08;

(1)     r38_1 = r2.getValue();

     label08:
        r38_2 = Phi(r38 #0, r38_1 #1);

        $z1 = r0.isPrimitive();

        if $z1 == 0 goto label10;

        if r1 != null goto label15;

        if z0 == 0 goto label09;

        $r24 = org.gjt.sp.jedit.bsh.Types.INVALID_CAST;

        return $r24;

     label09:
        $r19 = new java.lang.StringBuilder;

        specialinvoke $r19.<init>();

        $r20 = $r19.append("primitive type:");

        $r21 = $r20.append(r0);

        $r22 = $r21.toString();

        $r23 = org.gjt.sp.jedit.bsh.Types.castError($r22, "Null value", i0);

        throw $r23;

     label10:
        if r1 != null goto label13;

        if z0 == 0 goto label11;

        $r39 = org.gjt.sp.jedit.bsh.Types.VALID_CAST;

(2)     goto label12;

     label11:
(3)     $r39_1 = org.gjt.sp.jedit.bsh.Primitive.NULL;

     label12:
        $r39_2 = Phi($r39 #2, $r39_1 #3);

        return $r39_2;

     label13:
        if z0 == 0 goto label14;

        $r11 = org.gjt.sp.jedit.bsh.Types.INVALID_CAST;

        return $r11;

     label14:
        $r6 = new java.lang.StringBuilder;

        specialinvoke $r6.<init>();

        $r7 = $r6.append("object type:");

        $r8 = $r7.append(r0);

        $r9 = $r8.toString();

        $r10 = org.gjt.sp.jedit.bsh.Types.castError($r9, "primitive value", i0);

        throw $r10;

     label15:
        $r12 = java.lang.Boolean.TYPE;

        if r1 != $r12 goto label20;

        $r16 = java.lang.Boolean.TYPE;

        if r0 == $r16 goto label17;

        if z0 == 0 goto label16;

        $r18 = org.gjt.sp.jedit.bsh.Types.INVALID_CAST;

        return $r18;

     label16:
        $r17 = org.gjt.sp.jedit.bsh.Types.castError(r0, r1, i0);

        throw $r17;

     label17:
        if z0 == 0 goto label18;

        $r40 = org.gjt.sp.jedit.bsh.Types.VALID_CAST;

(4)     goto label19;

     label18:
(5)     $r40_1 = r2;

     label19:
        $r40_2 = Phi($r40 #4, $r40_1 #5);

        return $r40_2;

     label20:
        if i0 != 1 goto label22;

        $z2 = org.gjt.sp.jedit.bsh.Types.isJavaAssignable(r0, r1);

        if $z2 != 0 goto label22;

        if z0 == 0 goto label21;

        $r15 = org.gjt.sp.jedit.bsh.Types.INVALID_CAST;

        return $r15;

     label21:
        $r14 = org.gjt.sp.jedit.bsh.Types.castError(r0, r1, i0);

        throw $r14;

     label22:
        if z0 == 0 goto label23;

        $r41 = org.gjt.sp.jedit.bsh.Types.VALID_CAST;

(6)     goto label24;

     label23:
        $r41_1 = new org.gjt.sp.jedit.bsh.Primitive;

        $r13 = org.gjt.sp.jedit.bsh.Primitive.castWrapper(r0, r38_2);

(7)     specialinvoke $r41_1.<init>($r13);

     label24:
        $r41_2 = Phi($r41 #6, $r41_1 #7);

        return $r41_2;
    }

    public static boolean isWrapperType(java.lang.Class)
    {
        java.lang.Class r0;
        java.util.Hashtable $r1;
        java.lang.Object $r2;
        boolean $z0, $z1, $z1_1, $z1_2;

        r0 := @parameter0;

        $r1 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r2 = $r1.get(r0);

        if $r2 == null goto label1;

        $z0 = r0.isPrimitive();

        if $z0 != 0 goto label1;

        $z1 = 1;

(0)     goto label2;

     label1:
(1)     $z1_1 = 0;

     label2:
        $z1_2 = Phi($z1 #0, $z1_1 #1);

        return $z1_2;
    }

    static java.lang.Object castWrapper(java.lang.Class, java.lang.Object)
    {
        java.lang.Class r0, $r2, $r3, $r4, $r5, $r6, $r7, $r8, $r20;
        java.lang.Number r1;
        boolean $z0, $z1, $z2, $z3;
        org.gjt.sp.jedit.bsh.InterpreterError $r9, $r17, $r21, $r22, $r23;
        java.lang.Double $r10;
        double $d0;
        java.lang.Float $r11;
        float $f0;
        java.lang.Long $r12;
        long $l0;
        java.lang.Integer $r13, $r18;
        int $i1, $i2;
        java.lang.Character $r14, $r19;
        char $c3, $c6;
        java.lang.Short $r15;
        short $s4;
        java.lang.Byte $r16;
        byte $b5;
        java.lang.StringBuilder $r24, $r25, $r26;
        java.lang.String $r27;
        java.lang.Object r28, r28_1, r28_2;

        r0 := @parameter0;

        r28 := @parameter1;

        $z0 = r0.isPrimitive();

        if $z0 != 0 goto label01;

        $r23 = new org.gjt.sp.jedit.bsh.InterpreterError;

        $r24 = new java.lang.StringBuilder;

        specialinvoke $r24.<init>();

        $r25 = $r24.append("invalid type in castWrapper: ");

        $r26 = $r25.append(r0);

        $r27 = $r26.toString();

        specialinvoke $r23.<init>($r27);

        throw $r23;

     label01:
        if r28 != null goto label02;

        $r22 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r22.<init>("null value in castWrapper, guard");

        throw $r22;

     label02:
        $z1 = r28 instanceof java.lang.Boolean;

        if $z1 == 0 goto label04;

        $r20 = java.lang.Boolean.TYPE;

        if r0 == $r20 goto label03;

        $r21 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r21.<init>("bad wrapper cast of boolean");

        throw $r21;

     label03:
        return r28;

     label04:
        $z2 = r28 instanceof java.lang.Character;

(0)     if $z2 == 0 goto label05;

        $r18 = new java.lang.Integer;

        $r19 = (java.lang.Character) r28;

        $c6 = $r19.charValue();

        specialinvoke $r18.<init>($c6);

(1)     r28_1 = $r18;

     label05:
        r28_2 = Phi(r28 #0, r28_1 #1);

        $z3 = r28_2 instanceof java.lang.Number;

        if $z3 != 0 goto label06;

        $r17 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r17.<init>("bad type in cast");

        throw $r17;

     label06:
        r1 = (java.lang.Number) r28_2;

        $r2 = java.lang.Byte.TYPE;

        if r0 != $r2 goto label07;

        $r16 = new java.lang.Byte;

        $b5 = r1.byteValue();

        specialinvoke $r16.<init>($b5);

        return $r16;

     label07:
        $r3 = java.lang.Short.TYPE;

        if r0 != $r3 goto label08;

        $r15 = new java.lang.Short;

        $s4 = r1.shortValue();

        specialinvoke $r15.<init>($s4);

        return $r15;

     label08:
        $r4 = java.lang.Character.TYPE;

        if r0 != $r4 goto label09;

        $r14 = new java.lang.Character;

        $i2 = r1.intValue();

        $c3 = (char) $i2;

        specialinvoke $r14.<init>($c3);

        return $r14;

     label09:
        $r5 = java.lang.Integer.TYPE;

        if r0 != $r5 goto label10;

        $r13 = new java.lang.Integer;

        $i1 = r1.intValue();

        specialinvoke $r13.<init>($i1);

        return $r13;

     label10:
        $r6 = java.lang.Long.TYPE;

        if r0 != $r6 goto label11;

        $r12 = new java.lang.Long;

        $l0 = r1.longValue();

        specialinvoke $r12.<init>($l0);

        return $r12;

     label11:
        $r7 = java.lang.Float.TYPE;

        if r0 != $r7 goto label12;

        $r11 = new java.lang.Float;

        $f0 = r1.floatValue();

        specialinvoke $r11.<init>($f0);

        return $r11;

     label12:
        $r8 = java.lang.Double.TYPE;

        if r0 != $r8 goto label13;

        $r10 = new java.lang.Double;

        $d0 = r1.doubleValue();

        specialinvoke $r10.<init>($d0);

        return $r10;

     label13:
        $r9 = new org.gjt.sp.jedit.bsh.InterpreterError;

        specialinvoke $r9.<init>("error in wrapper cast");

        throw $r9;
    }

    static void <clinit>()
    {
        java.util.Hashtable $r0, $r2, $r5, $r8, $r11, $r14, $r17, $r20, $r23, $r26, $r29, $r32, $r35, $r38, $r41, $r44, $r47;
        java.lang.Class $r1, $r4, $r7, $r10, $r13, $r16, $r19, $r22, $r25, $r28, $r31, $r34, $r37, $r40, $r43, $r46;
        org.gjt.sp.jedit.bsh.Primitive $r49, $r51;
        org.gjt.sp.jedit.bsh.Primitive$Special $r50, $r52;

        $r0 = new java.util.Hashtable;

        specialinvoke $r0.<init>();

        org.gjt.sp.jedit.bsh.Primitive.wrapperMap = $r0;

        $r2 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r1 = java.lang.Boolean.TYPE;

        $r2.put($r1, class "java/lang/Boolean");

        $r5 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r4 = java.lang.Byte.TYPE;

        $r5.put($r4, class "java/lang/Byte");

        $r8 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r7 = java.lang.Short.TYPE;

        $r8.put($r7, class "java/lang/Short");

        $r11 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r10 = java.lang.Character.TYPE;

        $r11.put($r10, class "java/lang/Character");

        $r14 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r13 = java.lang.Integer.TYPE;

        $r14.put($r13, class "java/lang/Integer");

        $r17 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r16 = java.lang.Long.TYPE;

        $r17.put($r16, class "java/lang/Long");

        $r20 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r19 = java.lang.Float.TYPE;

        $r20.put($r19, class "java/lang/Float");

        $r23 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r22 = java.lang.Double.TYPE;

        $r23.put($r22, class "java/lang/Double");

        $r26 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r25 = java.lang.Boolean.TYPE;

        $r26.put(class "java/lang/Boolean", $r25);

        $r29 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r28 = java.lang.Byte.TYPE;

        $r29.put(class "java/lang/Byte", $r28);

        $r32 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r31 = java.lang.Short.TYPE;

        $r32.put(class "java/lang/Short", $r31);

        $r35 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r34 = java.lang.Character.TYPE;

        $r35.put(class "java/lang/Character", $r34);

        $r38 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r37 = java.lang.Integer.TYPE;

        $r38.put(class "java/lang/Integer", $r37);

        $r41 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r40 = java.lang.Long.TYPE;

        $r41.put(class "java/lang/Long", $r40);

        $r44 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r43 = java.lang.Float.TYPE;

        $r44.put(class "java/lang/Float", $r43);

        $r47 = org.gjt.sp.jedit.bsh.Primitive.wrapperMap;

        $r46 = java.lang.Double.TYPE;

        $r47.put(class "java/lang/Double", $r46);

        $r49 = new org.gjt.sp.jedit.bsh.Primitive;

        $r50 = org.gjt.sp.jedit.bsh.Primitive$Special.NULL_VALUE;

        specialinvoke $r49.<init>($r50);

        org.gjt.sp.jedit.bsh.Primitive.NULL = $r49;

        $r51 = new org.gjt.sp.jedit.bsh.Primitive;

        $r52 = org.gjt.sp.jedit.bsh.Primitive$Special.VOID_TYPE;

        specialinvoke $r51.<init>($r52);

        org.gjt.sp.jedit.bsh.Primitive.VOID = $r51;

        return;
    }
}
