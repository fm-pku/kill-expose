class org.gjt.sp.jedit.bsh.BSHTernaryExpression extends org.gjt.sp.jedit.bsh.SimpleNode
{

    void <init>(int)
    {
        org.gjt.sp.jedit.bsh.BSHTernaryExpression r0;
        int i0;

        r0 := @this;

        i0 := @parameter0;

        specialinvoke r0.<init>(i0);

        return;
    }

    public java.lang.Object eval(org.gjt.sp.jedit.bsh.CallStack, org.gjt.sp.jedit.bsh.Interpreter) throws org.gjt.sp.jedit.bsh.EvalError
    {
        org.gjt.sp.jedit.bsh.BSHTernaryExpression r0;
        org.gjt.sp.jedit.bsh.CallStack r1;
        org.gjt.sp.jedit.bsh.Interpreter r2;
        org.gjt.sp.jedit.bsh.SimpleNode r3, r4, r5;
        org.gjt.sp.jedit.bsh.Node $r6, $r7, $r8;
        boolean $z0;
        java.lang.Object $r9, $r10;

        r0 := @this;

        r1 := @parameter0;

        r2 := @parameter1;

        $r6 = r0.jjtGetChild(0);

        r3 = (org.gjt.sp.jedit.bsh.SimpleNode) $r6;

        $r7 = r0.jjtGetChild(1);

        r4 = (org.gjt.sp.jedit.bsh.SimpleNode) $r7;

        $r8 = r0.jjtGetChild(2);

        r5 = (org.gjt.sp.jedit.bsh.SimpleNode) $r8;

        $z0 = org.gjt.sp.jedit.bsh.BSHIfStatement.evaluateCondition(r3, r1, r2);

        if $z0 == 0 goto label1;

        $r10 = r4.eval(r1, r2);

        return $r10;

     label1:
        $r9 = r5.eval(r1, r2);

        return $r9;
    }
}
